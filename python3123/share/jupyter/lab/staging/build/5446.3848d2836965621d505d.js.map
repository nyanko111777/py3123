{"version":3,"file":"5446.3848d2836965621d505d.js?v=3848d2836965621d505d","mappings":"qVAmBA,MAAMA,EAAc,OACpB,MAAMC,EAAwB,gBAC9B,MAAMC,EAAc,QACpB,MAAMC,EAAY,MAClB,MAAMC,EAAgB,UACtB,MAAMC,EAAc,mBACpB,MAAMC,EAAa,OACnB,MAAMC,EAAkB,YACxB,MAAMC,EAAc,eACpB,MAAMC,EAAY,QAClB,MAAMC,EAAoB,GAAGF,KAAeC,IAC5C,MAAME,EAAW,aACjB,MAAMC,EAAW,OACjB,MAAMC,EAAgB,YACtB,MAAMC,EAAqB,GAAGH,KAAYE,IAC1C,MAAME,EAAmB,GAAGP,KAAeI,IAC3C,MAAMI,EAAc,UACpB,MAAMC,EAAsB,GAAGT,KAAeQ,IAC9C,MAAME,EAAkB,cACxB,MAAMC,EAA0B,GAAGX,KAAeU,IAClD,MAAME,EAAS,SACf,MAAMC,EAAO,OACb,MAAMC,EAAc,QACpB,MAAMC,EAAoB,OAC1B,MAAMC,EAAU,GAAGD,IAAoBF,IACvC,MAAMI,EAAY,GAAGF,IAAoBH,IACzC,MAAMM,EAAe,YACrB,MAAMC,EAAwB,aAC9B,MAAMC,EAAkB,IACxB,MAAMC,EAAmB,OACzB,MAAMC,EAAmB,SACzB,IAAIC,EAAS,CAAC,EACd,IAAIC,EAAiB,EACrB,MAAMC,EAAU,SAASC,GACvB,MAAMC,EAAOC,OAAOD,KAAKD,GACzB,IAAK,MAAMG,KAAOF,EAAM,CACtBD,EAAIG,EACN,CACF,EACA,MAAMC,EAAa,SAASC,EAAMC,GAChCA,EAAWC,GAAGC,QAAQF,EAAWC,GAAGE,gBACpC,OAAOH,EAAWC,GAAGH,YACvB,EACA,SAASM,EAAqBC,GAC5B,GAAIA,SAAoB,GAAKA,IAAe,KAAM,CAChD,MAAO,EACT,KAAO,CACL,GAAIA,EAAWC,QAAS,CACtB,OAAOD,EAAWC,QAAQC,KAAK,IACjC,KAAO,CACL,MAAO,EACT,CACF,CACF,CACA,SAASC,EAAWC,EAAS,GAAIC,EAAU,EAAGC,EAAO,GAAIC,EAAa7B,GACpE,MAAM8B,EAAUF,IAAS,MAAQA,EAAKG,OAAS,EAAI,GAAGF,IAAaD,IAAS,GAC5E,MAAO,GAAG7B,KAAe2B,IAASI,KAAWH,GAC/C,CACA,MAAMK,EAAY,CAACC,EAAGC,EAAQC,EAAYC,EAAeC,EAAWC,KAClE,MAAMZ,EAASS,EAAWI,GAC1B,MAAMC,EAAWnB,EAAqBe,EAAcV,IACpD,GAAIA,IAAW,OAAQ,CACrB,IAAIe,EAAQhE,EACZ,GAAI0D,EAAWO,QAAU,KAAM,CAC7BD,EAAQ9D,CACV,CACA,GAAIwD,EAAWO,QAAU,MAAO,CAC9BD,EAAQ7D,CACV,CACA,GAAIuD,EAAWP,OAAS,EAAAe,EAAoB,CAC1CF,EAAQN,EAAWP,IACrB,CACA,IAAKpB,EAAOkB,GAAS,CACnBlB,EAAOkB,GAAU,CACfa,GAAIb,EACJe,QACAG,YAAa,IAAOC,aAAanB,GAAQ,UACzCH,QAAS,GAAGiB,KAAYrD,IAE5B,CACA,MAAM2D,EAAUtC,EAAOkB,GACvB,GAAIS,EAAWS,YAAa,CAC1B,GAAIG,MAAMC,QAAQF,EAAQF,aAAc,CACtCE,EAAQL,MAAQ/D,EAChBoE,EAAQF,YAAYK,KAAKd,EAAWS,YACtC,KAAO,CACL,GAAIE,EAAQF,YAAYb,OAAS,EAAG,CAClCe,EAAQL,MAAQ/D,EAChB,GAAIoE,EAAQF,cAAgBlB,EAAQ,CAClCoB,EAAQF,YAAc,CAACT,EAAWS,YACpC,KAAO,CACLE,EAAQF,YAAc,CAACE,EAAQF,YAAaT,EAAWS,YACzD,CACF,KAAO,CACLE,EAAQL,MAAQhE,EAChBqE,EAAQF,YAAcT,EAAWS,WACnC,CACF,CACAE,EAAQF,YAAc,IAAOM,oBAAoBJ,EAAQF,aAAa,SACxE,CACA,GAAIE,EAAQF,YAAYb,SAAW,GAAKe,EAAQL,QAAU/D,EAAuB,CAC/EoE,EAAQL,MAAQhE,CAClB,CACA,IAAKqE,EAAQlB,MAAQO,EAAWgB,IAAK,CACnC,EAAAC,EAAIC,KAAK,uBAAwB3B,EAAQ4B,GAAOnB,IAChDW,EAAQlB,KAAO,QACfkB,EAAQS,IAAMD,GAAOnB,GACrBW,EAAQL,MAAQN,EAAWP,OAAS,IAAe/C,EAAgBC,EACnEgE,EAAQvB,QAAUuB,EAAQvB,QAAU,IAAM7B,EAAsB,KAAO4C,EAAU1C,EAA0B,GAC7G,CACA,MAAM4D,EAAW,CACfC,WAAY,GACZhB,MAAOK,EAAQL,MACfiB,UAAWZ,EAAQF,YAInBrB,QAASuB,EAAQvB,QACjBoC,MAAO,GAEPpB,GAAIb,EACJ6B,IAAKT,EAAQS,IACbK,MAAOnC,EAAWC,EAAQjB,GAC1BmB,KAAMkB,EAAQlB,KACdiC,QAAS,IAGXL,EAASM,YAAc,KACvB,GAAI3B,EAAW4B,KAAM,CACnB,MAAMC,EAAW,CACfP,WAAY,GACZhB,MAAO1D,EACP2E,UAAWvB,EAAW4B,KAAK/C,KAC3BO,QAAS/B,EAETmE,MAAO,GAEPpB,GAAIb,EAASzB,EAAU,IAAMQ,EAC7BmD,MAAOnC,EAAWC,EAAQjB,EAAgBX,GAC1C8B,KAAMkB,EAAQlB,KACdiC,QAAS,IAGX,MAAMI,EAAY,CAChBR,WAAY,GACZhB,MAAOzD,EACP0E,UAAWvB,EAAW4B,KAAK/C,KAC3BO,QAASuB,EAAQvB,QACjBoC,MAAO,GAEPpB,GAAIb,EAASxB,EACb0D,MAAOnC,EAAWC,EAAQjB,EAAgBZ,GAC1C+B,KAAM,QACNiC,QAAS,GAGXpD,IACA,MAAMyD,EAAexC,EAASxB,EAC9B+B,EAAEkC,QAAQD,EAAcD,GACxBhC,EAAEkC,QAAQH,EAASzB,GAAIyB,GACvB/B,EAAEkC,QAAQzC,EAAQ8B,GAClBvB,EAAEmC,UAAU1C,EAAQwC,GACpBjC,EAAEmC,UAAUJ,EAASzB,GAAI2B,GACzB,IAAIG,EAAO3C,EACX,IAAI4C,EAAKN,EAASzB,GAClB,GAAIJ,EAAW4B,KAAKQ,WAAa,UAAW,CAC1CF,EAAOL,EAASzB,GAChB+B,EAAK5C,CACP,CACAO,EAAEuC,QAAQH,EAAMC,EAAI,CAClBG,UAAW,OACXC,UAAW,GACXf,MAAOxD,EACPsD,WAAY,GACZlC,QAAShC,EACToF,eAAgBvE,EAChBwE,SAAUvE,EACVwE,UAAWvE,EACXwE,UAAWvE,GAEf,KAAO,CACL0B,EAAEkC,QAAQzC,EAAQ8B,EACpB,CACF,CACA,GAAItB,GAAUA,EAAOK,KAAO,OAAQ,CAClC,EAAAa,EAAI2B,MAAM,gBAAiBrD,EAAQ,8BAA+BQ,EAAOK,IACzEN,EAAEmC,UAAU1C,EAAQQ,EAAOK,GAC7B,CACA,GAAIJ,EAAWgB,IAAK,CAClB,EAAAC,EAAI2B,MAAM,0BACVC,EAAS/C,EAAGE,EAAYA,EAAWgB,IAAKf,EAAeC,GAAYC,EACrE,GAEF,MAAM0C,EAAW,CAAC/C,EAAGgD,EAAkB9B,EAAKf,EAAeC,EAAWC,KACpE,EAAAc,EAAI2B,MAAM,QAAS5B,GACnBA,EAAI+B,SAASC,IACX,OAAQA,EAAKC,MACX,KAAK,IACHpD,EAAUC,EAAGgD,EAAkBE,EAAM/C,EAAeC,EAAWC,GAC/D,MACF,KAAK,EAAAK,EACHX,EAAUC,EAAGgD,EAAkBE,EAAM/C,EAAeC,EAAWC,GAC/D,MACF,KAAK,EAAA+C,EACH,CACErD,EAAUC,EAAGgD,EAAkBE,EAAKG,OAAQlD,EAAeC,EAAWC,GACtEN,EAAUC,EAAGgD,EAAkBE,EAAKI,OAAQnD,EAAeC,EAAWC,GACtE,MAAMkD,EAAW,CACfjD,GAAI,OAAS9B,EACbgE,UAAW,SACXgB,aAAc,aACd9B,MAAOxD,EACPsD,WAAY,GACZiC,MAAO,IAAO7C,aAAasC,EAAKvC,aAAa,UAC7C+B,eAAgBvE,EAChBwE,SAAUvE,EACVwE,UAAWvE,EACXwE,UAAWvE,EACXgB,QAASnC,GAEX6C,EAAEuC,QAAQW,EAAKG,OAAO/C,GAAI4C,EAAKI,OAAOhD,GAAIiD,EAAU/E,GACpDA,GACF,CACA,MACJ,GACA,EAEJ,MAAM6C,GAAS,CAACnB,EAAYwD,EAAa,OACvC,IAAIpC,EAAMoC,EACV,GAAIxD,EAAWgB,IAAK,CAClB,IAAK,IAAIyC,EAAI,EAAGA,EAAIzD,EAAWgB,IAAIpB,OAAQ6D,IAAK,CAC9C,MAAMC,EAAgB1D,EAAWgB,IAAIyC,GACrC,GAAIC,EAAcT,OAAS,MAAO,CAChC7B,EAAMsC,EAAcC,KACtB,CACF,CACF,CACA,OAAOvC,CAAG,EAEZ,MAAMwC,GAAOC,eAAehF,EAAMuB,EAAI0D,EAAUC,GAC9C,EAAA9C,EAAIC,KAAK,6BAA8Bd,GACvC/B,EAAS,CAAC,EACV0F,EAAKhF,GAAGiF,eACR,MAAM,cAAEC,EAAeC,MAAOC,IAAS,SACvC,MAAMC,EAAcD,EAAKC,aAAe,GACxC,MAAMC,EAAcF,EAAKE,aAAe,GACxC,EAAApD,EAAIC,KAAK6C,EAAKhF,GAAGE,gBACjB8E,EAAKhF,GAAGC,QAAQ+E,EAAKhF,GAAGE,gBACxB,EAAAgC,EAAIC,KAAK6C,EAAKhF,GAAGE,gBACjB,MAAMgB,EAAgB8D,EAAKhF,GAAGuF,YAC9B,MAAMxE,EAAI,IAAI,IAAe,CAC3ByE,WAAY,KACZC,SAAU,OACTC,SAAS,CACVC,QAASvD,GAAO4C,EAAKhF,GAAGE,gBACxB0F,QAASP,EACTQ,QAASP,EACTQ,QAAS,EACTC,QAAS,IACRC,qBAAoB,WACrB,MAAO,CAAC,CACV,IACAlF,EAAUC,OAAQ,EAAGiE,EAAKhF,GAAGE,eAAgBgB,EAAe8D,EAAKhF,GAAI,MACrE,IAAIiG,EACJ,GAAIf,IAAkB,UAAW,CAC/Be,GAAiB,SAAO,KAAO5E,EACjC,CACA,MAAM6E,EAAOhB,IAAkB,WAAY,SAAOe,EAAeE,QAAQ,GAAGC,gBAAgBC,OAAQ,SAAO,QAC3G,MAAMC,EAAMJ,EAAKK,OAAO,QAAQlF,OAChC,MAAMmF,EAAUN,EAAKK,OAAO,IAAMlF,EAAK,YACjC,IAAAoF,GAAOD,EAASzF,EAAG,CAAC,QAAShD,EAAasD,GAChD,MAAMsB,EAAU,EAChB,EAAA+D,EAAMC,YAAYL,EAAK,wBAAyBlB,EAAKwB,eAAgB5B,EAAKhF,GAAG6G,mBAC7E,MAAMC,EAASR,EAAIS,OAAOC,UAC1B,MAAMC,EAAQH,EAAOG,MAAQtE,EAAU,EACvC,MAAMuE,EAASJ,EAAOI,OAASvE,EAAU,EACzC2D,EAAIa,KAAK,QAASpJ,GAClB,MAAMqJ,EAAYd,EAAIS,OAAOC,WAC7B,OAAiBV,EAAKY,EAAQD,EAAO7B,EAAKiC,aAC1C,MAAMC,EAAO,GAAGF,EAAUG,EAAI5E,KAAWyE,EAAUI,EAAI7E,KAAWsE,KAASC,IAC3E,EAAAhF,EAAIuF,MAAM,WAAWH,KACrBhB,EAAIa,KAAK,UAAWG,GACpB,MAAMI,EAASC,SAASC,iBAAiB,QAAUvG,EAAK,wBACxD,IAAK,MAAMmD,KAASkD,EAAQ,CAC1B,MAAMG,EAAMrD,EAAMwC,UAClB,MAAMc,EAAOH,SAASI,gBAAgB,6BAA8BxK,GACpEuK,EAAKE,aAAa,KAAM,GACxBF,EAAKE,aAAa,KAAM,GACxBF,EAAKE,aAAa,QAASH,EAAIZ,OAC/Ba,EAAKE,aAAa,SAAUH,EAAIX,QAChC1C,EAAMyD,aAAaH,EAAMtD,EAAM0D,WACjC,CACF,EACA,MAAMC,GAAW,CACf3I,UACAK,aACAgF,SAEF,MAAMuD,GAAU,CACdC,OAAM,IACNrI,GAAE,IACFmI,YACAG,OAAM,IACNC,KAAO9I,IACL,IAAKA,EAAI0F,MAAO,CACd1F,EAAI0F,MAAQ,CAAC,CACf,CACA1F,EAAI0F,MAAMqD,oBAAsB/I,EAAI+I,oBACpC,EAAAC,EAAGC,OAAO,E","sources":["webpack://@jupyterlab/application-top/./node_modules/mermaid/dist/stateDiagram-v2-8daeecfe.js"],"sourcesContent":["import { D as DEFAULT_STATE_TYPE, a as DIVIDER_TYPE, S as STMT_RELATION, b as STMT_STATE, c as DEFAULT_NESTED_DOC_DIR, p as parser, d as db, s as styles } from \"./styles-401768ef.js\";\nimport * as graphlib from \"dagre-d3-es/src/graphlib/index.js\";\nimport { select } from \"d3\";\nimport { l as log, c as getConfig, u as utils, i as configureSvgSize, e as common } from \"./mermaid-04fb0060.js\";\nimport { r as render } from \"./index-0980fb80.js\";\nimport \"ts-dedent\";\nimport \"dayjs\";\nimport \"@braintree/sanitize-url\";\nimport \"dompurify\";\nimport \"khroma\";\nimport \"lodash-es/memoize.js\";\nimport \"lodash-es/merge.js\";\nimport \"stylis\";\nimport \"lodash-es/isEmpty.js\";\nimport \"dagre-d3-es/src/dagre/index.js\";\nimport \"dagre-d3-es/src/graphlib/json.js\";\nimport \"./edges-5ec2587c.js\";\nimport \"./createText-a48a4c90.js\";\nimport \"mdast-util-from-markdown\";\nconst SHAPE_STATE = \"rect\";\nconst SHAPE_STATE_WITH_DESC = \"rectWithTitle\";\nconst SHAPE_START = \"start\";\nconst SHAPE_END = \"end\";\nconst SHAPE_DIVIDER = \"divider\";\nconst SHAPE_GROUP = \"roundedWithTitle\";\nconst SHAPE_NOTE = \"note\";\nconst SHAPE_NOTEGROUP = \"noteGroup\";\nconst CSS_DIAGRAM = \"statediagram\";\nconst CSS_STATE = \"state\";\nconst CSS_DIAGRAM_STATE = `${CSS_DIAGRAM}-${CSS_STATE}`;\nconst CSS_EDGE = \"transition\";\nconst CSS_NOTE = \"note\";\nconst CSS_NOTE_EDGE = \"note-edge\";\nconst CSS_EDGE_NOTE_EDGE = `${CSS_EDGE} ${CSS_NOTE_EDGE}`;\nconst CSS_DIAGRAM_NOTE = `${CSS_DIAGRAM}-${CSS_NOTE}`;\nconst CSS_CLUSTER = \"cluster\";\nconst CSS_DIAGRAM_CLUSTER = `${CSS_DIAGRAM}-${CSS_CLUSTER}`;\nconst CSS_CLUSTER_ALT = \"cluster-alt\";\nconst CSS_DIAGRAM_CLUSTER_ALT = `${CSS_DIAGRAM}-${CSS_CLUSTER_ALT}`;\nconst PARENT = \"parent\";\nconst NOTE = \"note\";\nconst DOMID_STATE = \"state\";\nconst DOMID_TYPE_SPACER = \"----\";\nconst NOTE_ID = `${DOMID_TYPE_SPACER}${NOTE}`;\nconst PARENT_ID = `${DOMID_TYPE_SPACER}${PARENT}`;\nconst G_EDGE_STYLE = \"fill:none\";\nconst G_EDGE_ARROWHEADSTYLE = \"fill: #333\";\nconst G_EDGE_LABELPOS = \"c\";\nconst G_EDGE_LABELTYPE = \"text\";\nconst G_EDGE_THICKNESS = \"normal\";\nlet nodeDb = {};\nlet graphItemCount = 0;\nconst setConf = function(cnf) {\n  const keys = Object.keys(cnf);\n  for (const key of keys) {\n    cnf[key];\n  }\n};\nconst getClasses = function(text, diagramObj) {\n  diagramObj.db.extract(diagramObj.db.getRootDocV2());\n  return diagramObj.db.getClasses();\n};\nfunction getClassesFromDbInfo(dbInfoItem) {\n  if (dbInfoItem === void 0 || dbInfoItem === null) {\n    return \"\";\n  } else {\n    if (dbInfoItem.classes) {\n      return dbInfoItem.classes.join(\" \");\n    } else {\n      return \"\";\n    }\n  }\n}\nfunction stateDomId(itemId = \"\", counter = 0, type = \"\", typeSpacer = DOMID_TYPE_SPACER) {\n  const typeStr = type !== null && type.length > 0 ? `${typeSpacer}${type}` : \"\";\n  return `${DOMID_STATE}-${itemId}${typeStr}-${counter}`;\n}\nconst setupNode = (g, parent, parsedItem, diagramStates, diagramDb, altFlag) => {\n  const itemId = parsedItem.id;\n  const classStr = getClassesFromDbInfo(diagramStates[itemId]);\n  if (itemId !== \"root\") {\n    let shape = SHAPE_STATE;\n    if (parsedItem.start === true) {\n      shape = SHAPE_START;\n    }\n    if (parsedItem.start === false) {\n      shape = SHAPE_END;\n    }\n    if (parsedItem.type !== DEFAULT_STATE_TYPE) {\n      shape = parsedItem.type;\n    }\n    if (!nodeDb[itemId]) {\n      nodeDb[itemId] = {\n        id: itemId,\n        shape,\n        description: common.sanitizeText(itemId, getConfig()),\n        classes: `${classStr} ${CSS_DIAGRAM_STATE}`\n      };\n    }\n    const newNode = nodeDb[itemId];\n    if (parsedItem.description) {\n      if (Array.isArray(newNode.description)) {\n        newNode.shape = SHAPE_STATE_WITH_DESC;\n        newNode.description.push(parsedItem.description);\n      } else {\n        if (newNode.description.length > 0) {\n          newNode.shape = SHAPE_STATE_WITH_DESC;\n          if (newNode.description === itemId) {\n            newNode.description = [parsedItem.description];\n          } else {\n            newNode.description = [newNode.description, parsedItem.description];\n          }\n        } else {\n          newNode.shape = SHAPE_STATE;\n          newNode.description = parsedItem.description;\n        }\n      }\n      newNode.description = common.sanitizeTextOrArray(newNode.description, getConfig());\n    }\n    if (newNode.description.length === 1 && newNode.shape === SHAPE_STATE_WITH_DESC) {\n      newNode.shape = SHAPE_STATE;\n    }\n    if (!newNode.type && parsedItem.doc) {\n      log.info(\"Setting cluster for \", itemId, getDir(parsedItem));\n      newNode.type = \"group\";\n      newNode.dir = getDir(parsedItem);\n      newNode.shape = parsedItem.type === DIVIDER_TYPE ? SHAPE_DIVIDER : SHAPE_GROUP;\n      newNode.classes = newNode.classes + \" \" + CSS_DIAGRAM_CLUSTER + \" \" + (altFlag ? CSS_DIAGRAM_CLUSTER_ALT : \"\");\n    }\n    const nodeData = {\n      labelStyle: \"\",\n      shape: newNode.shape,\n      labelText: newNode.description,\n      // typeof newNode.description === 'object'\n      //   ? newNode.description[0]\n      //   : newNode.description,\n      classes: newNode.classes,\n      style: \"\",\n      //styles.style,\n      id: itemId,\n      dir: newNode.dir,\n      domId: stateDomId(itemId, graphItemCount),\n      type: newNode.type,\n      padding: 15\n      //getConfig().flowchart.padding\n    };\n    nodeData.centerLabel = true;\n    if (parsedItem.note) {\n      const noteData = {\n        labelStyle: \"\",\n        shape: SHAPE_NOTE,\n        labelText: parsedItem.note.text,\n        classes: CSS_DIAGRAM_NOTE,\n        // useHtmlLabels: false,\n        style: \"\",\n        // styles.style,\n        id: itemId + NOTE_ID + \"-\" + graphItemCount,\n        domId: stateDomId(itemId, graphItemCount, NOTE),\n        type: newNode.type,\n        padding: 15\n        //getConfig().flowchart.padding\n      };\n      const groupData = {\n        labelStyle: \"\",\n        shape: SHAPE_NOTEGROUP,\n        labelText: parsedItem.note.text,\n        classes: newNode.classes,\n        style: \"\",\n        // styles.style,\n        id: itemId + PARENT_ID,\n        domId: stateDomId(itemId, graphItemCount, PARENT),\n        type: \"group\",\n        padding: 0\n        //getConfig().flowchart.padding\n      };\n      graphItemCount++;\n      const parentNodeId = itemId + PARENT_ID;\n      g.setNode(parentNodeId, groupData);\n      g.setNode(noteData.id, noteData);\n      g.setNode(itemId, nodeData);\n      g.setParent(itemId, parentNodeId);\n      g.setParent(noteData.id, parentNodeId);\n      let from = itemId;\n      let to = noteData.id;\n      if (parsedItem.note.position === \"left of\") {\n        from = noteData.id;\n        to = itemId;\n      }\n      g.setEdge(from, to, {\n        arrowhead: \"none\",\n        arrowType: \"\",\n        style: G_EDGE_STYLE,\n        labelStyle: \"\",\n        classes: CSS_EDGE_NOTE_EDGE,\n        arrowheadStyle: G_EDGE_ARROWHEADSTYLE,\n        labelpos: G_EDGE_LABELPOS,\n        labelType: G_EDGE_LABELTYPE,\n        thickness: G_EDGE_THICKNESS\n      });\n    } else {\n      g.setNode(itemId, nodeData);\n    }\n  }\n  if (parent && parent.id !== \"root\") {\n    log.trace(\"Setting node \", itemId, \" to be child of its parent \", parent.id);\n    g.setParent(itemId, parent.id);\n  }\n  if (parsedItem.doc) {\n    log.trace(\"Adding nodes children \");\n    setupDoc(g, parsedItem, parsedItem.doc, diagramStates, diagramDb, !altFlag);\n  }\n};\nconst setupDoc = (g, parentParsedItem, doc, diagramStates, diagramDb, altFlag) => {\n  log.trace(\"items\", doc);\n  doc.forEach((item) => {\n    switch (item.stmt) {\n      case STMT_STATE:\n        setupNode(g, parentParsedItem, item, diagramStates, diagramDb, altFlag);\n        break;\n      case DEFAULT_STATE_TYPE:\n        setupNode(g, parentParsedItem, item, diagramStates, diagramDb, altFlag);\n        break;\n      case STMT_RELATION:\n        {\n          setupNode(g, parentParsedItem, item.state1, diagramStates, diagramDb, altFlag);\n          setupNode(g, parentParsedItem, item.state2, diagramStates, diagramDb, altFlag);\n          const edgeData = {\n            id: \"edge\" + graphItemCount,\n            arrowhead: \"normal\",\n            arrowTypeEnd: \"arrow_barb\",\n            style: G_EDGE_STYLE,\n            labelStyle: \"\",\n            label: common.sanitizeText(item.description, getConfig()),\n            arrowheadStyle: G_EDGE_ARROWHEADSTYLE,\n            labelpos: G_EDGE_LABELPOS,\n            labelType: G_EDGE_LABELTYPE,\n            thickness: G_EDGE_THICKNESS,\n            classes: CSS_EDGE\n          };\n          g.setEdge(item.state1.id, item.state2.id, edgeData, graphItemCount);\n          graphItemCount++;\n        }\n        break;\n    }\n  });\n};\nconst getDir = (parsedItem, defaultDir = DEFAULT_NESTED_DOC_DIR) => {\n  let dir = defaultDir;\n  if (parsedItem.doc) {\n    for (let i = 0; i < parsedItem.doc.length; i++) {\n      const parsedItemDoc = parsedItem.doc[i];\n      if (parsedItemDoc.stmt === \"dir\") {\n        dir = parsedItemDoc.value;\n      }\n    }\n  }\n  return dir;\n};\nconst draw = async function(text, id, _version, diag) {\n  log.info(\"Drawing state diagram (v2)\", id);\n  nodeDb = {};\n  diag.db.getDirection();\n  const { securityLevel, state: conf } = getConfig();\n  const nodeSpacing = conf.nodeSpacing || 50;\n  const rankSpacing = conf.rankSpacing || 50;\n  log.info(diag.db.getRootDocV2());\n  diag.db.extract(diag.db.getRootDocV2());\n  log.info(diag.db.getRootDocV2());\n  const diagramStates = diag.db.getStates();\n  const g = new graphlib.Graph({\n    multigraph: true,\n    compound: true\n  }).setGraph({\n    rankdir: getDir(diag.db.getRootDocV2()),\n    nodesep: nodeSpacing,\n    ranksep: rankSpacing,\n    marginx: 8,\n    marginy: 8\n  }).setDefaultEdgeLabel(function() {\n    return {};\n  });\n  setupNode(g, void 0, diag.db.getRootDocV2(), diagramStates, diag.db, true);\n  let sandboxElement;\n  if (securityLevel === \"sandbox\") {\n    sandboxElement = select(\"#i\" + id);\n  }\n  const root = securityLevel === \"sandbox\" ? select(sandboxElement.nodes()[0].contentDocument.body) : select(\"body\");\n  const svg = root.select(`[id=\"${id}\"]`);\n  const element = root.select(\"#\" + id + \" g\");\n  await render(element, g, [\"barb\"], CSS_DIAGRAM, id);\n  const padding = 8;\n  utils.insertTitle(svg, \"statediagramTitleText\", conf.titleTopMargin, diag.db.getDiagramTitle());\n  const bounds = svg.node().getBBox();\n  const width = bounds.width + padding * 2;\n  const height = bounds.height + padding * 2;\n  svg.attr(\"class\", CSS_DIAGRAM);\n  const svgBounds = svg.node().getBBox();\n  configureSvgSize(svg, height, width, conf.useMaxWidth);\n  const vBox = `${svgBounds.x - padding} ${svgBounds.y - padding} ${width} ${height}`;\n  log.debug(`viewBox ${vBox}`);\n  svg.attr(\"viewBox\", vBox);\n  const labels = document.querySelectorAll('[id=\"' + id + '\"] .edgeLabel .label');\n  for (const label of labels) {\n    const dim = label.getBBox();\n    const rect = document.createElementNS(\"http://www.w3.org/2000/svg\", SHAPE_STATE);\n    rect.setAttribute(\"rx\", 0);\n    rect.setAttribute(\"ry\", 0);\n    rect.setAttribute(\"width\", dim.width);\n    rect.setAttribute(\"height\", dim.height);\n    label.insertBefore(rect, label.firstChild);\n  }\n};\nconst renderer = {\n  setConf,\n  getClasses,\n  draw\n};\nconst diagram = {\n  parser,\n  db,\n  renderer,\n  styles,\n  init: (cnf) => {\n    if (!cnf.state) {\n      cnf.state = {};\n    }\n    cnf.state.arrowMarkerAbsolute = cnf.arrowMarkerAbsolute;\n    db.clear();\n  }\n};\nexport {\n  diagram\n};\n"],"names":["SHAPE_STATE","SHAPE_STATE_WITH_DESC","SHAPE_START","SHAPE_END","SHAPE_DIVIDER","SHAPE_GROUP","SHAPE_NOTE","SHAPE_NOTEGROUP","CSS_DIAGRAM","CSS_STATE","CSS_DIAGRAM_STATE","CSS_EDGE","CSS_NOTE","CSS_NOTE_EDGE","CSS_EDGE_NOTE_EDGE","CSS_DIAGRAM_NOTE","CSS_CLUSTER","CSS_DIAGRAM_CLUSTER","CSS_CLUSTER_ALT","CSS_DIAGRAM_CLUSTER_ALT","PARENT","NOTE","DOMID_STATE","DOMID_TYPE_SPACER","NOTE_ID","PARENT_ID","G_EDGE_STYLE","G_EDGE_ARROWHEADSTYLE","G_EDGE_LABELPOS","G_EDGE_LABELTYPE","G_EDGE_THICKNESS","nodeDb","graphItemCount","setConf","cnf","keys","Object","key","getClasses","text","diagramObj","db","extract","getRootDocV2","getClassesFromDbInfo","dbInfoItem","classes","join","stateDomId","itemId","counter","type","typeSpacer","typeStr","length","setupNode","g","parent","parsedItem","diagramStates","diagramDb","altFlag","id","classStr","shape","start","D","description","sanitizeText","newNode","Array","isArray","push","sanitizeTextOrArray","doc","l","info","getDir","dir","nodeData","labelStyle","labelText","style","domId","padding","centerLabel","note","noteData","groupData","parentNodeId","setNode","setParent","from","to","position","setEdge","arrowhead","arrowType","arrowheadStyle","labelpos","labelType","thickness","trace","setupDoc","parentParsedItem","forEach","item","stmt","S","state1","state2","edgeData","arrowTypeEnd","label","defaultDir","i","parsedItemDoc","value","draw","async","_version","diag","getDirection","securityLevel","state","conf","nodeSpacing","rankSpacing","getStates","multigraph","compound","setGraph","rankdir","nodesep","ranksep","marginx","marginy","setDefaultEdgeLabel","sandboxElement","root","nodes","contentDocument","body","svg","select","element","r","u","insertTitle","titleTopMargin","getDiagramTitle","bounds","node","getBBox","width","height","attr","svgBounds","useMaxWidth","vBox","x","y","debug","labels","document","querySelectorAll","dim","rect","createElementNS","setAttribute","insertBefore","firstChild","renderer","diagram","parser","styles","init","arrowMarkerAbsolute","d","clear"],"sourceRoot":""}