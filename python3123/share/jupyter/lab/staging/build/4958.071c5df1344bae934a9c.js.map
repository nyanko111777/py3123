{"version":3,"file":"4958.071c5df1344bae934a9c.js?v=071c5df1344bae934a9c","mappings":"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","sources":["webpack://@jupyterlab/application-top/./node_modules/crelt/index.es.js","webpack://@jupyterlab/application-top/./node_modules/@codemirror/search/dist/index.js"],"sourcesContent":["export default function crelt() {\n  var elt = arguments[0]\n  if (typeof elt == \"string\") elt = document.createElement(elt)\n  var i = 1, next = arguments[1]\n  if (next && typeof next == \"object\" && next.nodeType == null && !Array.isArray(next)) {\n    for (var name in next) if (Object.prototype.hasOwnProperty.call(next, name)) {\n      var value = next[name]\n      if (typeof value == \"string\") elt.setAttribute(name, value)\n      else if (value != null) elt[name] = value\n    }\n    i++\n  }\n  for (; i < arguments.length; i++) add(elt, arguments[i])\n  return elt\n}\n\nfunction add(elt, child) {\n  if (typeof child == \"string\") {\n    elt.appendChild(document.createTextNode(child))\n  } else if (child == null) {\n  } else if (child.nodeType != null) {\n    elt.appendChild(child)\n  } else if (Array.isArray(child)) {\n    for (var i = 0; i < child.length; i++) add(elt, child[i])\n  } else {\n    throw new RangeError(\"Unsupported child node: \" + child)\n  }\n}\n","import { showPanel, EditorView, getPanel, Decoration, ViewPlugin, runScopeHandlers } from '@codemirror/view';\nimport { codePointAt, fromCodePoint, codePointSize, StateEffect, StateField, EditorSelection, Facet, combineConfig, CharCategory, RangeSetBuilder, Prec, EditorState, findClusterBreak } from '@codemirror/state';\nimport elt from 'crelt';\n\nconst basicNormalize = typeof String.prototype.normalize == \"function\"\n    ? x => x.normalize(\"NFKD\") : x => x;\n/**\nA search cursor provides an iterator over text matches in a\ndocument.\n*/\nclass SearchCursor {\n    /**\n    Create a text cursor. The query is the search string, `from` to\n    `to` provides the region to search.\n    \n    When `normalize` is given, it will be called, on both the query\n    string and the content it is matched against, before comparing.\n    You can, for example, create a case-insensitive search by\n    passing `s => s.toLowerCase()`.\n    \n    Text is always normalized with\n    [`.normalize(\"NFKD\")`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize)\n    (when supported).\n    */\n    constructor(text, query, from = 0, to = text.length, normalize, test) {\n        this.test = test;\n        /**\n        The current match (only holds a meaningful value after\n        [`next`](https://codemirror.net/6/docs/ref/#search.SearchCursor.next) has been called and when\n        `done` is false).\n        */\n        this.value = { from: 0, to: 0 };\n        /**\n        Whether the end of the iterated region has been reached.\n        */\n        this.done = false;\n        this.matches = [];\n        this.buffer = \"\";\n        this.bufferPos = 0;\n        this.iter = text.iterRange(from, to);\n        this.bufferStart = from;\n        this.normalize = normalize ? x => normalize(basicNormalize(x)) : basicNormalize;\n        this.query = this.normalize(query);\n    }\n    peek() {\n        if (this.bufferPos == this.buffer.length) {\n            this.bufferStart += this.buffer.length;\n            this.iter.next();\n            if (this.iter.done)\n                return -1;\n            this.bufferPos = 0;\n            this.buffer = this.iter.value;\n        }\n        return codePointAt(this.buffer, this.bufferPos);\n    }\n    /**\n    Look for the next match. Updates the iterator's\n    [`value`](https://codemirror.net/6/docs/ref/#search.SearchCursor.value) and\n    [`done`](https://codemirror.net/6/docs/ref/#search.SearchCursor.done) properties. Should be called\n    at least once before using the cursor.\n    */\n    next() {\n        while (this.matches.length)\n            this.matches.pop();\n        return this.nextOverlapping();\n    }\n    /**\n    The `next` method will ignore matches that partially overlap a\n    previous match. This method behaves like `next`, but includes\n    such matches.\n    */\n    nextOverlapping() {\n        for (;;) {\n            let next = this.peek();\n            if (next < 0) {\n                this.done = true;\n                return this;\n            }\n            let str = fromCodePoint(next), start = this.bufferStart + this.bufferPos;\n            this.bufferPos += codePointSize(next);\n            let norm = this.normalize(str);\n            for (let i = 0, pos = start;; i++) {\n                let code = norm.charCodeAt(i);\n                let match = this.match(code, pos, this.bufferPos + this.bufferStart);\n                if (i == norm.length - 1) {\n                    if (match) {\n                        this.value = match;\n                        return this;\n                    }\n                    break;\n                }\n                if (pos == start && i < str.length && str.charCodeAt(i) == code)\n                    pos++;\n            }\n        }\n    }\n    match(code, pos, end) {\n        let match = null;\n        for (let i = 0; i < this.matches.length; i += 2) {\n            let index = this.matches[i], keep = false;\n            if (this.query.charCodeAt(index) == code) {\n                if (index == this.query.length - 1) {\n                    match = { from: this.matches[i + 1], to: end };\n                }\n                else {\n                    this.matches[i]++;\n                    keep = true;\n                }\n            }\n            if (!keep) {\n                this.matches.splice(i, 2);\n                i -= 2;\n            }\n        }\n        if (this.query.charCodeAt(0) == code) {\n            if (this.query.length == 1)\n                match = { from: pos, to: end };\n            else\n                this.matches.push(1, pos);\n        }\n        if (match && this.test && !this.test(match.from, match.to, this.buffer, this.bufferStart))\n            match = null;\n        return match;\n    }\n}\nif (typeof Symbol != \"undefined\")\n    SearchCursor.prototype[Symbol.iterator] = function () { return this; };\n\nconst empty = { from: -1, to: -1, match: /*@__PURE__*//.*/.exec(\"\") };\nconst baseFlags = \"gm\" + (/x/.unicode == null ? \"\" : \"u\");\n/**\nThis class is similar to [`SearchCursor`](https://codemirror.net/6/docs/ref/#search.SearchCursor)\nbut searches for a regular expression pattern instead of a plain\nstring.\n*/\nclass RegExpCursor {\n    /**\n    Create a cursor that will search the given range in the given\n    document. `query` should be the raw pattern (as you'd pass it to\n    `new RegExp`).\n    */\n    constructor(text, query, options, from = 0, to = text.length) {\n        this.text = text;\n        this.to = to;\n        this.curLine = \"\";\n        /**\n        Set to `true` when the cursor has reached the end of the search\n        range.\n        */\n        this.done = false;\n        /**\n        Will contain an object with the extent of the match and the\n        match object when [`next`](https://codemirror.net/6/docs/ref/#search.RegExpCursor.next)\n        sucessfully finds a match.\n        */\n        this.value = empty;\n        if (/\\\\[sWDnr]|\\n|\\r|\\[\\^/.test(query))\n            return new MultilineRegExpCursor(text, query, options, from, to);\n        this.re = new RegExp(query, baseFlags + ((options === null || options === void 0 ? void 0 : options.ignoreCase) ? \"i\" : \"\"));\n        this.test = options === null || options === void 0 ? void 0 : options.test;\n        this.iter = text.iter();\n        let startLine = text.lineAt(from);\n        this.curLineStart = startLine.from;\n        this.matchPos = toCharEnd(text, from);\n        this.getLine(this.curLineStart);\n    }\n    getLine(skip) {\n        this.iter.next(skip);\n        if (this.iter.lineBreak) {\n            this.curLine = \"\";\n        }\n        else {\n            this.curLine = this.iter.value;\n            if (this.curLineStart + this.curLine.length > this.to)\n                this.curLine = this.curLine.slice(0, this.to - this.curLineStart);\n            this.iter.next();\n        }\n    }\n    nextLine() {\n        this.curLineStart = this.curLineStart + this.curLine.length + 1;\n        if (this.curLineStart > this.to)\n            this.curLine = \"\";\n        else\n            this.getLine(0);\n    }\n    /**\n    Move to the next match, if there is one.\n    */\n    next() {\n        for (let off = this.matchPos - this.curLineStart;;) {\n            this.re.lastIndex = off;\n            let match = this.matchPos <= this.to && this.re.exec(this.curLine);\n            if (match) {\n                let from = this.curLineStart + match.index, to = from + match[0].length;\n                this.matchPos = toCharEnd(this.text, to + (from == to ? 1 : 0));\n                if (from == this.curLineStart + this.curLine.length)\n                    this.nextLine();\n                if ((from < to || from > this.value.to) && (!this.test || this.test(from, to, match))) {\n                    this.value = { from, to, match };\n                    return this;\n                }\n                off = this.matchPos - this.curLineStart;\n            }\n            else if (this.curLineStart + this.curLine.length < this.to) {\n                this.nextLine();\n                off = 0;\n            }\n            else {\n                this.done = true;\n                return this;\n            }\n        }\n    }\n}\nconst flattened = /*@__PURE__*/new WeakMap();\n// Reusable (partially) flattened document strings\nclass FlattenedDoc {\n    constructor(from, text) {\n        this.from = from;\n        this.text = text;\n    }\n    get to() { return this.from + this.text.length; }\n    static get(doc, from, to) {\n        let cached = flattened.get(doc);\n        if (!cached || cached.from >= to || cached.to <= from) {\n            let flat = new FlattenedDoc(from, doc.sliceString(from, to));\n            flattened.set(doc, flat);\n            return flat;\n        }\n        if (cached.from == from && cached.to == to)\n            return cached;\n        let { text, from: cachedFrom } = cached;\n        if (cachedFrom > from) {\n            text = doc.sliceString(from, cachedFrom) + text;\n            cachedFrom = from;\n        }\n        if (cached.to < to)\n            text += doc.sliceString(cached.to, to);\n        flattened.set(doc, new FlattenedDoc(cachedFrom, text));\n        return new FlattenedDoc(from, text.slice(from - cachedFrom, to - cachedFrom));\n    }\n}\nclass MultilineRegExpCursor {\n    constructor(text, query, options, from, to) {\n        this.text = text;\n        this.to = to;\n        this.done = false;\n        this.value = empty;\n        this.matchPos = toCharEnd(text, from);\n        this.re = new RegExp(query, baseFlags + ((options === null || options === void 0 ? void 0 : options.ignoreCase) ? \"i\" : \"\"));\n        this.test = options === null || options === void 0 ? void 0 : options.test;\n        this.flat = FlattenedDoc.get(text, from, this.chunkEnd(from + 5000 /* Chunk.Base */));\n    }\n    chunkEnd(pos) {\n        return pos >= this.to ? this.to : this.text.lineAt(pos).to;\n    }\n    next() {\n        for (;;) {\n            let off = this.re.lastIndex = this.matchPos - this.flat.from;\n            let match = this.re.exec(this.flat.text);\n            // Skip empty matches directly after the last match\n            if (match && !match[0] && match.index == off) {\n                this.re.lastIndex = off + 1;\n                match = this.re.exec(this.flat.text);\n            }\n            if (match) {\n                let from = this.flat.from + match.index, to = from + match[0].length;\n                // If a match goes almost to the end of a noncomplete chunk, try\n                // again, since it'll likely be able to match more\n                if ((this.flat.to >= this.to || match.index + match[0].length <= this.flat.text.length - 10) &&\n                    (!this.test || this.test(from, to, match))) {\n                    this.value = { from, to, match };\n                    this.matchPos = toCharEnd(this.text, to + (from == to ? 1 : 0));\n                    return this;\n                }\n            }\n            if (this.flat.to == this.to) {\n                this.done = true;\n                return this;\n            }\n            // Grow the flattened doc\n            this.flat = FlattenedDoc.get(this.text, this.flat.from, this.chunkEnd(this.flat.from + this.flat.text.length * 2));\n        }\n    }\n}\nif (typeof Symbol != \"undefined\") {\n    RegExpCursor.prototype[Symbol.iterator] = MultilineRegExpCursor.prototype[Symbol.iterator] =\n        function () { return this; };\n}\nfunction validRegExp(source) {\n    try {\n        new RegExp(source, baseFlags);\n        return true;\n    }\n    catch (_a) {\n        return false;\n    }\n}\nfunction toCharEnd(text, pos) {\n    if (pos >= text.length)\n        return pos;\n    let line = text.lineAt(pos), next;\n    while (pos < line.to && (next = line.text.charCodeAt(pos - line.from)) >= 0xDC00 && next < 0xE000)\n        pos++;\n    return pos;\n}\n\nfunction createLineDialog(view) {\n    let line = String(view.state.doc.lineAt(view.state.selection.main.head).number);\n    let input = elt(\"input\", { class: \"cm-textfield\", name: \"line\", value: line });\n    let dom = elt(\"form\", {\n        class: \"cm-gotoLine\",\n        onkeydown: (event) => {\n            if (event.keyCode == 27) { // Escape\n                event.preventDefault();\n                view.dispatch({ effects: dialogEffect.of(false) });\n                view.focus();\n            }\n            else if (event.keyCode == 13) { // Enter\n                event.preventDefault();\n                go();\n            }\n        },\n        onsubmit: (event) => {\n            event.preventDefault();\n            go();\n        }\n    }, elt(\"label\", view.state.phrase(\"Go to line\"), \": \", input), \" \", elt(\"button\", { class: \"cm-button\", type: \"submit\" }, view.state.phrase(\"go\")));\n    function go() {\n        let match = /^([+-])?(\\d+)?(:\\d+)?(%)?$/.exec(input.value);\n        if (!match)\n            return;\n        let { state } = view, startLine = state.doc.lineAt(state.selection.main.head);\n        let [, sign, ln, cl, percent] = match;\n        let col = cl ? +cl.slice(1) : 0;\n        let line = ln ? +ln : startLine.number;\n        if (ln && percent) {\n            let pc = line / 100;\n            if (sign)\n                pc = pc * (sign == \"-\" ? -1 : 1) + (startLine.number / state.doc.lines);\n            line = Math.round(state.doc.lines * pc);\n        }\n        else if (ln && sign) {\n            line = line * (sign == \"-\" ? -1 : 1) + startLine.number;\n        }\n        let docLine = state.doc.line(Math.max(1, Math.min(state.doc.lines, line)));\n        let selection = EditorSelection.cursor(docLine.from + Math.max(0, Math.min(col, docLine.length)));\n        view.dispatch({\n            effects: [dialogEffect.of(false), EditorView.scrollIntoView(selection.from, { y: 'center' })],\n            selection,\n        });\n        view.focus();\n    }\n    return { dom };\n}\nconst dialogEffect = /*@__PURE__*/StateEffect.define();\nconst dialogField = /*@__PURE__*/StateField.define({\n    create() { return true; },\n    update(value, tr) {\n        for (let e of tr.effects)\n            if (e.is(dialogEffect))\n                value = e.value;\n        return value;\n    },\n    provide: f => showPanel.from(f, val => val ? createLineDialog : null)\n});\n/**\nCommand that shows a dialog asking the user for a line number, and\nwhen a valid position is provided, moves the cursor to that line.\n\nSupports line numbers, relative line offsets prefixed with `+` or\n`-`, document percentages suffixed with `%`, and an optional\ncolumn position by adding `:` and a second number after the line\nnumber.\n*/\nconst gotoLine = view => {\n    let panel = getPanel(view, createLineDialog);\n    if (!panel) {\n        let effects = [dialogEffect.of(true)];\n        if (view.state.field(dialogField, false) == null)\n            effects.push(StateEffect.appendConfig.of([dialogField, baseTheme$1]));\n        view.dispatch({ effects });\n        panel = getPanel(view, createLineDialog);\n    }\n    if (panel)\n        panel.dom.querySelector(\"input\").select();\n    return true;\n};\nconst baseTheme$1 = /*@__PURE__*/EditorView.baseTheme({\n    \".cm-panel.cm-gotoLine\": {\n        padding: \"2px 6px 4px\",\n        \"& label\": { fontSize: \"80%\" }\n    }\n});\n\nconst defaultHighlightOptions = {\n    highlightWordAroundCursor: false,\n    minSelectionLength: 1,\n    maxMatches: 100,\n    wholeWords: false\n};\nconst highlightConfig = /*@__PURE__*/Facet.define({\n    combine(options) {\n        return combineConfig(options, defaultHighlightOptions, {\n            highlightWordAroundCursor: (a, b) => a || b,\n            minSelectionLength: Math.min,\n            maxMatches: Math.min\n        });\n    }\n});\n/**\nThis extension highlights text that matches the selection. It uses\nthe `\"cm-selectionMatch\"` class for the highlighting. When\n`highlightWordAroundCursor` is enabled, the word at the cursor\nitself will be highlighted with `\"cm-selectionMatch-main\"`.\n*/\nfunction highlightSelectionMatches(options) {\n    let ext = [defaultTheme, matchHighlighter];\n    if (options)\n        ext.push(highlightConfig.of(options));\n    return ext;\n}\nconst matchDeco = /*@__PURE__*/Decoration.mark({ class: \"cm-selectionMatch\" });\nconst mainMatchDeco = /*@__PURE__*/Decoration.mark({ class: \"cm-selectionMatch cm-selectionMatch-main\" });\n// Whether the characters directly outside the given positions are non-word characters\nfunction insideWordBoundaries(check, state, from, to) {\n    return (from == 0 || check(state.sliceDoc(from - 1, from)) != CharCategory.Word) &&\n        (to == state.doc.length || check(state.sliceDoc(to, to + 1)) != CharCategory.Word);\n}\n// Whether the characters directly at the given positions are word characters\nfunction insideWord(check, state, from, to) {\n    return check(state.sliceDoc(from, from + 1)) == CharCategory.Word\n        && check(state.sliceDoc(to - 1, to)) == CharCategory.Word;\n}\nconst matchHighlighter = /*@__PURE__*/ViewPlugin.fromClass(class {\n    constructor(view) {\n        this.decorations = this.getDeco(view);\n    }\n    update(update) {\n        if (update.selectionSet || update.docChanged || update.viewportChanged)\n            this.decorations = this.getDeco(update.view);\n    }\n    getDeco(view) {\n        let conf = view.state.facet(highlightConfig);\n        let { state } = view, sel = state.selection;\n        if (sel.ranges.length > 1)\n            return Decoration.none;\n        let range = sel.main, query, check = null;\n        if (range.empty) {\n            if (!conf.highlightWordAroundCursor)\n                return Decoration.none;\n            let word = state.wordAt(range.head);\n            if (!word)\n                return Decoration.none;\n            check = state.charCategorizer(range.head);\n            query = state.sliceDoc(word.from, word.to);\n        }\n        else {\n            let len = range.to - range.from;\n            if (len < conf.minSelectionLength || len > 200)\n                return Decoration.none;\n            if (conf.wholeWords) {\n                query = state.sliceDoc(range.from, range.to); // TODO: allow and include leading/trailing space?\n                check = state.charCategorizer(range.head);\n                if (!(insideWordBoundaries(check, state, range.from, range.to) &&\n                    insideWord(check, state, range.from, range.to)))\n                    return Decoration.none;\n            }\n            else {\n                query = state.sliceDoc(range.from, range.to);\n                if (!query)\n                    return Decoration.none;\n            }\n        }\n        let deco = [];\n        for (let part of view.visibleRanges) {\n            let cursor = new SearchCursor(state.doc, query, part.from, part.to);\n            while (!cursor.next().done) {\n                let { from, to } = cursor.value;\n                if (!check || insideWordBoundaries(check, state, from, to)) {\n                    if (range.empty && from <= range.from && to >= range.to)\n                        deco.push(mainMatchDeco.range(from, to));\n                    else if (from >= range.to || to <= range.from)\n                        deco.push(matchDeco.range(from, to));\n                    if (deco.length > conf.maxMatches)\n                        return Decoration.none;\n                }\n            }\n        }\n        return Decoration.set(deco);\n    }\n}, {\n    decorations: v => v.decorations\n});\nconst defaultTheme = /*@__PURE__*/EditorView.baseTheme({\n    \".cm-selectionMatch\": { backgroundColor: \"#99ff7780\" },\n    \".cm-searchMatch .cm-selectionMatch\": { backgroundColor: \"transparent\" }\n});\n// Select the words around the cursors.\nconst selectWord = ({ state, dispatch }) => {\n    let { selection } = state;\n    let newSel = EditorSelection.create(selection.ranges.map(range => state.wordAt(range.head) || EditorSelection.cursor(range.head)), selection.mainIndex);\n    if (newSel.eq(selection))\n        return false;\n    dispatch(state.update({ selection: newSel }));\n    return true;\n};\n// Find next occurrence of query relative to last cursor. Wrap around\n// the document if there are no more matches.\nfunction findNextOccurrence(state, query) {\n    let { main, ranges } = state.selection;\n    let word = state.wordAt(main.head), fullWord = word && word.from == main.from && word.to == main.to;\n    for (let cycled = false, cursor = new SearchCursor(state.doc, query, ranges[ranges.length - 1].to);;) {\n        cursor.next();\n        if (cursor.done) {\n            if (cycled)\n                return null;\n            cursor = new SearchCursor(state.doc, query, 0, Math.max(0, ranges[ranges.length - 1].from - 1));\n            cycled = true;\n        }\n        else {\n            if (cycled && ranges.some(r => r.from == cursor.value.from))\n                continue;\n            if (fullWord) {\n                let word = state.wordAt(cursor.value.from);\n                if (!word || word.from != cursor.value.from || word.to != cursor.value.to)\n                    continue;\n            }\n            return cursor.value;\n        }\n    }\n}\n/**\nSelect next occurrence of the current selection. Expand selection\nto the surrounding word when the selection is empty.\n*/\nconst selectNextOccurrence = ({ state, dispatch }) => {\n    let { ranges } = state.selection;\n    if (ranges.some(sel => sel.from === sel.to))\n        return selectWord({ state, dispatch });\n    let searchedText = state.sliceDoc(ranges[0].from, ranges[0].to);\n    if (state.selection.ranges.some(r => state.sliceDoc(r.from, r.to) != searchedText))\n        return false;\n    let range = findNextOccurrence(state, searchedText);\n    if (!range)\n        return false;\n    dispatch(state.update({\n        selection: state.selection.addRange(EditorSelection.range(range.from, range.to), false),\n        effects: EditorView.scrollIntoView(range.to)\n    }));\n    return true;\n};\n\nconst searchConfigFacet = /*@__PURE__*/Facet.define({\n    combine(configs) {\n        return combineConfig(configs, {\n            top: false,\n            caseSensitive: false,\n            literal: false,\n            regexp: false,\n            wholeWord: false,\n            createPanel: view => new SearchPanel(view),\n            scrollToMatch: range => EditorView.scrollIntoView(range)\n        });\n    }\n});\n/**\nAdd search state to the editor configuration, and optionally\nconfigure the search extension.\n([`openSearchPanel`](https://codemirror.net/6/docs/ref/#search.openSearchPanel) will automatically\nenable this if it isn't already on).\n*/\nfunction search(config) {\n    return config ? [searchConfigFacet.of(config), searchExtensions] : searchExtensions;\n}\n/**\nA search query. Part of the editor's search state.\n*/\nclass SearchQuery {\n    /**\n    Create a query object.\n    */\n    constructor(config) {\n        this.search = config.search;\n        this.caseSensitive = !!config.caseSensitive;\n        this.literal = !!config.literal;\n        this.regexp = !!config.regexp;\n        this.replace = config.replace || \"\";\n        this.valid = !!this.search && (!this.regexp || validRegExp(this.search));\n        this.unquoted = this.unquote(this.search);\n        this.wholeWord = !!config.wholeWord;\n    }\n    /**\n    @internal\n    */\n    unquote(text) {\n        return this.literal ? text :\n            text.replace(/\\\\([nrt\\\\])/g, (_, ch) => ch == \"n\" ? \"\\n\" : ch == \"r\" ? \"\\r\" : ch == \"t\" ? \"\\t\" : \"\\\\\");\n    }\n    /**\n    Compare this query to another query.\n    */\n    eq(other) {\n        return this.search == other.search && this.replace == other.replace &&\n            this.caseSensitive == other.caseSensitive && this.regexp == other.regexp &&\n            this.wholeWord == other.wholeWord;\n    }\n    /**\n    @internal\n    */\n    create() {\n        return this.regexp ? new RegExpQuery(this) : new StringQuery(this);\n    }\n    /**\n    Get a search cursor for this query, searching through the given\n    range in the given state.\n    */\n    getCursor(state, from = 0, to) {\n        let st = state.doc ? state : EditorState.create({ doc: state });\n        if (to == null)\n            to = st.doc.length;\n        return this.regexp ? regexpCursor(this, st, from, to) : stringCursor(this, st, from, to);\n    }\n}\nclass QueryType {\n    constructor(spec) {\n        this.spec = spec;\n    }\n}\nfunction stringCursor(spec, state, from, to) {\n    return new SearchCursor(state.doc, spec.unquoted, from, to, spec.caseSensitive ? undefined : x => x.toLowerCase(), spec.wholeWord ? stringWordTest(state.doc, state.charCategorizer(state.selection.main.head)) : undefined);\n}\nfunction stringWordTest(doc, categorizer) {\n    return (from, to, buf, bufPos) => {\n        if (bufPos > from || bufPos + buf.length < to) {\n            bufPos = Math.max(0, from - 2);\n            buf = doc.sliceString(bufPos, Math.min(doc.length, to + 2));\n        }\n        return (categorizer(charBefore(buf, from - bufPos)) != CharCategory.Word ||\n            categorizer(charAfter(buf, from - bufPos)) != CharCategory.Word) &&\n            (categorizer(charAfter(buf, to - bufPos)) != CharCategory.Word ||\n                categorizer(charBefore(buf, to - bufPos)) != CharCategory.Word);\n    };\n}\nclass StringQuery extends QueryType {\n    constructor(spec) {\n        super(spec);\n    }\n    nextMatch(state, curFrom, curTo) {\n        let cursor = stringCursor(this.spec, state, curTo, state.doc.length).nextOverlapping();\n        if (cursor.done)\n            cursor = stringCursor(this.spec, state, 0, curFrom).nextOverlapping();\n        return cursor.done ? null : cursor.value;\n    }\n    // Searching in reverse is, rather than implementing an inverted search\n    // cursor, done by scanning chunk after chunk forward.\n    prevMatchInRange(state, from, to) {\n        for (let pos = to;;) {\n            let start = Math.max(from, pos - 10000 /* FindPrev.ChunkSize */ - this.spec.unquoted.length);\n            let cursor = stringCursor(this.spec, state, start, pos), range = null;\n            while (!cursor.nextOverlapping().done)\n                range = cursor.value;\n            if (range)\n                return range;\n            if (start == from)\n                return null;\n            pos -= 10000 /* FindPrev.ChunkSize */;\n        }\n    }\n    prevMatch(state, curFrom, curTo) {\n        return this.prevMatchInRange(state, 0, curFrom) ||\n            this.prevMatchInRange(state, curTo, state.doc.length);\n    }\n    getReplacement(_result) { return this.spec.unquote(this.spec.replace); }\n    matchAll(state, limit) {\n        let cursor = stringCursor(this.spec, state, 0, state.doc.length), ranges = [];\n        while (!cursor.next().done) {\n            if (ranges.length >= limit)\n                return null;\n            ranges.push(cursor.value);\n        }\n        return ranges;\n    }\n    highlight(state, from, to, add) {\n        let cursor = stringCursor(this.spec, state, Math.max(0, from - this.spec.unquoted.length), Math.min(to + this.spec.unquoted.length, state.doc.length));\n        while (!cursor.next().done)\n            add(cursor.value.from, cursor.value.to);\n    }\n}\nfunction regexpCursor(spec, state, from, to) {\n    return new RegExpCursor(state.doc, spec.search, {\n        ignoreCase: !spec.caseSensitive,\n        test: spec.wholeWord ? regexpWordTest(state.charCategorizer(state.selection.main.head)) : undefined\n    }, from, to);\n}\nfunction charBefore(str, index) {\n    return str.slice(findClusterBreak(str, index, false), index);\n}\nfunction charAfter(str, index) {\n    return str.slice(index, findClusterBreak(str, index));\n}\nfunction regexpWordTest(categorizer) {\n    return (_from, _to, match) => !match[0].length ||\n        (categorizer(charBefore(match.input, match.index)) != CharCategory.Word ||\n            categorizer(charAfter(match.input, match.index)) != CharCategory.Word) &&\n            (categorizer(charAfter(match.input, match.index + match[0].length)) != CharCategory.Word ||\n                categorizer(charBefore(match.input, match.index + match[0].length)) != CharCategory.Word);\n}\nclass RegExpQuery extends QueryType {\n    nextMatch(state, curFrom, curTo) {\n        let cursor = regexpCursor(this.spec, state, curTo, state.doc.length).next();\n        if (cursor.done)\n            cursor = regexpCursor(this.spec, state, 0, curFrom).next();\n        return cursor.done ? null : cursor.value;\n    }\n    prevMatchInRange(state, from, to) {\n        for (let size = 1;; size++) {\n            let start = Math.max(from, to - size * 10000 /* FindPrev.ChunkSize */);\n            let cursor = regexpCursor(this.spec, state, start, to), range = null;\n            while (!cursor.next().done)\n                range = cursor.value;\n            if (range && (start == from || range.from > start + 10))\n                return range;\n            if (start == from)\n                return null;\n        }\n    }\n    prevMatch(state, curFrom, curTo) {\n        return this.prevMatchInRange(state, 0, curFrom) ||\n            this.prevMatchInRange(state, curTo, state.doc.length);\n    }\n    getReplacement(result) {\n        return this.spec.unquote(this.spec.replace).replace(/\\$([$&\\d+])/g, (m, i) => i == \"$\" ? \"$\"\n            : i == \"&\" ? result.match[0]\n                : i != \"0\" && +i < result.match.length ? result.match[i]\n                    : m);\n    }\n    matchAll(state, limit) {\n        let cursor = regexpCursor(this.spec, state, 0, state.doc.length), ranges = [];\n        while (!cursor.next().done) {\n            if (ranges.length >= limit)\n                return null;\n            ranges.push(cursor.value);\n        }\n        return ranges;\n    }\n    highlight(state, from, to, add) {\n        let cursor = regexpCursor(this.spec, state, Math.max(0, from - 250 /* RegExp.HighlightMargin */), Math.min(to + 250 /* RegExp.HighlightMargin */, state.doc.length));\n        while (!cursor.next().done)\n            add(cursor.value.from, cursor.value.to);\n    }\n}\n/**\nA state effect that updates the current search query. Note that\nthis only has an effect if the search state has been initialized\n(by including [`search`](https://codemirror.net/6/docs/ref/#search.search) in your configuration or\nby running [`openSearchPanel`](https://codemirror.net/6/docs/ref/#search.openSearchPanel) at least\nonce).\n*/\nconst setSearchQuery = /*@__PURE__*/StateEffect.define();\nconst togglePanel = /*@__PURE__*/StateEffect.define();\nconst searchState = /*@__PURE__*/StateField.define({\n    create(state) {\n        return new SearchState(defaultQuery(state).create(), null);\n    },\n    update(value, tr) {\n        for (let effect of tr.effects) {\n            if (effect.is(setSearchQuery))\n                value = new SearchState(effect.value.create(), value.panel);\n            else if (effect.is(togglePanel))\n                value = new SearchState(value.query, effect.value ? createSearchPanel : null);\n        }\n        return value;\n    },\n    provide: f => showPanel.from(f, val => val.panel)\n});\n/**\nGet the current search query from an editor state.\n*/\nfunction getSearchQuery(state) {\n    let curState = state.field(searchState, false);\n    return curState ? curState.query.spec : defaultQuery(state);\n}\n/**\nQuery whether the search panel is open in the given editor state.\n*/\nfunction searchPanelOpen(state) {\n    var _a;\n    return ((_a = state.field(searchState, false)) === null || _a === void 0 ? void 0 : _a.panel) != null;\n}\nclass SearchState {\n    constructor(query, panel) {\n        this.query = query;\n        this.panel = panel;\n    }\n}\nconst matchMark = /*@__PURE__*/Decoration.mark({ class: \"cm-searchMatch\" }), selectedMatchMark = /*@__PURE__*/Decoration.mark({ class: \"cm-searchMatch cm-searchMatch-selected\" });\nconst searchHighlighter = /*@__PURE__*/ViewPlugin.fromClass(class {\n    constructor(view) {\n        this.view = view;\n        this.decorations = this.highlight(view.state.field(searchState));\n    }\n    update(update) {\n        let state = update.state.field(searchState);\n        if (state != update.startState.field(searchState) || update.docChanged || update.selectionSet || update.viewportChanged)\n            this.decorations = this.highlight(state);\n    }\n    highlight({ query, panel }) {\n        if (!panel || !query.spec.valid)\n            return Decoration.none;\n        let { view } = this;\n        let builder = new RangeSetBuilder();\n        for (let i = 0, ranges = view.visibleRanges, l = ranges.length; i < l; i++) {\n            let { from, to } = ranges[i];\n            while (i < l - 1 && to > ranges[i + 1].from - 2 * 250 /* RegExp.HighlightMargin */)\n                to = ranges[++i].to;\n            query.highlight(view.state, from, to, (from, to) => {\n                let selected = view.state.selection.ranges.some(r => r.from == from && r.to == to);\n                builder.add(from, to, selected ? selectedMatchMark : matchMark);\n            });\n        }\n        return builder.finish();\n    }\n}, {\n    decorations: v => v.decorations\n});\nfunction searchCommand(f) {\n    return view => {\n        let state = view.state.field(searchState, false);\n        return state && state.query.spec.valid ? f(view, state) : openSearchPanel(view);\n    };\n}\n/**\nOpen the search panel if it isn't already open, and move the\nselection to the first match after the current main selection.\nWill wrap around to the start of the document when it reaches the\nend.\n*/\nconst findNext = /*@__PURE__*/searchCommand((view, { query }) => {\n    let { to } = view.state.selection.main;\n    let next = query.nextMatch(view.state, to, to);\n    if (!next)\n        return false;\n    let selection = EditorSelection.single(next.from, next.to);\n    let config = view.state.facet(searchConfigFacet);\n    view.dispatch({\n        selection,\n        effects: [announceMatch(view, next), config.scrollToMatch(selection.main, view)],\n        userEvent: \"select.search\"\n    });\n    selectSearchInput(view);\n    return true;\n});\n/**\nMove the selection to the previous instance of the search query,\nbefore the current main selection. Will wrap past the start\nof the document to start searching at the end again.\n*/\nconst findPrevious = /*@__PURE__*/searchCommand((view, { query }) => {\n    let { state } = view, { from } = state.selection.main;\n    let prev = query.prevMatch(state, from, from);\n    if (!prev)\n        return false;\n    let selection = EditorSelection.single(prev.from, prev.to);\n    let config = view.state.facet(searchConfigFacet);\n    view.dispatch({\n        selection,\n        effects: [announceMatch(view, prev), config.scrollToMatch(selection.main, view)],\n        userEvent: \"select.search\"\n    });\n    selectSearchInput(view);\n    return true;\n});\n/**\nSelect all instances of the search query.\n*/\nconst selectMatches = /*@__PURE__*/searchCommand((view, { query }) => {\n    let ranges = query.matchAll(view.state, 1000);\n    if (!ranges || !ranges.length)\n        return false;\n    view.dispatch({\n        selection: EditorSelection.create(ranges.map(r => EditorSelection.range(r.from, r.to))),\n        userEvent: \"select.search.matches\"\n    });\n    return true;\n});\n/**\nSelect all instances of the currently selected text.\n*/\nconst selectSelectionMatches = ({ state, dispatch }) => {\n    let sel = state.selection;\n    if (sel.ranges.length > 1 || sel.main.empty)\n        return false;\n    let { from, to } = sel.main;\n    let ranges = [], main = 0;\n    for (let cur = new SearchCursor(state.doc, state.sliceDoc(from, to)); !cur.next().done;) {\n        if (ranges.length > 1000)\n            return false;\n        if (cur.value.from == from)\n            main = ranges.length;\n        ranges.push(EditorSelection.range(cur.value.from, cur.value.to));\n    }\n    dispatch(state.update({\n        selection: EditorSelection.create(ranges, main),\n        userEvent: \"select.search.matches\"\n    }));\n    return true;\n};\n/**\nReplace the current match of the search query.\n*/\nconst replaceNext = /*@__PURE__*/searchCommand((view, { query }) => {\n    let { state } = view, { from, to } = state.selection.main;\n    if (state.readOnly)\n        return false;\n    let next = query.nextMatch(state, from, from);\n    if (!next)\n        return false;\n    let changes = [], selection, replacement;\n    let effects = [];\n    if (next.from == from && next.to == to) {\n        replacement = state.toText(query.getReplacement(next));\n        changes.push({ from: next.from, to: next.to, insert: replacement });\n        next = query.nextMatch(state, next.from, next.to);\n        effects.push(EditorView.announce.of(state.phrase(\"replaced match on line $\", state.doc.lineAt(from).number) + \".\"));\n    }\n    if (next) {\n        let off = changes.length == 0 || changes[0].from >= next.to ? 0 : next.to - next.from - replacement.length;\n        selection = EditorSelection.single(next.from - off, next.to - off);\n        effects.push(announceMatch(view, next));\n        effects.push(state.facet(searchConfigFacet).scrollToMatch(selection.main, view));\n    }\n    view.dispatch({\n        changes, selection, effects,\n        userEvent: \"input.replace\"\n    });\n    return true;\n});\n/**\nReplace all instances of the search query with the given\nreplacement.\n*/\nconst replaceAll = /*@__PURE__*/searchCommand((view, { query }) => {\n    if (view.state.readOnly)\n        return false;\n    let changes = query.matchAll(view.state, 1e9).map(match => {\n        let { from, to } = match;\n        return { from, to, insert: query.getReplacement(match) };\n    });\n    if (!changes.length)\n        return false;\n    let announceText = view.state.phrase(\"replaced $ matches\", changes.length) + \".\";\n    view.dispatch({\n        changes,\n        effects: EditorView.announce.of(announceText),\n        userEvent: \"input.replace.all\"\n    });\n    return true;\n});\nfunction createSearchPanel(view) {\n    return view.state.facet(searchConfigFacet).createPanel(view);\n}\nfunction defaultQuery(state, fallback) {\n    var _a, _b, _c, _d, _e;\n    let sel = state.selection.main;\n    let selText = sel.empty || sel.to > sel.from + 100 ? \"\" : state.sliceDoc(sel.from, sel.to);\n    if (fallback && !selText)\n        return fallback;\n    let config = state.facet(searchConfigFacet);\n    return new SearchQuery({\n        search: ((_a = fallback === null || fallback === void 0 ? void 0 : fallback.literal) !== null && _a !== void 0 ? _a : config.literal) ? selText : selText.replace(/\\n/g, \"\\\\n\"),\n        caseSensitive: (_b = fallback === null || fallback === void 0 ? void 0 : fallback.caseSensitive) !== null && _b !== void 0 ? _b : config.caseSensitive,\n        literal: (_c = fallback === null || fallback === void 0 ? void 0 : fallback.literal) !== null && _c !== void 0 ? _c : config.literal,\n        regexp: (_d = fallback === null || fallback === void 0 ? void 0 : fallback.regexp) !== null && _d !== void 0 ? _d : config.regexp,\n        wholeWord: (_e = fallback === null || fallback === void 0 ? void 0 : fallback.wholeWord) !== null && _e !== void 0 ? _e : config.wholeWord\n    });\n}\nfunction getSearchInput(view) {\n    let panel = getPanel(view, createSearchPanel);\n    return panel && panel.dom.querySelector(\"[main-field]\");\n}\nfunction selectSearchInput(view) {\n    let input = getSearchInput(view);\n    if (input && input == view.root.activeElement)\n        input.select();\n}\n/**\nMake sure the search panel is open and focused.\n*/\nconst openSearchPanel = view => {\n    let state = view.state.field(searchState, false);\n    if (state && state.panel) {\n        let searchInput = getSearchInput(view);\n        if (searchInput && searchInput != view.root.activeElement) {\n            let query = defaultQuery(view.state, state.query.spec);\n            if (query.valid)\n                view.dispatch({ effects: setSearchQuery.of(query) });\n            searchInput.focus();\n            searchInput.select();\n        }\n    }\n    else {\n        view.dispatch({ effects: [\n                togglePanel.of(true),\n                state ? setSearchQuery.of(defaultQuery(view.state, state.query.spec)) : StateEffect.appendConfig.of(searchExtensions)\n            ] });\n    }\n    return true;\n};\n/**\nClose the search panel.\n*/\nconst closeSearchPanel = view => {\n    let state = view.state.field(searchState, false);\n    if (!state || !state.panel)\n        return false;\n    let panel = getPanel(view, createSearchPanel);\n    if (panel && panel.dom.contains(view.root.activeElement))\n        view.focus();\n    view.dispatch({ effects: togglePanel.of(false) });\n    return true;\n};\n/**\nDefault search-related key bindings.\n\n - Mod-f: [`openSearchPanel`](https://codemirror.net/6/docs/ref/#search.openSearchPanel)\n - F3, Mod-g: [`findNext`](https://codemirror.net/6/docs/ref/#search.findNext)\n - Shift-F3, Shift-Mod-g: [`findPrevious`](https://codemirror.net/6/docs/ref/#search.findPrevious)\n - Mod-Alt-g: [`gotoLine`](https://codemirror.net/6/docs/ref/#search.gotoLine)\n - Mod-d: [`selectNextOccurrence`](https://codemirror.net/6/docs/ref/#search.selectNextOccurrence)\n*/\nconst searchKeymap = [\n    { key: \"Mod-f\", run: openSearchPanel, scope: \"editor search-panel\" },\n    { key: \"F3\", run: findNext, shift: findPrevious, scope: \"editor search-panel\", preventDefault: true },\n    { key: \"Mod-g\", run: findNext, shift: findPrevious, scope: \"editor search-panel\", preventDefault: true },\n    { key: \"Escape\", run: closeSearchPanel, scope: \"editor search-panel\" },\n    { key: \"Mod-Shift-l\", run: selectSelectionMatches },\n    { key: \"Mod-Alt-g\", run: gotoLine },\n    { key: \"Mod-d\", run: selectNextOccurrence, preventDefault: true },\n];\nclass SearchPanel {\n    constructor(view) {\n        this.view = view;\n        let query = this.query = view.state.field(searchState).query.spec;\n        this.commit = this.commit.bind(this);\n        this.searchField = elt(\"input\", {\n            value: query.search,\n            placeholder: phrase(view, \"Find\"),\n            \"aria-label\": phrase(view, \"Find\"),\n            class: \"cm-textfield\",\n            name: \"search\",\n            form: \"\",\n            \"main-field\": \"true\",\n            onchange: this.commit,\n            onkeyup: this.commit\n        });\n        this.replaceField = elt(\"input\", {\n            value: query.replace,\n            placeholder: phrase(view, \"Replace\"),\n            \"aria-label\": phrase(view, \"Replace\"),\n            class: \"cm-textfield\",\n            name: \"replace\",\n            form: \"\",\n            onchange: this.commit,\n            onkeyup: this.commit\n        });\n        this.caseField = elt(\"input\", {\n            type: \"checkbox\",\n            name: \"case\",\n            form: \"\",\n            checked: query.caseSensitive,\n            onchange: this.commit\n        });\n        this.reField = elt(\"input\", {\n            type: \"checkbox\",\n            name: \"re\",\n            form: \"\",\n            checked: query.regexp,\n            onchange: this.commit\n        });\n        this.wordField = elt(\"input\", {\n            type: \"checkbox\",\n            name: \"word\",\n            form: \"\",\n            checked: query.wholeWord,\n            onchange: this.commit\n        });\n        function button(name, onclick, content) {\n            return elt(\"button\", { class: \"cm-button\", name, onclick, type: \"button\" }, content);\n        }\n        this.dom = elt(\"div\", { onkeydown: (e) => this.keydown(e), class: \"cm-search\" }, [\n            this.searchField,\n            button(\"next\", () => findNext(view), [phrase(view, \"next\")]),\n            button(\"prev\", () => findPrevious(view), [phrase(view, \"previous\")]),\n            button(\"select\", () => selectMatches(view), [phrase(view, \"all\")]),\n            elt(\"label\", null, [this.caseField, phrase(view, \"match case\")]),\n            elt(\"label\", null, [this.reField, phrase(view, \"regexp\")]),\n            elt(\"label\", null, [this.wordField, phrase(view, \"by word\")]),\n            ...view.state.readOnly ? [] : [\n                elt(\"br\"),\n                this.replaceField,\n                button(\"replace\", () => replaceNext(view), [phrase(view, \"replace\")]),\n                button(\"replaceAll\", () => replaceAll(view), [phrase(view, \"replace all\")])\n            ],\n            elt(\"button\", {\n                name: \"close\",\n                onclick: () => closeSearchPanel(view),\n                \"aria-label\": phrase(view, \"close\"),\n                type: \"button\"\n            }, [\"×\"])\n        ]);\n    }\n    commit() {\n        let query = new SearchQuery({\n            search: this.searchField.value,\n            caseSensitive: this.caseField.checked,\n            regexp: this.reField.checked,\n            wholeWord: this.wordField.checked,\n            replace: this.replaceField.value,\n        });\n        if (!query.eq(this.query)) {\n            this.query = query;\n            this.view.dispatch({ effects: setSearchQuery.of(query) });\n        }\n    }\n    keydown(e) {\n        if (runScopeHandlers(this.view, e, \"search-panel\")) {\n            e.preventDefault();\n        }\n        else if (e.keyCode == 13 && e.target == this.searchField) {\n            e.preventDefault();\n            (e.shiftKey ? findPrevious : findNext)(this.view);\n        }\n        else if (e.keyCode == 13 && e.target == this.replaceField) {\n            e.preventDefault();\n            replaceNext(this.view);\n        }\n    }\n    update(update) {\n        for (let tr of update.transactions)\n            for (let effect of tr.effects) {\n                if (effect.is(setSearchQuery) && !effect.value.eq(this.query))\n                    this.setQuery(effect.value);\n            }\n    }\n    setQuery(query) {\n        this.query = query;\n        this.searchField.value = query.search;\n        this.replaceField.value = query.replace;\n        this.caseField.checked = query.caseSensitive;\n        this.reField.checked = query.regexp;\n        this.wordField.checked = query.wholeWord;\n    }\n    mount() {\n        this.searchField.select();\n    }\n    get pos() { return 80; }\n    get top() { return this.view.state.facet(searchConfigFacet).top; }\n}\nfunction phrase(view, phrase) { return view.state.phrase(phrase); }\nconst AnnounceMargin = 30;\nconst Break = /[\\s\\.,:;?!]/;\nfunction announceMatch(view, { from, to }) {\n    let line = view.state.doc.lineAt(from), lineEnd = view.state.doc.lineAt(to).to;\n    let start = Math.max(line.from, from - AnnounceMargin), end = Math.min(lineEnd, to + AnnounceMargin);\n    let text = view.state.sliceDoc(start, end);\n    if (start != line.from) {\n        for (let i = 0; i < AnnounceMargin; i++)\n            if (!Break.test(text[i + 1]) && Break.test(text[i])) {\n                text = text.slice(i);\n                break;\n            }\n    }\n    if (end != lineEnd) {\n        for (let i = text.length - 1; i > text.length - AnnounceMargin; i--)\n            if (!Break.test(text[i - 1]) && Break.test(text[i])) {\n                text = text.slice(0, i);\n                break;\n            }\n    }\n    return EditorView.announce.of(`${view.state.phrase(\"current match\")}. ${text} ${view.state.phrase(\"on line\")} ${line.number}.`);\n}\nconst baseTheme = /*@__PURE__*/EditorView.baseTheme({\n    \".cm-panel.cm-search\": {\n        padding: \"2px 6px 4px\",\n        position: \"relative\",\n        \"& [name=close]\": {\n            position: \"absolute\",\n            top: \"0\",\n            right: \"4px\",\n            backgroundColor: \"inherit\",\n            border: \"none\",\n            font: \"inherit\",\n            padding: 0,\n            margin: 0\n        },\n        \"& input, & button, & label\": {\n            margin: \".2em .6em .2em 0\"\n        },\n        \"& input[type=checkbox]\": {\n            marginRight: \".2em\"\n        },\n        \"& label\": {\n            fontSize: \"80%\",\n            whiteSpace: \"pre\"\n        }\n    },\n    \"&light .cm-searchMatch\": { backgroundColor: \"#ffff0054\" },\n    \"&dark .cm-searchMatch\": { backgroundColor: \"#00ffff8a\" },\n    \"&light .cm-searchMatch-selected\": { backgroundColor: \"#ff6a0054\" },\n    \"&dark .cm-searchMatch-selected\": { backgroundColor: \"#ff00ff8a\" }\n});\nconst searchExtensions = [\n    searchState,\n    /*@__PURE__*/Prec.low(searchHighlighter),\n    baseTheme\n];\n\nexport { RegExpCursor, SearchCursor, SearchQuery, closeSearchPanel, findNext, findPrevious, getSearchQuery, gotoLine, highlightSelectionMatches, openSearchPanel, replaceAll, replaceNext, search, searchKeymap, searchPanelOpen, selectMatches, selectNextOccurrence, selectSelectionMatches, setSearchQuery };\n"],"names":["crelt","elt","arguments","document","createElement","i","next","nodeType","Array","isArray","name","Object","prototype","hasOwnProperty","call","value","setAttribute","length","add","child","appendChild","createTextNode","RangeError","basicNormalize","String","normalize","x","SearchCursor","constructor","text","query","from","to","test","this","done","matches","buffer","bufferPos","iter","iterRange","bufferStart","peek","codePointAt","pop","nextOverlapping","str","fromCodePoint","start","codePointSize","norm","pos","code","charCodeAt","match","end","index","keep","splice","push","Symbol","iterator","empty","exec","baseFlags","unicode","RegExpCursor","options","curLine","MultilineRegExpCursor","re","RegExp","ignoreCase","startLine","lineAt","curLineStart","matchPos","toCharEnd","getLine","skip","lineBreak","slice","nextLine","off","lastIndex","flattened","WeakMap","FlattenedDoc","get","doc","cached","flat","sliceString","set","cachedFrom","chunkEnd","validRegExp","source","_a","line","createLineDialog","view","state","selection","main","head","number","input","class","dom","onkeydown","event","keyCode","preventDefault","dispatch","effects","dialogEffect","of","focus","go","onsubmit","phrase","type","sign","ln","cl","percent","col","pc","lines","Math","round","docLine","max","min","EditorSelection","cursor","EditorView","scrollIntoView","y","StateEffect","define","dialogField","StateField","create","update","tr","e","is","provide","f","showPanel","val","gotoLine","panel","getPanel","field","appendConfig","baseTheme$1","querySelector","select","baseTheme","padding","fontSize","defaultHighlightOptions","highlightWordAroundCursor","minSelectionLength","maxMatches","wholeWords","highlightConfig","Facet","combine","combineConfig","a","b","highlightSelectionMatches","ext","defaultTheme","matchHighlighter","matchDeco","Decoration","mark","mainMatchDeco","insideWordBoundaries","check","sliceDoc","CharCategory","Word","insideWord","ViewPlugin","fromClass","decorations","getDeco","selectionSet","docChanged","viewportChanged","conf","facet","sel","ranges","none","range","word","wordAt","charCategorizer","len","deco","part","visibleRanges","v","backgroundColor","selectWord","newSel","map","mainIndex","eq","findNextOccurrence","fullWord","cycled","some","r","selectNextOccurrence","searchedText","addRange","searchConfigFacet","configs","top","caseSensitive","literal","regexp","wholeWord","createPanel","SearchPanel","scrollToMatch","search","config","searchExtensions","SearchQuery","replace","valid","unquoted","unquote","_","ch","other","RegExpQuery","StringQuery","getCursor","st","EditorState","regexpCursor","stringCursor","QueryType","spec","undefined","toLowerCase","stringWordTest","categorizer","buf","bufPos","charBefore","charAfter","super","nextMatch","curFrom","curTo","prevMatchInRange","prevMatch","getReplacement","_result","matchAll","limit","highlight","regexpWordTest","findClusterBreak","_from","_to","size","result","m","setSearchQuery","togglePanel","searchState","SearchState","defaultQuery","effect","createSearchPanel","getSearchQuery","curState","searchPanelOpen","matchMark","selectedMatchMark","searchHighlighter","startState","builder","RangeSetBuilder","l","selected","finish","searchCommand","openSearchPanel","findNext","single","announceMatch","userEvent","selectSearchInput","findPrevious","prev","selectMatches","selectSelectionMatches","cur","replaceNext","readOnly","changes","replacement","toText","insert","announce","replaceAll","announceText","fallback","_b","_c","_d","_e","selText","getSearchInput","root","activeElement","searchInput","closeSearchPanel","contains","searchKeymap","key","run","scope","shift","commit","bind","searchField","placeholder","form","onchange","onkeyup","replaceField","caseField","checked","reField","wordField","button","onclick","content","keydown","runScopeHandlers","target","shiftKey","transactions","setQuery","mount","AnnounceMargin","Break","lineEnd","position","right","border","font","margin","marginRight","whiteSpace","Prec","low"],"sourceRoot":""}