{"version":3,"file":"4364.49d1af8d0572bc7496fa.js?v=49d1af8d0572bc7496fa","mappings":"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","sources":["webpack://@jupyterlab/application-top/./node_modules/marked/lib/marked.esm.js"],"sourcesContent":["/**\n * marked v9.1.2 - a markdown parser\n * Copyright (c) 2011-2023, Christopher Jeffrey. (MIT Licensed)\n * https://github.com/markedjs/marked\n */\n\n/**\n * DO NOT EDIT THIS FILE\n * The code in this file is generated from files in ./src/\n */\n\n/**\n * Gets the original marked default options.\n */\nfunction _getDefaults() {\n    return {\n        async: false,\n        breaks: false,\n        extensions: null,\n        gfm: true,\n        hooks: null,\n        pedantic: false,\n        renderer: null,\n        silent: false,\n        tokenizer: null,\n        walkTokens: null\n    };\n}\nlet _defaults = _getDefaults();\nfunction changeDefaults(newDefaults) {\n    _defaults = newDefaults;\n}\n\n/**\n * Helpers\n */\nconst escapeTest = /[&<>\"']/;\nconst escapeReplace = new RegExp(escapeTest.source, 'g');\nconst escapeTestNoEncode = /[<>\"']|&(?!(#\\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\\w+);)/;\nconst escapeReplaceNoEncode = new RegExp(escapeTestNoEncode.source, 'g');\nconst escapeReplacements = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#39;'\n};\nconst getEscapeReplacement = (ch) => escapeReplacements[ch];\nfunction escape(html, encode) {\n    if (encode) {\n        if (escapeTest.test(html)) {\n            return html.replace(escapeReplace, getEscapeReplacement);\n        }\n    }\n    else {\n        if (escapeTestNoEncode.test(html)) {\n            return html.replace(escapeReplaceNoEncode, getEscapeReplacement);\n        }\n    }\n    return html;\n}\nconst unescapeTest = /&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/ig;\nfunction unescape(html) {\n    // explicitly match decimal, hex, and named HTML entities\n    return html.replace(unescapeTest, (_, n) => {\n        n = n.toLowerCase();\n        if (n === 'colon')\n            return ':';\n        if (n.charAt(0) === '#') {\n            return n.charAt(1) === 'x'\n                ? String.fromCharCode(parseInt(n.substring(2), 16))\n                : String.fromCharCode(+n.substring(1));\n        }\n        return '';\n    });\n}\nconst caret = /(^|[^\\[])\\^/g;\nfunction edit(regex, opt) {\n    regex = typeof regex === 'string' ? regex : regex.source;\n    opt = opt || '';\n    const obj = {\n        replace: (name, val) => {\n            val = typeof val === 'object' && 'source' in val ? val.source : val;\n            val = val.replace(caret, '$1');\n            regex = regex.replace(name, val);\n            return obj;\n        },\n        getRegex: () => {\n            return new RegExp(regex, opt);\n        }\n    };\n    return obj;\n}\nfunction cleanUrl(href) {\n    try {\n        href = encodeURI(href).replace(/%25/g, '%');\n    }\n    catch (e) {\n        return null;\n    }\n    return href;\n}\nconst noopTest = { exec: () => null };\nfunction splitCells(tableRow, count) {\n    // ensure that every cell-delimiting pipe has a space\n    // before it to distinguish it from an escaped pipe\n    const row = tableRow.replace(/\\|/g, (match, offset, str) => {\n        let escaped = false;\n        let curr = offset;\n        while (--curr >= 0 && str[curr] === '\\\\')\n            escaped = !escaped;\n        if (escaped) {\n            // odd number of slashes means | is escaped\n            // so we leave it alone\n            return '|';\n        }\n        else {\n            // add space before unescaped |\n            return ' |';\n        }\n    }), cells = row.split(/ \\|/);\n    let i = 0;\n    // First/last cell in a row cannot be empty if it has no leading/trailing pipe\n    if (!cells[0].trim()) {\n        cells.shift();\n    }\n    if (cells.length > 0 && !cells[cells.length - 1].trim()) {\n        cells.pop();\n    }\n    if (count) {\n        if (cells.length > count) {\n            cells.splice(count);\n        }\n        else {\n            while (cells.length < count)\n                cells.push('');\n        }\n    }\n    for (; i < cells.length; i++) {\n        // leading or trailing whitespace is ignored per the gfm spec\n        cells[i] = cells[i].trim().replace(/\\\\\\|/g, '|');\n    }\n    return cells;\n}\n/**\n * Remove trailing 'c's. Equivalent to str.replace(/c*$/, '').\n * /c*$/ is vulnerable to REDOS.\n *\n * @param str\n * @param c\n * @param invert Remove suffix of non-c chars instead. Default falsey.\n */\nfunction rtrim(str, c, invert) {\n    const l = str.length;\n    if (l === 0) {\n        return '';\n    }\n    // Length of suffix matching the invert condition.\n    let suffLen = 0;\n    // Step left until we fail to match the invert condition.\n    while (suffLen < l) {\n        const currChar = str.charAt(l - suffLen - 1);\n        if (currChar === c && !invert) {\n            suffLen++;\n        }\n        else if (currChar !== c && invert) {\n            suffLen++;\n        }\n        else {\n            break;\n        }\n    }\n    return str.slice(0, l - suffLen);\n}\nfunction findClosingBracket(str, b) {\n    if (str.indexOf(b[1]) === -1) {\n        return -1;\n    }\n    let level = 0;\n    for (let i = 0; i < str.length; i++) {\n        if (str[i] === '\\\\') {\n            i++;\n        }\n        else if (str[i] === b[0]) {\n            level++;\n        }\n        else if (str[i] === b[1]) {\n            level--;\n            if (level < 0) {\n                return i;\n            }\n        }\n    }\n    return -1;\n}\n\nfunction outputLink(cap, link, raw, lexer) {\n    const href = link.href;\n    const title = link.title ? escape(link.title) : null;\n    const text = cap[1].replace(/\\\\([\\[\\]])/g, '$1');\n    if (cap[0].charAt(0) !== '!') {\n        lexer.state.inLink = true;\n        const token = {\n            type: 'link',\n            raw,\n            href,\n            title,\n            text,\n            tokens: lexer.inlineTokens(text)\n        };\n        lexer.state.inLink = false;\n        return token;\n    }\n    return {\n        type: 'image',\n        raw,\n        href,\n        title,\n        text: escape(text)\n    };\n}\nfunction indentCodeCompensation(raw, text) {\n    const matchIndentToCode = raw.match(/^(\\s+)(?:```)/);\n    if (matchIndentToCode === null) {\n        return text;\n    }\n    const indentToCode = matchIndentToCode[1];\n    return text\n        .split('\\n')\n        .map(node => {\n        const matchIndentInNode = node.match(/^\\s+/);\n        if (matchIndentInNode === null) {\n            return node;\n        }\n        const [indentInNode] = matchIndentInNode;\n        if (indentInNode.length >= indentToCode.length) {\n            return node.slice(indentToCode.length);\n        }\n        return node;\n    })\n        .join('\\n');\n}\n/**\n * Tokenizer\n */\nclass _Tokenizer {\n    options;\n    // TODO: Fix this rules type\n    rules;\n    lexer;\n    constructor(options) {\n        this.options = options || _defaults;\n    }\n    space(src) {\n        const cap = this.rules.block.newline.exec(src);\n        if (cap && cap[0].length > 0) {\n            return {\n                type: 'space',\n                raw: cap[0]\n            };\n        }\n    }\n    code(src) {\n        const cap = this.rules.block.code.exec(src);\n        if (cap) {\n            const text = cap[0].replace(/^ {1,4}/gm, '');\n            return {\n                type: 'code',\n                raw: cap[0],\n                codeBlockStyle: 'indented',\n                text: !this.options.pedantic\n                    ? rtrim(text, '\\n')\n                    : text\n            };\n        }\n    }\n    fences(src) {\n        const cap = this.rules.block.fences.exec(src);\n        if (cap) {\n            const raw = cap[0];\n            const text = indentCodeCompensation(raw, cap[3] || '');\n            return {\n                type: 'code',\n                raw,\n                lang: cap[2] ? cap[2].trim().replace(this.rules.inline._escapes, '$1') : cap[2],\n                text\n            };\n        }\n    }\n    heading(src) {\n        const cap = this.rules.block.heading.exec(src);\n        if (cap) {\n            let text = cap[2].trim();\n            // remove trailing #s\n            if (/#$/.test(text)) {\n                const trimmed = rtrim(text, '#');\n                if (this.options.pedantic) {\n                    text = trimmed.trim();\n                }\n                else if (!trimmed || / $/.test(trimmed)) {\n                    // CommonMark requires space before trailing #s\n                    text = trimmed.trim();\n                }\n            }\n            return {\n                type: 'heading',\n                raw: cap[0],\n                depth: cap[1].length,\n                text,\n                tokens: this.lexer.inline(text)\n            };\n        }\n    }\n    hr(src) {\n        const cap = this.rules.block.hr.exec(src);\n        if (cap) {\n            return {\n                type: 'hr',\n                raw: cap[0]\n            };\n        }\n    }\n    blockquote(src) {\n        const cap = this.rules.block.blockquote.exec(src);\n        if (cap) {\n            const text = rtrim(cap[0].replace(/^ *>[ \\t]?/gm, ''), '\\n');\n            const top = this.lexer.state.top;\n            this.lexer.state.top = true;\n            const tokens = this.lexer.blockTokens(text);\n            this.lexer.state.top = top;\n            return {\n                type: 'blockquote',\n                raw: cap[0],\n                tokens,\n                text\n            };\n        }\n    }\n    list(src) {\n        let cap = this.rules.block.list.exec(src);\n        if (cap) {\n            let bull = cap[1].trim();\n            const isordered = bull.length > 1;\n            const list = {\n                type: 'list',\n                raw: '',\n                ordered: isordered,\n                start: isordered ? +bull.slice(0, -1) : '',\n                loose: false,\n                items: []\n            };\n            bull = isordered ? `\\\\d{1,9}\\\\${bull.slice(-1)}` : `\\\\${bull}`;\n            if (this.options.pedantic) {\n                bull = isordered ? bull : '[*+-]';\n            }\n            // Get next list item\n            const itemRegex = new RegExp(`^( {0,3}${bull})((?:[\\t ][^\\\\n]*)?(?:\\\\n|$))`);\n            let raw = '';\n            let itemContents = '';\n            let endsWithBlankLine = false;\n            // Check if current bullet point can start a new List Item\n            while (src) {\n                let endEarly = false;\n                if (!(cap = itemRegex.exec(src))) {\n                    break;\n                }\n                if (this.rules.block.hr.test(src)) { // End list if bullet was actually HR (possibly move into itemRegex?)\n                    break;\n                }\n                raw = cap[0];\n                src = src.substring(raw.length);\n                let line = cap[2].split('\\n', 1)[0].replace(/^\\t+/, (t) => ' '.repeat(3 * t.length));\n                let nextLine = src.split('\\n', 1)[0];\n                let indent = 0;\n                if (this.options.pedantic) {\n                    indent = 2;\n                    itemContents = line.trimStart();\n                }\n                else {\n                    indent = cap[2].search(/[^ ]/); // Find first non-space char\n                    indent = indent > 4 ? 1 : indent; // Treat indented code blocks (> 4 spaces) as having only 1 indent\n                    itemContents = line.slice(indent);\n                    indent += cap[1].length;\n                }\n                let blankLine = false;\n                if (!line && /^ *$/.test(nextLine)) { // Items begin with at most one blank line\n                    raw += nextLine + '\\n';\n                    src = src.substring(nextLine.length + 1);\n                    endEarly = true;\n                }\n                if (!endEarly) {\n                    const nextBulletRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:[*+-]|\\\\d{1,9}[.)])((?:[ \\t][^\\\\n]*)?(?:\\\\n|$))`);\n                    const hrRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}((?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$)`);\n                    const fencesBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:\\`\\`\\`|~~~)`);\n                    const headingBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}#`);\n                    // Check if following lines should be included in List Item\n                    while (src) {\n                        const rawLine = src.split('\\n', 1)[0];\n                        nextLine = rawLine;\n                        // Re-align to follow commonmark nesting rules\n                        if (this.options.pedantic) {\n                            nextLine = nextLine.replace(/^ {1,4}(?=( {4})*[^ ])/g, '  ');\n                        }\n                        // End list item if found code fences\n                        if (fencesBeginRegex.test(nextLine)) {\n                            break;\n                        }\n                        // End list item if found start of new heading\n                        if (headingBeginRegex.test(nextLine)) {\n                            break;\n                        }\n                        // End list item if found start of new bullet\n                        if (nextBulletRegex.test(nextLine)) {\n                            break;\n                        }\n                        // Horizontal rule found\n                        if (hrRegex.test(src)) {\n                            break;\n                        }\n                        if (nextLine.search(/[^ ]/) >= indent || !nextLine.trim()) { // Dedent if possible\n                            itemContents += '\\n' + nextLine.slice(indent);\n                        }\n                        else {\n                            // not enough indentation\n                            if (blankLine) {\n                                break;\n                            }\n                            // paragraph continuation unless last line was a different block level element\n                            if (line.search(/[^ ]/) >= 4) { // indented code block\n                                break;\n                            }\n                            if (fencesBeginRegex.test(line)) {\n                                break;\n                            }\n                            if (headingBeginRegex.test(line)) {\n                                break;\n                            }\n                            if (hrRegex.test(line)) {\n                                break;\n                            }\n                            itemContents += '\\n' + nextLine;\n                        }\n                        if (!blankLine && !nextLine.trim()) { // Check if current line is blank\n                            blankLine = true;\n                        }\n                        raw += rawLine + '\\n';\n                        src = src.substring(rawLine.length + 1);\n                        line = nextLine.slice(indent);\n                    }\n                }\n                if (!list.loose) {\n                    // If the previous item ended with a blank line, the list is loose\n                    if (endsWithBlankLine) {\n                        list.loose = true;\n                    }\n                    else if (/\\n *\\n *$/.test(raw)) {\n                        endsWithBlankLine = true;\n                    }\n                }\n                let istask = null;\n                let ischecked;\n                // Check for task list items\n                if (this.options.gfm) {\n                    istask = /^\\[[ xX]\\] /.exec(itemContents);\n                    if (istask) {\n                        ischecked = istask[0] !== '[ ] ';\n                        itemContents = itemContents.replace(/^\\[[ xX]\\] +/, '');\n                    }\n                }\n                list.items.push({\n                    type: 'list_item',\n                    raw,\n                    task: !!istask,\n                    checked: ischecked,\n                    loose: false,\n                    text: itemContents,\n                    tokens: []\n                });\n                list.raw += raw;\n            }\n            // Do not consume newlines at end of final item. Alternatively, make itemRegex *start* with any newlines to simplify/speed up endsWithBlankLine logic\n            list.items[list.items.length - 1].raw = raw.trimEnd();\n            list.items[list.items.length - 1].text = itemContents.trimEnd();\n            list.raw = list.raw.trimEnd();\n            // Item child tokens handled here at end because we needed to have the final item to trim it first\n            for (let i = 0; i < list.items.length; i++) {\n                this.lexer.state.top = false;\n                list.items[i].tokens = this.lexer.blockTokens(list.items[i].text, []);\n                if (!list.loose) {\n                    // Check if list should be loose\n                    const spacers = list.items[i].tokens.filter(t => t.type === 'space');\n                    const hasMultipleLineBreaks = spacers.length > 0 && spacers.some(t => /\\n.*\\n/.test(t.raw));\n                    list.loose = hasMultipleLineBreaks;\n                }\n            }\n            // Set all items to loose if list is loose\n            if (list.loose) {\n                for (let i = 0; i < list.items.length; i++) {\n                    list.items[i].loose = true;\n                }\n            }\n            return list;\n        }\n    }\n    html(src) {\n        const cap = this.rules.block.html.exec(src);\n        if (cap) {\n            const token = {\n                type: 'html',\n                block: true,\n                raw: cap[0],\n                pre: cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style',\n                text: cap[0]\n            };\n            return token;\n        }\n    }\n    def(src) {\n        const cap = this.rules.block.def.exec(src);\n        if (cap) {\n            const tag = cap[1].toLowerCase().replace(/\\s+/g, ' ');\n            const href = cap[2] ? cap[2].replace(/^<(.*)>$/, '$1').replace(this.rules.inline._escapes, '$1') : '';\n            const title = cap[3] ? cap[3].substring(1, cap[3].length - 1).replace(this.rules.inline._escapes, '$1') : cap[3];\n            return {\n                type: 'def',\n                tag,\n                raw: cap[0],\n                href,\n                title\n            };\n        }\n    }\n    table(src) {\n        const cap = this.rules.block.table.exec(src);\n        if (cap) {\n            if (!/[:|]/.test(cap[2])) {\n                // delimiter row must have a pipe (|) or colon (:) otherwise it is a setext heading\n                return;\n            }\n            const item = {\n                type: 'table',\n                raw: cap[0],\n                header: splitCells(cap[1]).map(c => {\n                    return { text: c, tokens: [] };\n                }),\n                align: cap[2].replace(/^\\||\\| *$/g, '').split('|'),\n                rows: cap[3] && cap[3].trim() ? cap[3].replace(/\\n[ \\t]*$/, '').split('\\n') : []\n            };\n            if (item.header.length === item.align.length) {\n                let l = item.align.length;\n                let i, j, k, row;\n                for (i = 0; i < l; i++) {\n                    const align = item.align[i];\n                    if (align) {\n                        if (/^ *-+: *$/.test(align)) {\n                            item.align[i] = 'right';\n                        }\n                        else if (/^ *:-+: *$/.test(align)) {\n                            item.align[i] = 'center';\n                        }\n                        else if (/^ *:-+ *$/.test(align)) {\n                            item.align[i] = 'left';\n                        }\n                        else {\n                            item.align[i] = null;\n                        }\n                    }\n                }\n                l = item.rows.length;\n                for (i = 0; i < l; i++) {\n                    item.rows[i] = splitCells(item.rows[i], item.header.length).map(c => {\n                        return { text: c, tokens: [] };\n                    });\n                }\n                // parse child tokens inside headers and cells\n                // header child tokens\n                l = item.header.length;\n                for (j = 0; j < l; j++) {\n                    item.header[j].tokens = this.lexer.inline(item.header[j].text);\n                }\n                // cell child tokens\n                l = item.rows.length;\n                for (j = 0; j < l; j++) {\n                    row = item.rows[j];\n                    for (k = 0; k < row.length; k++) {\n                        row[k].tokens = this.lexer.inline(row[k].text);\n                    }\n                }\n                return item;\n            }\n        }\n    }\n    lheading(src) {\n        const cap = this.rules.block.lheading.exec(src);\n        if (cap) {\n            return {\n                type: 'heading',\n                raw: cap[0],\n                depth: cap[2].charAt(0) === '=' ? 1 : 2,\n                text: cap[1],\n                tokens: this.lexer.inline(cap[1])\n            };\n        }\n    }\n    paragraph(src) {\n        const cap = this.rules.block.paragraph.exec(src);\n        if (cap) {\n            const text = cap[1].charAt(cap[1].length - 1) === '\\n'\n                ? cap[1].slice(0, -1)\n                : cap[1];\n            return {\n                type: 'paragraph',\n                raw: cap[0],\n                text,\n                tokens: this.lexer.inline(text)\n            };\n        }\n    }\n    text(src) {\n        const cap = this.rules.block.text.exec(src);\n        if (cap) {\n            return {\n                type: 'text',\n                raw: cap[0],\n                text: cap[0],\n                tokens: this.lexer.inline(cap[0])\n            };\n        }\n    }\n    escape(src) {\n        const cap = this.rules.inline.escape.exec(src);\n        if (cap) {\n            return {\n                type: 'escape',\n                raw: cap[0],\n                text: escape(cap[1])\n            };\n        }\n    }\n    tag(src) {\n        const cap = this.rules.inline.tag.exec(src);\n        if (cap) {\n            if (!this.lexer.state.inLink && /^<a /i.test(cap[0])) {\n                this.lexer.state.inLink = true;\n            }\n            else if (this.lexer.state.inLink && /^<\\/a>/i.test(cap[0])) {\n                this.lexer.state.inLink = false;\n            }\n            if (!this.lexer.state.inRawBlock && /^<(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n                this.lexer.state.inRawBlock = true;\n            }\n            else if (this.lexer.state.inRawBlock && /^<\\/(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n                this.lexer.state.inRawBlock = false;\n            }\n            return {\n                type: 'html',\n                raw: cap[0],\n                inLink: this.lexer.state.inLink,\n                inRawBlock: this.lexer.state.inRawBlock,\n                block: false,\n                text: cap[0]\n            };\n        }\n    }\n    link(src) {\n        const cap = this.rules.inline.link.exec(src);\n        if (cap) {\n            const trimmedUrl = cap[2].trim();\n            if (!this.options.pedantic && /^</.test(trimmedUrl)) {\n                // commonmark requires matching angle brackets\n                if (!(/>$/.test(trimmedUrl))) {\n                    return;\n                }\n                // ending angle bracket cannot be escaped\n                const rtrimSlash = rtrim(trimmedUrl.slice(0, -1), '\\\\');\n                if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {\n                    return;\n                }\n            }\n            else {\n                // find closing parenthesis\n                const lastParenIndex = findClosingBracket(cap[2], '()');\n                if (lastParenIndex > -1) {\n                    const start = cap[0].indexOf('!') === 0 ? 5 : 4;\n                    const linkLen = start + cap[1].length + lastParenIndex;\n                    cap[2] = cap[2].substring(0, lastParenIndex);\n                    cap[0] = cap[0].substring(0, linkLen).trim();\n                    cap[3] = '';\n                }\n            }\n            let href = cap[2];\n            let title = '';\n            if (this.options.pedantic) {\n                // split pedantic href and title\n                const link = /^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/.exec(href);\n                if (link) {\n                    href = link[1];\n                    title = link[3];\n                }\n            }\n            else {\n                title = cap[3] ? cap[3].slice(1, -1) : '';\n            }\n            href = href.trim();\n            if (/^</.test(href)) {\n                if (this.options.pedantic && !(/>$/.test(trimmedUrl))) {\n                    // pedantic allows starting angle bracket without ending angle bracket\n                    href = href.slice(1);\n                }\n                else {\n                    href = href.slice(1, -1);\n                }\n            }\n            return outputLink(cap, {\n                href: href ? href.replace(this.rules.inline._escapes, '$1') : href,\n                title: title ? title.replace(this.rules.inline._escapes, '$1') : title\n            }, cap[0], this.lexer);\n        }\n    }\n    reflink(src, links) {\n        let cap;\n        if ((cap = this.rules.inline.reflink.exec(src))\n            || (cap = this.rules.inline.nolink.exec(src))) {\n            let link = (cap[2] || cap[1]).replace(/\\s+/g, ' ');\n            link = links[link.toLowerCase()];\n            if (!link) {\n                const text = cap[0].charAt(0);\n                return {\n                    type: 'text',\n                    raw: text,\n                    text\n                };\n            }\n            return outputLink(cap, link, cap[0], this.lexer);\n        }\n    }\n    emStrong(src, maskedSrc, prevChar = '') {\n        let match = this.rules.inline.emStrong.lDelim.exec(src);\n        if (!match)\n            return;\n        // _ can't be between two alphanumerics. \\p{L}\\p{N} includes non-english alphabet/numbers as well\n        if (match[3] && prevChar.match(/[\\p{L}\\p{N}]/u))\n            return;\n        const nextChar = match[1] || match[2] || '';\n        if (!nextChar || !prevChar || this.rules.inline.punctuation.exec(prevChar)) {\n            // unicode Regex counts emoji as 1 char; spread into array for proper count (used multiple times below)\n            const lLength = [...match[0]].length - 1;\n            let rDelim, rLength, delimTotal = lLength, midDelimTotal = 0;\n            const endReg = match[0][0] === '*' ? this.rules.inline.emStrong.rDelimAst : this.rules.inline.emStrong.rDelimUnd;\n            endReg.lastIndex = 0;\n            // Clip maskedSrc to same section of string as src (move to lexer?)\n            maskedSrc = maskedSrc.slice(-1 * src.length + match[0].length - 1);\n            while ((match = endReg.exec(maskedSrc)) != null) {\n                rDelim = match[1] || match[2] || match[3] || match[4] || match[5] || match[6];\n                if (!rDelim)\n                    continue; // skip single * in __abc*abc__\n                rLength = [...rDelim].length;\n                if (match[3] || match[4]) { // found another Left Delim\n                    delimTotal += rLength;\n                    continue;\n                }\n                else if (match[5] || match[6]) { // either Left or Right Delim\n                    if (lLength % 3 && !((lLength + rLength) % 3)) {\n                        midDelimTotal += rLength;\n                        continue; // CommonMark Emphasis Rules 9-10\n                    }\n                }\n                delimTotal -= rLength;\n                if (delimTotal > 0)\n                    continue; // Haven't found enough closing delimiters\n                // Remove extra characters. *a*** -> *a*\n                rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal);\n                const raw = [...src].slice(0, lLength + match.index + rLength + 1).join('');\n                // Create `em` if smallest delimiter has odd char count. *a***\n                if (Math.min(lLength, rLength) % 2) {\n                    const text = raw.slice(1, -1);\n                    return {\n                        type: 'em',\n                        raw,\n                        text,\n                        tokens: this.lexer.inlineTokens(text)\n                    };\n                }\n                // Create 'strong' if smallest delimiter has even char count. **a***\n                const text = raw.slice(2, -2);\n                return {\n                    type: 'strong',\n                    raw,\n                    text,\n                    tokens: this.lexer.inlineTokens(text)\n                };\n            }\n        }\n    }\n    codespan(src) {\n        const cap = this.rules.inline.code.exec(src);\n        if (cap) {\n            let text = cap[2].replace(/\\n/g, ' ');\n            const hasNonSpaceChars = /[^ ]/.test(text);\n            const hasSpaceCharsOnBothEnds = /^ /.test(text) && / $/.test(text);\n            if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {\n                text = text.substring(1, text.length - 1);\n            }\n            text = escape(text, true);\n            return {\n                type: 'codespan',\n                raw: cap[0],\n                text\n            };\n        }\n    }\n    br(src) {\n        const cap = this.rules.inline.br.exec(src);\n        if (cap) {\n            return {\n                type: 'br',\n                raw: cap[0]\n            };\n        }\n    }\n    del(src) {\n        const cap = this.rules.inline.del.exec(src);\n        if (cap) {\n            return {\n                type: 'del',\n                raw: cap[0],\n                text: cap[2],\n                tokens: this.lexer.inlineTokens(cap[2])\n            };\n        }\n    }\n    autolink(src) {\n        const cap = this.rules.inline.autolink.exec(src);\n        if (cap) {\n            let text, href;\n            if (cap[2] === '@') {\n                text = escape(cap[1]);\n                href = 'mailto:' + text;\n            }\n            else {\n                text = escape(cap[1]);\n                href = text;\n            }\n            return {\n                type: 'link',\n                raw: cap[0],\n                text,\n                href,\n                tokens: [\n                    {\n                        type: 'text',\n                        raw: text,\n                        text\n                    }\n                ]\n            };\n        }\n    }\n    url(src) {\n        let cap;\n        if (cap = this.rules.inline.url.exec(src)) {\n            let text, href;\n            if (cap[2] === '@') {\n                text = escape(cap[0]);\n                href = 'mailto:' + text;\n            }\n            else {\n                // do extended autolink path validation\n                let prevCapZero;\n                do {\n                    prevCapZero = cap[0];\n                    cap[0] = this.rules.inline._backpedal.exec(cap[0])[0];\n                } while (prevCapZero !== cap[0]);\n                text = escape(cap[0]);\n                if (cap[1] === 'www.') {\n                    href = 'http://' + cap[0];\n                }\n                else {\n                    href = cap[0];\n                }\n            }\n            return {\n                type: 'link',\n                raw: cap[0],\n                text,\n                href,\n                tokens: [\n                    {\n                        type: 'text',\n                        raw: text,\n                        text\n                    }\n                ]\n            };\n        }\n    }\n    inlineText(src) {\n        const cap = this.rules.inline.text.exec(src);\n        if (cap) {\n            let text;\n            if (this.lexer.state.inRawBlock) {\n                text = cap[0];\n            }\n            else {\n                text = escape(cap[0]);\n            }\n            return {\n                type: 'text',\n                raw: cap[0],\n                text\n            };\n        }\n    }\n}\n\n/**\n * Block-Level Grammar\n */\n// Not all rules are defined in the object literal\n// @ts-expect-error\nconst block = {\n    newline: /^(?: *(?:\\n|$))+/,\n    code: /^( {4}[^\\n]+(?:\\n(?: *(?:\\n|$))*)?)+/,\n    fences: /^ {0,3}(`{3,}(?=[^`\\n]*(?:\\n|$))|~{3,})([^\\n]*)(?:\\n|$)(?:|([\\s\\S]*?)(?:\\n|$))(?: {0,3}\\1[~`]* *(?=\\n|$)|$)/,\n    hr: /^ {0,3}((?:-[\\t ]*){3,}|(?:_[ \\t]*){3,}|(?:\\*[ \\t]*){3,})(?:\\n+|$)/,\n    heading: /^ {0,3}(#{1,6})(?=\\s|$)(.*)(?:\\n+|$)/,\n    blockquote: /^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/,\n    list: /^( {0,3}bull)([ \\t][^\\n]+?)?(?:\\n|$)/,\n    html: '^ {0,3}(?:' // optional indentation\n        + '<(script|pre|style|textarea)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)' // (1)\n        + '|comment[^\\\\n]*(\\\\n+|$)' // (2)\n        + '|<\\\\?[\\\\s\\\\S]*?(?:\\\\?>\\\\n*|$)' // (3)\n        + '|<![A-Z][\\\\s\\\\S]*?(?:>\\\\n*|$)' // (4)\n        + '|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?(?:\\\\]\\\\]>\\\\n*|$)' // (5)\n        + '|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (6)\n        + '|<(?!script|pre|style|textarea)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) open tag\n        + '|</(?!script|pre|style|textarea)[a-z][\\\\w-]*\\\\s*>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) closing tag\n        + ')',\n    def: /^ {0,3}\\[(label)\\]: *(?:\\n *)?([^<\\s][^\\s]*|<.*?>)(?:(?: +(?:\\n *)?| *\\n *)(title))? *(?:\\n+|$)/,\n    table: noopTest,\n    lheading: /^(?!bull )((?:.|\\n(?!\\s*?\\n|bull ))+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n    // regex template, placeholders will be replaced according to different paragraph\n    // interruption rules of commonmark and the original markdown spec:\n    _paragraph: /^([^\\n]+(?:\\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\\n)[^\\n]+)*)/,\n    text: /^[^\\n]+/\n};\nblock._label = /(?!\\s*\\])(?:\\\\.|[^\\[\\]\\\\])+/;\nblock._title = /(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/;\nblock.def = edit(block.def)\n    .replace('label', block._label)\n    .replace('title', block._title)\n    .getRegex();\nblock.bullet = /(?:[*+-]|\\d{1,9}[.)])/;\nblock.listItemStart = edit(/^( *)(bull) */)\n    .replace('bull', block.bullet)\n    .getRegex();\nblock.list = edit(block.list)\n    .replace(/bull/g, block.bullet)\n    .replace('hr', '\\\\n+(?=\\\\1?(?:(?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$))')\n    .replace('def', '\\\\n+(?=' + block.def.source + ')')\n    .getRegex();\nblock._tag = 'address|article|aside|base|basefont|blockquote|body|caption'\n    + '|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption'\n    + '|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe'\n    + '|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option'\n    + '|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr'\n    + '|track|ul';\nblock._comment = /<!--(?!-?>)[\\s\\S]*?(?:-->|$)/;\nblock.html = edit(block.html, 'i')\n    .replace('comment', block._comment)\n    .replace('tag', block._tag)\n    .replace('attribute', / +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/)\n    .getRegex();\nblock.lheading = edit(block.lheading)\n    .replace(/bull/g, block.bullet) // lists can interrupt\n    .getRegex();\nblock.paragraph = edit(block._paragraph)\n    .replace('hr', block.hr)\n    .replace('heading', ' {0,3}#{1,6} ')\n    .replace('|lheading', '') // setex headings don't interrupt commonmark paragraphs\n    .replace('|table', '')\n    .replace('blockquote', ' {0,3}>')\n    .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n    .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n    .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n    .replace('tag', block._tag) // pars can be interrupted by type (6) html blocks\n    .getRegex();\nblock.blockquote = edit(block.blockquote)\n    .replace('paragraph', block.paragraph)\n    .getRegex();\n/**\n * Normal Block Grammar\n */\nblock.normal = { ...block };\n/**\n * GFM Block Grammar\n */\nblock.gfm = {\n    ...block.normal,\n    table: '^ *([^\\\\n ].*)\\\\n' // Header\n        + ' {0,3}((?:\\\\| *)?:?-+:? *(?:\\\\| *:?-+:? *)*(?:\\\\| *)?)' // Align\n        + '(?:\\\\n((?:(?! *\\\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\\\n|$))*)\\\\n*|$)' // Cells\n};\nblock.gfm.table = edit(block.gfm.table)\n    .replace('hr', block.hr)\n    .replace('heading', ' {0,3}#{1,6} ')\n    .replace('blockquote', ' {0,3}>')\n    .replace('code', ' {4}[^\\\\n]')\n    .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n    .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n    .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n    .replace('tag', block._tag) // tables can be interrupted by type (6) html blocks\n    .getRegex();\nblock.gfm.paragraph = edit(block._paragraph)\n    .replace('hr', block.hr)\n    .replace('heading', ' {0,3}#{1,6} ')\n    .replace('|lheading', '') // setex headings don't interrupt commonmark paragraphs\n    .replace('table', block.gfm.table) // interrupt paragraphs with table\n    .replace('blockquote', ' {0,3}>')\n    .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n    .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n    .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n    .replace('tag', block._tag) // pars can be interrupted by type (6) html blocks\n    .getRegex();\n/**\n * Pedantic grammar (original John Gruber's loose markdown specification)\n */\nblock.pedantic = {\n    ...block.normal,\n    html: edit('^ *(?:comment *(?:\\\\n|\\\\s*$)'\n        + '|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)' // closed tag\n        + '|<tag(?:\"[^\"]*\"|\\'[^\\']*\\'|\\\\s[^\\'\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))')\n        .replace('comment', block._comment)\n        .replace(/tag/g, '(?!(?:'\n        + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub'\n        + '|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)'\n        + '\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b')\n        .getRegex(),\n    def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/,\n    heading: /^(#{1,6})(.*)(?:\\n+|$)/,\n    fences: noopTest,\n    lheading: /^(.+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n    paragraph: edit(block.normal._paragraph)\n        .replace('hr', block.hr)\n        .replace('heading', ' *#{1,6} *[^\\n]')\n        .replace('lheading', block.lheading)\n        .replace('blockquote', ' {0,3}>')\n        .replace('|fences', '')\n        .replace('|list', '')\n        .replace('|html', '')\n        .getRegex()\n};\n/**\n * Inline-Level Grammar\n */\n// Not all rules are defined in the object literal\n// @ts-expect-error\nconst inline = {\n    escape: /^\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/,\n    autolink: /^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/,\n    url: noopTest,\n    tag: '^comment'\n        + '|^</[a-zA-Z][\\\\w:-]*\\\\s*>' // self-closing tag\n        + '|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>' // open tag\n        + '|^<\\\\?[\\\\s\\\\S]*?\\\\?>' // processing instruction, e.g. <?php ?>\n        + '|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>' // declaration, e.g. <!DOCTYPE html>\n        + '|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>',\n    link: /^!?\\[(label)\\]\\(\\s*(href)(?:\\s+(title))?\\s*\\)/,\n    reflink: /^!?\\[(label)\\]\\[(ref)\\]/,\n    nolink: /^!?\\[(ref)\\](?:\\[\\])?/,\n    reflinkSearch: 'reflink|nolink(?!\\\\()',\n    emStrong: {\n        lDelim: /^(?:\\*+(?:((?!\\*)[punct])|[^\\s*]))|^_+(?:((?!_)[punct])|([^\\s_]))/,\n        //         (1) and (2) can only be a Right Delimiter. (3) and (4) can only be Left.  (5) and (6) can be either Left or Right.\n        //         | Skip orphan inside strong      | Consume to delim | (1) #***              | (2) a***#, a***                    | (3) #***a, ***a                  | (4) ***#                 | (5) #***#                         | (6) a***a\n        rDelimAst: /^[^_*]*?__[^_*]*?\\*[^_*]*?(?=__)|[^*]+(?=[^*])|(?!\\*)[punct](\\*+)(?=[\\s]|$)|[^punct\\s](\\*+)(?!\\*)(?=[punct\\s]|$)|(?!\\*)[punct\\s](\\*+)(?=[^punct\\s])|[\\s](\\*+)(?!\\*)(?=[punct])|(?!\\*)[punct](\\*+)(?!\\*)(?=[punct])|[^punct\\s](\\*+)(?=[^punct\\s])/,\n        rDelimUnd: /^[^_*]*?\\*\\*[^_*]*?_[^_*]*?(?=\\*\\*)|[^_]+(?=[^_])|(?!_)[punct](_+)(?=[\\s]|$)|[^punct\\s](_+)(?!_)(?=[punct\\s]|$)|(?!_)[punct\\s](_+)(?=[^punct\\s])|[\\s](_+)(?!_)(?=[punct])|(?!_)[punct](_+)(?!_)(?=[punct])/ // ^- Not allowed for _\n    },\n    code: /^(`+)([^`]|[^`][\\s\\S]*?[^`])\\1(?!`)/,\n    br: /^( {2,}|\\\\)\\n(?!\\s*$)/,\n    del: noopTest,\n    text: /^(`+|[^`])(?:(?= {2,}\\n)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*_]|\\b_|$)|[^ ](?= {2,}\\n)))/,\n    punctuation: /^((?![*_])[\\spunctuation])/\n};\n// list of unicode punctuation marks, plus any missing characters from CommonMark spec\ninline._punctuation = '\\\\p{P}$+<=>`^|~';\ninline.punctuation = edit(inline.punctuation, 'u').replace(/punctuation/g, inline._punctuation).getRegex();\n// sequences em should skip over [title](link), `code`, <html>\ninline.blockSkip = /\\[[^[\\]]*?\\]\\([^\\(\\)]*?\\)|`[^`]*?`|<[^<>]*?>/g;\ninline.anyPunctuation = /\\\\[punct]/g;\ninline._escapes = /\\\\([punct])/g;\ninline._comment = edit(block._comment).replace('(?:-->|$)', '-->').getRegex();\ninline.emStrong.lDelim = edit(inline.emStrong.lDelim, 'u')\n    .replace(/punct/g, inline._punctuation)\n    .getRegex();\ninline.emStrong.rDelimAst = edit(inline.emStrong.rDelimAst, 'gu')\n    .replace(/punct/g, inline._punctuation)\n    .getRegex();\ninline.emStrong.rDelimUnd = edit(inline.emStrong.rDelimUnd, 'gu')\n    .replace(/punct/g, inline._punctuation)\n    .getRegex();\ninline.anyPunctuation = edit(inline.anyPunctuation, 'gu')\n    .replace(/punct/g, inline._punctuation)\n    .getRegex();\ninline._escapes = edit(inline._escapes, 'gu')\n    .replace(/punct/g, inline._punctuation)\n    .getRegex();\ninline._scheme = /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/;\ninline._email = /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/;\ninline.autolink = edit(inline.autolink)\n    .replace('scheme', inline._scheme)\n    .replace('email', inline._email)\n    .getRegex();\ninline._attribute = /\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/;\ninline.tag = edit(inline.tag)\n    .replace('comment', inline._comment)\n    .replace('attribute', inline._attribute)\n    .getRegex();\ninline._label = /(?:\\[(?:\\\\.|[^\\[\\]\\\\])*\\]|\\\\.|`[^`]*`|[^\\[\\]\\\\`])*?/;\ninline._href = /<(?:\\\\.|[^\\n<>\\\\])+>|[^\\s\\x00-\\x1f]*/;\ninline._title = /\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/;\ninline.link = edit(inline.link)\n    .replace('label', inline._label)\n    .replace('href', inline._href)\n    .replace('title', inline._title)\n    .getRegex();\ninline.reflink = edit(inline.reflink)\n    .replace('label', inline._label)\n    .replace('ref', block._label)\n    .getRegex();\ninline.nolink = edit(inline.nolink)\n    .replace('ref', block._label)\n    .getRegex();\ninline.reflinkSearch = edit(inline.reflinkSearch, 'g')\n    .replace('reflink', inline.reflink)\n    .replace('nolink', inline.nolink)\n    .getRegex();\n/**\n * Normal Inline Grammar\n */\ninline.normal = { ...inline };\n/**\n * Pedantic Inline Grammar\n */\ninline.pedantic = {\n    ...inline.normal,\n    strong: {\n        start: /^__|\\*\\*/,\n        middle: /^__(?=\\S)([\\s\\S]*?\\S)__(?!_)|^\\*\\*(?=\\S)([\\s\\S]*?\\S)\\*\\*(?!\\*)/,\n        endAst: /\\*\\*(?!\\*)/g,\n        endUnd: /__(?!_)/g\n    },\n    em: {\n        start: /^_|\\*/,\n        middle: /^()\\*(?=\\S)([\\s\\S]*?\\S)\\*(?!\\*)|^_(?=\\S)([\\s\\S]*?\\S)_(?!_)/,\n        endAst: /\\*(?!\\*)/g,\n        endUnd: /_(?!_)/g\n    },\n    link: edit(/^!?\\[(label)\\]\\((.*?)\\)/)\n        .replace('label', inline._label)\n        .getRegex(),\n    reflink: edit(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/)\n        .replace('label', inline._label)\n        .getRegex()\n};\n/**\n * GFM Inline Grammar\n */\ninline.gfm = {\n    ...inline.normal,\n    escape: edit(inline.escape).replace('])', '~|])').getRegex(),\n    _extended_email: /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/,\n    url: /^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/,\n    _backpedal: /(?:[^?!.,:;*_'\"~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_'\"~)]+(?!$))+/,\n    del: /^(~~?)(?=[^\\s~])([\\s\\S]*?[^\\s~])\\1(?=[^~]|$)/,\n    text: /^([`~]+|[^`~])(?:(?= {2,}\\n)|(?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*~_]|\\b_|https?:\\/\\/|ftp:\\/\\/|www\\.|$)|[^ ](?= {2,}\\n)|[^a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-](?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)))/\n};\ninline.gfm.url = edit(inline.gfm.url, 'i')\n    .replace('email', inline.gfm._extended_email)\n    .getRegex();\n/**\n * GFM + Line Breaks Inline Grammar\n */\ninline.breaks = {\n    ...inline.gfm,\n    br: edit(inline.br).replace('{2,}', '*').getRegex(),\n    text: edit(inline.gfm.text)\n        .replace('\\\\b_', '\\\\b_| {2,}\\\\n')\n        .replace(/\\{2,\\}/g, '*')\n        .getRegex()\n};\n\n/**\n * Block Lexer\n */\nclass _Lexer {\n    tokens;\n    options;\n    state;\n    tokenizer;\n    inlineQueue;\n    constructor(options) {\n        // TokenList cannot be created in one go\n        // @ts-expect-error\n        this.tokens = [];\n        this.tokens.links = Object.create(null);\n        this.options = options || _defaults;\n        this.options.tokenizer = this.options.tokenizer || new _Tokenizer();\n        this.tokenizer = this.options.tokenizer;\n        this.tokenizer.options = this.options;\n        this.tokenizer.lexer = this;\n        this.inlineQueue = [];\n        this.state = {\n            inLink: false,\n            inRawBlock: false,\n            top: true\n        };\n        const rules = {\n            block: block.normal,\n            inline: inline.normal\n        };\n        if (this.options.pedantic) {\n            rules.block = block.pedantic;\n            rules.inline = inline.pedantic;\n        }\n        else if (this.options.gfm) {\n            rules.block = block.gfm;\n            if (this.options.breaks) {\n                rules.inline = inline.breaks;\n            }\n            else {\n                rules.inline = inline.gfm;\n            }\n        }\n        this.tokenizer.rules = rules;\n    }\n    /**\n     * Expose Rules\n     */\n    static get rules() {\n        return {\n            block,\n            inline\n        };\n    }\n    /**\n     * Static Lex Method\n     */\n    static lex(src, options) {\n        const lexer = new _Lexer(options);\n        return lexer.lex(src);\n    }\n    /**\n     * Static Lex Inline Method\n     */\n    static lexInline(src, options) {\n        const lexer = new _Lexer(options);\n        return lexer.inlineTokens(src);\n    }\n    /**\n     * Preprocessing\n     */\n    lex(src) {\n        src = src\n            .replace(/\\r\\n|\\r/g, '\\n');\n        this.blockTokens(src, this.tokens);\n        let next;\n        while (next = this.inlineQueue.shift()) {\n            this.inlineTokens(next.src, next.tokens);\n        }\n        return this.tokens;\n    }\n    blockTokens(src, tokens = []) {\n        if (this.options.pedantic) {\n            src = src.replace(/\\t/g, '    ').replace(/^ +$/gm, '');\n        }\n        else {\n            src = src.replace(/^( *)(\\t+)/gm, (_, leading, tabs) => {\n                return leading + '    '.repeat(tabs.length);\n            });\n        }\n        let token;\n        let lastToken;\n        let cutSrc;\n        let lastParagraphClipped;\n        while (src) {\n            if (this.options.extensions\n                && this.options.extensions.block\n                && this.options.extensions.block.some((extTokenizer) => {\n                    if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n                        src = src.substring(token.raw.length);\n                        tokens.push(token);\n                        return true;\n                    }\n                    return false;\n                })) {\n                continue;\n            }\n            // newline\n            if (token = this.tokenizer.space(src)) {\n                src = src.substring(token.raw.length);\n                if (token.raw.length === 1 && tokens.length > 0) {\n                    // if there's a single \\n as a spacer, it's terminating the last line,\n                    // so move it there so that we don't get unecessary paragraph tags\n                    tokens[tokens.length - 1].raw += '\\n';\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // code\n            if (token = this.tokenizer.code(src)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                // An indented code block cannot interrupt a paragraph.\n                if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.text;\n                    this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // fences\n            if (token = this.tokenizer.fences(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // heading\n            if (token = this.tokenizer.heading(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // hr\n            if (token = this.tokenizer.hr(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // blockquote\n            if (token = this.tokenizer.blockquote(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // list\n            if (token = this.tokenizer.list(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // html\n            if (token = this.tokenizer.html(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // def\n            if (token = this.tokenizer.def(src)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.raw;\n                    this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n                }\n                else if (!this.tokens.links[token.tag]) {\n                    this.tokens.links[token.tag] = {\n                        href: token.href,\n                        title: token.title\n                    };\n                }\n                continue;\n            }\n            // table (gfm)\n            if (token = this.tokenizer.table(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // lheading\n            if (token = this.tokenizer.lheading(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // top-level paragraph\n            // prevent paragraph consuming extensions by clipping 'src' to extension start\n            cutSrc = src;\n            if (this.options.extensions && this.options.extensions.startBlock) {\n                let startIndex = Infinity;\n                const tempSrc = src.slice(1);\n                let tempStart;\n                this.options.extensions.startBlock.forEach((getStartIndex) => {\n                    tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n                    if (typeof tempStart === 'number' && tempStart >= 0) {\n                        startIndex = Math.min(startIndex, tempStart);\n                    }\n                });\n                if (startIndex < Infinity && startIndex >= 0) {\n                    cutSrc = src.substring(0, startIndex + 1);\n                }\n            }\n            if (this.state.top && (token = this.tokenizer.paragraph(cutSrc))) {\n                lastToken = tokens[tokens.length - 1];\n                if (lastParagraphClipped && lastToken.type === 'paragraph') {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.text;\n                    this.inlineQueue.pop();\n                    this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                lastParagraphClipped = (cutSrc.length !== src.length);\n                src = src.substring(token.raw.length);\n                continue;\n            }\n            // text\n            if (token = this.tokenizer.text(src)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && lastToken.type === 'text') {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.text;\n                    this.inlineQueue.pop();\n                    this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            if (src) {\n                const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n                if (this.options.silent) {\n                    console.error(errMsg);\n                    break;\n                }\n                else {\n                    throw new Error(errMsg);\n                }\n            }\n        }\n        this.state.top = true;\n        return tokens;\n    }\n    inline(src, tokens = []) {\n        this.inlineQueue.push({ src, tokens });\n        return tokens;\n    }\n    /**\n     * Lexing/Compiling\n     */\n    inlineTokens(src, tokens = []) {\n        let token, lastToken, cutSrc;\n        // String with links masked to avoid interference with em and strong\n        let maskedSrc = src;\n        let match;\n        let keepPrevChar, prevChar;\n        // Mask out reflinks\n        if (this.tokens.links) {\n            const links = Object.keys(this.tokens.links);\n            if (links.length > 0) {\n                while ((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {\n                    if (links.includes(match[0].slice(match[0].lastIndexOf('[') + 1, -1))) {\n                        maskedSrc = maskedSrc.slice(0, match.index) + '[' + 'a'.repeat(match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);\n                    }\n                }\n            }\n        }\n        // Mask out other blocks\n        while ((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {\n            maskedSrc = maskedSrc.slice(0, match.index) + '[' + 'a'.repeat(match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);\n        }\n        // Mask out escaped characters\n        while ((match = this.tokenizer.rules.inline.anyPunctuation.exec(maskedSrc)) != null) {\n            maskedSrc = maskedSrc.slice(0, match.index) + '++' + maskedSrc.slice(this.tokenizer.rules.inline.anyPunctuation.lastIndex);\n        }\n        while (src) {\n            if (!keepPrevChar) {\n                prevChar = '';\n            }\n            keepPrevChar = false;\n            // extensions\n            if (this.options.extensions\n                && this.options.extensions.inline\n                && this.options.extensions.inline.some((extTokenizer) => {\n                    if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n                        src = src.substring(token.raw.length);\n                        tokens.push(token);\n                        return true;\n                    }\n                    return false;\n                })) {\n                continue;\n            }\n            // escape\n            if (token = this.tokenizer.escape(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // tag\n            if (token = this.tokenizer.tag(src)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n                    lastToken.raw += token.raw;\n                    lastToken.text += token.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // link\n            if (token = this.tokenizer.link(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // reflink, nolink\n            if (token = this.tokenizer.reflink(src, this.tokens.links)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n                    lastToken.raw += token.raw;\n                    lastToken.text += token.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // em & strong\n            if (token = this.tokenizer.emStrong(src, maskedSrc, prevChar)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // code\n            if (token = this.tokenizer.codespan(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // br\n            if (token = this.tokenizer.br(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // del (gfm)\n            if (token = this.tokenizer.del(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // autolink\n            if (token = this.tokenizer.autolink(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // url (gfm)\n            if (!this.state.inLink && (token = this.tokenizer.url(src))) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // text\n            // prevent inlineText consuming extensions by clipping 'src' to extension start\n            cutSrc = src;\n            if (this.options.extensions && this.options.extensions.startInline) {\n                let startIndex = Infinity;\n                const tempSrc = src.slice(1);\n                let tempStart;\n                this.options.extensions.startInline.forEach((getStartIndex) => {\n                    tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n                    if (typeof tempStart === 'number' && tempStart >= 0) {\n                        startIndex = Math.min(startIndex, tempStart);\n                    }\n                });\n                if (startIndex < Infinity && startIndex >= 0) {\n                    cutSrc = src.substring(0, startIndex + 1);\n                }\n            }\n            if (token = this.tokenizer.inlineText(cutSrc)) {\n                src = src.substring(token.raw.length);\n                if (token.raw.slice(-1) !== '_') { // Track prevChar before string of ____ started\n                    prevChar = token.raw.slice(-1);\n                }\n                keepPrevChar = true;\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && lastToken.type === 'text') {\n                    lastToken.raw += token.raw;\n                    lastToken.text += token.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            if (src) {\n                const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n                if (this.options.silent) {\n                    console.error(errMsg);\n                    break;\n                }\n                else {\n                    throw new Error(errMsg);\n                }\n            }\n        }\n        return tokens;\n    }\n}\n\n/**\n * Renderer\n */\nclass _Renderer {\n    options;\n    constructor(options) {\n        this.options = options || _defaults;\n    }\n    code(code, infostring, escaped) {\n        const lang = (infostring || '').match(/^\\S*/)?.[0];\n        code = code.replace(/\\n$/, '') + '\\n';\n        if (!lang) {\n            return '<pre><code>'\n                + (escaped ? code : escape(code, true))\n                + '</code></pre>\\n';\n        }\n        return '<pre><code class=\"language-'\n            + escape(lang)\n            + '\">'\n            + (escaped ? code : escape(code, true))\n            + '</code></pre>\\n';\n    }\n    blockquote(quote) {\n        return `<blockquote>\\n${quote}</blockquote>\\n`;\n    }\n    html(html, block) {\n        return html;\n    }\n    heading(text, level, raw) {\n        // ignore IDs\n        return `<h${level}>${text}</h${level}>\\n`;\n    }\n    hr() {\n        return '<hr>\\n';\n    }\n    list(body, ordered, start) {\n        const type = ordered ? 'ol' : 'ul';\n        const startatt = (ordered && start !== 1) ? (' start=\"' + start + '\"') : '';\n        return '<' + type + startatt + '>\\n' + body + '</' + type + '>\\n';\n    }\n    listitem(text, task, checked) {\n        return `<li>${text}</li>\\n`;\n    }\n    checkbox(checked) {\n        return '<input '\n            + (checked ? 'checked=\"\" ' : '')\n            + 'disabled=\"\" type=\"checkbox\">';\n    }\n    paragraph(text) {\n        return `<p>${text}</p>\\n`;\n    }\n    table(header, body) {\n        if (body)\n            body = `<tbody>${body}</tbody>`;\n        return '<table>\\n'\n            + '<thead>\\n'\n            + header\n            + '</thead>\\n'\n            + body\n            + '</table>\\n';\n    }\n    tablerow(content) {\n        return `<tr>\\n${content}</tr>\\n`;\n    }\n    tablecell(content, flags) {\n        const type = flags.header ? 'th' : 'td';\n        const tag = flags.align\n            ? `<${type} align=\"${flags.align}\">`\n            : `<${type}>`;\n        return tag + content + `</${type}>\\n`;\n    }\n    /**\n     * span level renderer\n     */\n    strong(text) {\n        return `<strong>${text}</strong>`;\n    }\n    em(text) {\n        return `<em>${text}</em>`;\n    }\n    codespan(text) {\n        return `<code>${text}</code>`;\n    }\n    br() {\n        return '<br>';\n    }\n    del(text) {\n        return `<del>${text}</del>`;\n    }\n    link(href, title, text) {\n        const cleanHref = cleanUrl(href);\n        if (cleanHref === null) {\n            return text;\n        }\n        href = cleanHref;\n        let out = '<a href=\"' + href + '\"';\n        if (title) {\n            out += ' title=\"' + title + '\"';\n        }\n        out += '>' + text + '</a>';\n        return out;\n    }\n    image(href, title, text) {\n        const cleanHref = cleanUrl(href);\n        if (cleanHref === null) {\n            return text;\n        }\n        href = cleanHref;\n        let out = `<img src=\"${href}\" alt=\"${text}\"`;\n        if (title) {\n            out += ` title=\"${title}\"`;\n        }\n        out += '>';\n        return out;\n    }\n    text(text) {\n        return text;\n    }\n}\n\n/**\n * TextRenderer\n * returns only the textual part of the token\n */\nclass _TextRenderer {\n    // no need for block level renderers\n    strong(text) {\n        return text;\n    }\n    em(text) {\n        return text;\n    }\n    codespan(text) {\n        return text;\n    }\n    del(text) {\n        return text;\n    }\n    html(text) {\n        return text;\n    }\n    text(text) {\n        return text;\n    }\n    link(href, title, text) {\n        return '' + text;\n    }\n    image(href, title, text) {\n        return '' + text;\n    }\n    br() {\n        return '';\n    }\n}\n\n/**\n * Parsing & Compiling\n */\nclass _Parser {\n    options;\n    renderer;\n    textRenderer;\n    constructor(options) {\n        this.options = options || _defaults;\n        this.options.renderer = this.options.renderer || new _Renderer();\n        this.renderer = this.options.renderer;\n        this.renderer.options = this.options;\n        this.textRenderer = new _TextRenderer();\n    }\n    /**\n     * Static Parse Method\n     */\n    static parse(tokens, options) {\n        const parser = new _Parser(options);\n        return parser.parse(tokens);\n    }\n    /**\n     * Static Parse Inline Method\n     */\n    static parseInline(tokens, options) {\n        const parser = new _Parser(options);\n        return parser.parseInline(tokens);\n    }\n    /**\n     * Parse Loop\n     */\n    parse(tokens, top = true) {\n        let out = '';\n        for (let i = 0; i < tokens.length; i++) {\n            const token = tokens[i];\n            // Run any renderer extensions\n            if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {\n                const genericToken = token;\n                const ret = this.options.extensions.renderers[genericToken.type].call({ parser: this }, genericToken);\n                if (ret !== false || !['space', 'hr', 'heading', 'code', 'table', 'blockquote', 'list', 'html', 'paragraph', 'text'].includes(genericToken.type)) {\n                    out += ret || '';\n                    continue;\n                }\n            }\n            switch (token.type) {\n                case 'space': {\n                    continue;\n                }\n                case 'hr': {\n                    out += this.renderer.hr();\n                    continue;\n                }\n                case 'heading': {\n                    const headingToken = token;\n                    out += this.renderer.heading(this.parseInline(headingToken.tokens), headingToken.depth, unescape(this.parseInline(headingToken.tokens, this.textRenderer)));\n                    continue;\n                }\n                case 'code': {\n                    const codeToken = token;\n                    out += this.renderer.code(codeToken.text, codeToken.lang, !!codeToken.escaped);\n                    continue;\n                }\n                case 'table': {\n                    const tableToken = token;\n                    let header = '';\n                    // header\n                    let cell = '';\n                    for (let j = 0; j < tableToken.header.length; j++) {\n                        cell += this.renderer.tablecell(this.parseInline(tableToken.header[j].tokens), { header: true, align: tableToken.align[j] });\n                    }\n                    header += this.renderer.tablerow(cell);\n                    let body = '';\n                    for (let j = 0; j < tableToken.rows.length; j++) {\n                        const row = tableToken.rows[j];\n                        cell = '';\n                        for (let k = 0; k < row.length; k++) {\n                            cell += this.renderer.tablecell(this.parseInline(row[k].tokens), { header: false, align: tableToken.align[k] });\n                        }\n                        body += this.renderer.tablerow(cell);\n                    }\n                    out += this.renderer.table(header, body);\n                    continue;\n                }\n                case 'blockquote': {\n                    const blockquoteToken = token;\n                    const body = this.parse(blockquoteToken.tokens);\n                    out += this.renderer.blockquote(body);\n                    continue;\n                }\n                case 'list': {\n                    const listToken = token;\n                    const ordered = listToken.ordered;\n                    const start = listToken.start;\n                    const loose = listToken.loose;\n                    let body = '';\n                    for (let j = 0; j < listToken.items.length; j++) {\n                        const item = listToken.items[j];\n                        const checked = item.checked;\n                        const task = item.task;\n                        let itemBody = '';\n                        if (item.task) {\n                            const checkbox = this.renderer.checkbox(!!checked);\n                            if (loose) {\n                                if (item.tokens.length > 0 && item.tokens[0].type === 'paragraph') {\n                                    item.tokens[0].text = checkbox + ' ' + item.tokens[0].text;\n                                    if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === 'text') {\n                                        item.tokens[0].tokens[0].text = checkbox + ' ' + item.tokens[0].tokens[0].text;\n                                    }\n                                }\n                                else {\n                                    item.tokens.unshift({\n                                        type: 'text',\n                                        text: checkbox + ' '\n                                    });\n                                }\n                            }\n                            else {\n                                itemBody += checkbox + ' ';\n                            }\n                        }\n                        itemBody += this.parse(item.tokens, loose);\n                        body += this.renderer.listitem(itemBody, task, !!checked);\n                    }\n                    out += this.renderer.list(body, ordered, start);\n                    continue;\n                }\n                case 'html': {\n                    const htmlToken = token;\n                    out += this.renderer.html(htmlToken.text, htmlToken.block);\n                    continue;\n                }\n                case 'paragraph': {\n                    const paragraphToken = token;\n                    out += this.renderer.paragraph(this.parseInline(paragraphToken.tokens));\n                    continue;\n                }\n                case 'text': {\n                    let textToken = token;\n                    let body = textToken.tokens ? this.parseInline(textToken.tokens) : textToken.text;\n                    while (i + 1 < tokens.length && tokens[i + 1].type === 'text') {\n                        textToken = tokens[++i];\n                        body += '\\n' + (textToken.tokens ? this.parseInline(textToken.tokens) : textToken.text);\n                    }\n                    out += top ? this.renderer.paragraph(body) : body;\n                    continue;\n                }\n                default: {\n                    const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n                    if (this.options.silent) {\n                        console.error(errMsg);\n                        return '';\n                    }\n                    else {\n                        throw new Error(errMsg);\n                    }\n                }\n            }\n        }\n        return out;\n    }\n    /**\n     * Parse Inline Tokens\n     */\n    parseInline(tokens, renderer) {\n        renderer = renderer || this.renderer;\n        let out = '';\n        for (let i = 0; i < tokens.length; i++) {\n            const token = tokens[i];\n            // Run any renderer extensions\n            if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {\n                const ret = this.options.extensions.renderers[token.type].call({ parser: this }, token);\n                if (ret !== false || !['escape', 'html', 'link', 'image', 'strong', 'em', 'codespan', 'br', 'del', 'text'].includes(token.type)) {\n                    out += ret || '';\n                    continue;\n                }\n            }\n            switch (token.type) {\n                case 'escape': {\n                    const escapeToken = token;\n                    out += renderer.text(escapeToken.text);\n                    break;\n                }\n                case 'html': {\n                    const tagToken = token;\n                    out += renderer.html(tagToken.text);\n                    break;\n                }\n                case 'link': {\n                    const linkToken = token;\n                    out += renderer.link(linkToken.href, linkToken.title, this.parseInline(linkToken.tokens, renderer));\n                    break;\n                }\n                case 'image': {\n                    const imageToken = token;\n                    out += renderer.image(imageToken.href, imageToken.title, imageToken.text);\n                    break;\n                }\n                case 'strong': {\n                    const strongToken = token;\n                    out += renderer.strong(this.parseInline(strongToken.tokens, renderer));\n                    break;\n                }\n                case 'em': {\n                    const emToken = token;\n                    out += renderer.em(this.parseInline(emToken.tokens, renderer));\n                    break;\n                }\n                case 'codespan': {\n                    const codespanToken = token;\n                    out += renderer.codespan(codespanToken.text);\n                    break;\n                }\n                case 'br': {\n                    out += renderer.br();\n                    break;\n                }\n                case 'del': {\n                    const delToken = token;\n                    out += renderer.del(this.parseInline(delToken.tokens, renderer));\n                    break;\n                }\n                case 'text': {\n                    const textToken = token;\n                    out += renderer.text(textToken.text);\n                    break;\n                }\n                default: {\n                    const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n                    if (this.options.silent) {\n                        console.error(errMsg);\n                        return '';\n                    }\n                    else {\n                        throw new Error(errMsg);\n                    }\n                }\n            }\n        }\n        return out;\n    }\n}\n\nclass _Hooks {\n    options;\n    constructor(options) {\n        this.options = options || _defaults;\n    }\n    static passThroughHooks = new Set([\n        'preprocess',\n        'postprocess'\n    ]);\n    /**\n     * Process markdown before marked\n     */\n    preprocess(markdown) {\n        return markdown;\n    }\n    /**\n     * Process HTML after marked is finished\n     */\n    postprocess(html) {\n        return html;\n    }\n}\n\nclass Marked {\n    defaults = _getDefaults();\n    options = this.setOptions;\n    parse = this.#parseMarkdown(_Lexer.lex, _Parser.parse);\n    parseInline = this.#parseMarkdown(_Lexer.lexInline, _Parser.parseInline);\n    Parser = _Parser;\n    parser = _Parser.parse;\n    Renderer = _Renderer;\n    TextRenderer = _TextRenderer;\n    Lexer = _Lexer;\n    lexer = _Lexer.lex;\n    Tokenizer = _Tokenizer;\n    Hooks = _Hooks;\n    constructor(...args) {\n        this.use(...args);\n    }\n    /**\n     * Run callback for every token\n     */\n    walkTokens(tokens, callback) {\n        let values = [];\n        for (const token of tokens) {\n            values = values.concat(callback.call(this, token));\n            switch (token.type) {\n                case 'table': {\n                    const tableToken = token;\n                    for (const cell of tableToken.header) {\n                        values = values.concat(this.walkTokens(cell.tokens, callback));\n                    }\n                    for (const row of tableToken.rows) {\n                        for (const cell of row) {\n                            values = values.concat(this.walkTokens(cell.tokens, callback));\n                        }\n                    }\n                    break;\n                }\n                case 'list': {\n                    const listToken = token;\n                    values = values.concat(this.walkTokens(listToken.items, callback));\n                    break;\n                }\n                default: {\n                    const genericToken = token;\n                    if (this.defaults.extensions?.childTokens?.[genericToken.type]) {\n                        this.defaults.extensions.childTokens[genericToken.type].forEach((childTokens) => {\n                            values = values.concat(this.walkTokens(genericToken[childTokens], callback));\n                        });\n                    }\n                    else if (genericToken.tokens) {\n                        values = values.concat(this.walkTokens(genericToken.tokens, callback));\n                    }\n                }\n            }\n        }\n        return values;\n    }\n    use(...args) {\n        const extensions = this.defaults.extensions || { renderers: {}, childTokens: {} };\n        args.forEach((pack) => {\n            // copy options to new object\n            const opts = { ...pack };\n            // set async to true if it was set to true before\n            opts.async = this.defaults.async || opts.async || false;\n            // ==-- Parse \"addon\" extensions --== //\n            if (pack.extensions) {\n                pack.extensions.forEach((ext) => {\n                    if (!ext.name) {\n                        throw new Error('extension name required');\n                    }\n                    if ('renderer' in ext) { // Renderer extensions\n                        const prevRenderer = extensions.renderers[ext.name];\n                        if (prevRenderer) {\n                            // Replace extension with func to run new extension but fall back if false\n                            extensions.renderers[ext.name] = function (...args) {\n                                let ret = ext.renderer.apply(this, args);\n                                if (ret === false) {\n                                    ret = prevRenderer.apply(this, args);\n                                }\n                                return ret;\n                            };\n                        }\n                        else {\n                            extensions.renderers[ext.name] = ext.renderer;\n                        }\n                    }\n                    if ('tokenizer' in ext) { // Tokenizer Extensions\n                        if (!ext.level || (ext.level !== 'block' && ext.level !== 'inline')) {\n                            throw new Error(\"extension level must be 'block' or 'inline'\");\n                        }\n                        const extLevel = extensions[ext.level];\n                        if (extLevel) {\n                            extLevel.unshift(ext.tokenizer);\n                        }\n                        else {\n                            extensions[ext.level] = [ext.tokenizer];\n                        }\n                        if (ext.start) { // Function to check for start of token\n                            if (ext.level === 'block') {\n                                if (extensions.startBlock) {\n                                    extensions.startBlock.push(ext.start);\n                                }\n                                else {\n                                    extensions.startBlock = [ext.start];\n                                }\n                            }\n                            else if (ext.level === 'inline') {\n                                if (extensions.startInline) {\n                                    extensions.startInline.push(ext.start);\n                                }\n                                else {\n                                    extensions.startInline = [ext.start];\n                                }\n                            }\n                        }\n                    }\n                    if ('childTokens' in ext && ext.childTokens) { // Child tokens to be visited by walkTokens\n                        extensions.childTokens[ext.name] = ext.childTokens;\n                    }\n                });\n                opts.extensions = extensions;\n            }\n            // ==-- Parse \"overwrite\" extensions --== //\n            if (pack.renderer) {\n                const renderer = this.defaults.renderer || new _Renderer(this.defaults);\n                for (const prop in pack.renderer) {\n                    const rendererFunc = pack.renderer[prop];\n                    const rendererKey = prop;\n                    const prevRenderer = renderer[rendererKey];\n                    // Replace renderer with func to run extension, but fall back if false\n                    renderer[rendererKey] = (...args) => {\n                        let ret = rendererFunc.apply(renderer, args);\n                        if (ret === false) {\n                            ret = prevRenderer.apply(renderer, args);\n                        }\n                        return ret || '';\n                    };\n                }\n                opts.renderer = renderer;\n            }\n            if (pack.tokenizer) {\n                const tokenizer = this.defaults.tokenizer || new _Tokenizer(this.defaults);\n                for (const prop in pack.tokenizer) {\n                    const tokenizerFunc = pack.tokenizer[prop];\n                    const tokenizerKey = prop;\n                    const prevTokenizer = tokenizer[tokenizerKey];\n                    // Replace tokenizer with func to run extension, but fall back if false\n                    tokenizer[tokenizerKey] = (...args) => {\n                        let ret = tokenizerFunc.apply(tokenizer, args);\n                        if (ret === false) {\n                            ret = prevTokenizer.apply(tokenizer, args);\n                        }\n                        return ret;\n                    };\n                }\n                opts.tokenizer = tokenizer;\n            }\n            // ==-- Parse Hooks extensions --== //\n            if (pack.hooks) {\n                const hooks = this.defaults.hooks || new _Hooks();\n                for (const prop in pack.hooks) {\n                    const hooksFunc = pack.hooks[prop];\n                    const hooksKey = prop;\n                    const prevHook = hooks[hooksKey];\n                    if (_Hooks.passThroughHooks.has(prop)) {\n                        hooks[hooksKey] = (arg) => {\n                            if (this.defaults.async) {\n                                return Promise.resolve(hooksFunc.call(hooks, arg)).then(ret => {\n                                    return prevHook.call(hooks, ret);\n                                });\n                            }\n                            const ret = hooksFunc.call(hooks, arg);\n                            return prevHook.call(hooks, ret);\n                        };\n                    }\n                    else {\n                        hooks[hooksKey] = (...args) => {\n                            let ret = hooksFunc.apply(hooks, args);\n                            if (ret === false) {\n                                ret = prevHook.apply(hooks, args);\n                            }\n                            return ret;\n                        };\n                    }\n                }\n                opts.hooks = hooks;\n            }\n            // ==-- Parse WalkTokens extensions --== //\n            if (pack.walkTokens) {\n                const walkTokens = this.defaults.walkTokens;\n                const packWalktokens = pack.walkTokens;\n                opts.walkTokens = function (token) {\n                    let values = [];\n                    values.push(packWalktokens.call(this, token));\n                    if (walkTokens) {\n                        values = values.concat(walkTokens.call(this, token));\n                    }\n                    return values;\n                };\n            }\n            this.defaults = { ...this.defaults, ...opts };\n        });\n        return this;\n    }\n    setOptions(opt) {\n        this.defaults = { ...this.defaults, ...opt };\n        return this;\n    }\n    #parseMarkdown(lexer, parser) {\n        return (src, options) => {\n            const origOpt = { ...options };\n            const opt = { ...this.defaults, ...origOpt };\n            // Show warning if an extension set async to true but the parse was called with async: false\n            if (this.defaults.async === true && origOpt.async === false) {\n                if (!opt.silent) {\n                    console.warn('marked(): The async option was set to true by an extension. The async: false option sent to parse will be ignored.');\n                }\n                opt.async = true;\n            }\n            const throwError = this.#onError(!!opt.silent, !!opt.async);\n            // throw error in case of non string input\n            if (typeof src === 'undefined' || src === null) {\n                return throwError(new Error('marked(): input parameter is undefined or null'));\n            }\n            if (typeof src !== 'string') {\n                return throwError(new Error('marked(): input parameter is of type '\n                    + Object.prototype.toString.call(src) + ', string expected'));\n            }\n            if (opt.hooks) {\n                opt.hooks.options = opt;\n            }\n            if (opt.async) {\n                return Promise.resolve(opt.hooks ? opt.hooks.preprocess(src) : src)\n                    .then(src => lexer(src, opt))\n                    .then(tokens => opt.walkTokens ? Promise.all(this.walkTokens(tokens, opt.walkTokens)).then(() => tokens) : tokens)\n                    .then(tokens => parser(tokens, opt))\n                    .then(html => opt.hooks ? opt.hooks.postprocess(html) : html)\n                    .catch(throwError);\n            }\n            try {\n                if (opt.hooks) {\n                    src = opt.hooks.preprocess(src);\n                }\n                const tokens = lexer(src, opt);\n                if (opt.walkTokens) {\n                    this.walkTokens(tokens, opt.walkTokens);\n                }\n                let html = parser(tokens, opt);\n                if (opt.hooks) {\n                    html = opt.hooks.postprocess(html);\n                }\n                return html;\n            }\n            catch (e) {\n                return throwError(e);\n            }\n        };\n    }\n    #onError(silent, async) {\n        return (e) => {\n            e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n            if (silent) {\n                const msg = '<p>An error occurred:</p><pre>'\n                    + escape(e.message + '', true)\n                    + '</pre>';\n                if (async) {\n                    return Promise.resolve(msg);\n                }\n                return msg;\n            }\n            if (async) {\n                return Promise.reject(e);\n            }\n            throw e;\n        };\n    }\n}\n\nconst markedInstance = new Marked();\nfunction marked(src, opt) {\n    return markedInstance.parse(src, opt);\n}\n/**\n * Sets the default options.\n *\n * @param options Hash of options\n */\nmarked.options =\n    marked.setOptions = function (options) {\n        markedInstance.setOptions(options);\n        marked.defaults = markedInstance.defaults;\n        changeDefaults(marked.defaults);\n        return marked;\n    };\n/**\n * Gets the original marked default options.\n */\nmarked.getDefaults = _getDefaults;\nmarked.defaults = _defaults;\n/**\n * Use Extension\n */\nmarked.use = function (...args) {\n    markedInstance.use(...args);\n    marked.defaults = markedInstance.defaults;\n    changeDefaults(marked.defaults);\n    return marked;\n};\n/**\n * Run callback for every token\n */\nmarked.walkTokens = function (tokens, callback) {\n    return markedInstance.walkTokens(tokens, callback);\n};\n/**\n * Compiles markdown to HTML without enclosing `p` tag.\n *\n * @param src String of markdown source to be compiled\n * @param options Hash of options\n * @return String of compiled HTML\n */\nmarked.parseInline = markedInstance.parseInline;\n/**\n * Expose\n */\nmarked.Parser = _Parser;\nmarked.parser = _Parser.parse;\nmarked.Renderer = _Renderer;\nmarked.TextRenderer = _TextRenderer;\nmarked.Lexer = _Lexer;\nmarked.lexer = _Lexer.lex;\nmarked.Tokenizer = _Tokenizer;\nmarked.Hooks = _Hooks;\nmarked.parse = marked;\nconst options = marked.options;\nconst setOptions = marked.setOptions;\nconst use = marked.use;\nconst walkTokens = marked.walkTokens;\nconst parseInline = marked.parseInline;\nconst parse = marked;\nconst parser = _Parser.parse;\nconst lexer = _Lexer.lex;\n\nexport { _Hooks as Hooks, _Lexer as Lexer, Marked, _Parser as Parser, _Renderer as Renderer, _TextRenderer as TextRenderer, _Tokenizer as Tokenizer, _defaults as defaults, _getDefaults as getDefaults, lexer, marked, options, parse, parseInline, parser, setOptions, use, walkTokens };\n//# sourceMappingURL=marked.esm.js.map\n"],"names":["_getDefaults","async","breaks","extensions","gfm","hooks","pedantic","renderer","silent","tokenizer","walkTokens","_defaults","changeDefaults","newDefaults","escapeTest","escapeReplace","RegExp","source","escapeTestNoEncode","escapeReplaceNoEncode","escapeReplacements","getEscapeReplacement","ch","escape","html","encode","test","replace","unescapeTest","unescape","_","n","toLowerCase","charAt","String","fromCharCode","parseInt","substring","caret","edit","regex","opt","obj","name","val","getRegex","cleanUrl","href","encodeURI","e","noopTest","exec","splitCells","tableRow","count","row","match","offset","str","escaped","curr","cells","split","i","trim","shift","length","pop","splice","push","rtrim","c","invert","l","suffLen","currChar","slice","findClosingBracket","b","indexOf","level","outputLink","cap","link","raw","lexer","title","text","state","inLink","token","type","tokens","inlineTokens","indentCodeCompensation","matchIndentToCode","indentToCode","map","node","matchIndentInNode","indentInNode","join","_Tokenizer","options","rules","constructor","this","space","src","block","newline","code","codeBlockStyle","fences","lang","inline","_escapes","heading","trimmed","depth","hr","blockquote","top","blockTokens","list","bull","isordered","ordered","start","loose","items","itemRegex","itemContents","endsWithBlankLine","endEarly","line","t","repeat","nextLine","indent","trimStart","search","blankLine","nextBulletRegex","Math","min","hrRegex","fencesBeginRegex","headingBeginRegex","rawLine","istask","ischecked","task","checked","trimEnd","spacers","filter","hasMultipleLineBreaks","some","pre","def","tag","table","item","header","align","rows","j","k","lheading","paragraph","inRawBlock","trimmedUrl","rtrimSlash","lastParenIndex","linkLen","reflink","links","nolink","emStrong","maskedSrc","prevChar","lDelim","nextChar","punctuation","lLength","rDelim","rLength","delimTotal","midDelimTotal","endReg","rDelimAst","rDelimUnd","lastIndex","index","codespan","hasNonSpaceChars","hasSpaceCharsOnBothEnds","br","del","autolink","url","prevCapZero","_backpedal","inlineText","_paragraph","_label","_title","bullet","listItemStart","_tag","_comment","normal","reflinkSearch","_punctuation","blockSkip","anyPunctuation","_scheme","_email","_attribute","_href","strong","middle","endAst","endUnd","em","_extended_email","_Lexer","inlineQueue","Object","create","lex","lexInline","next","leading","tabs","lastToken","cutSrc","lastParagraphClipped","extTokenizer","call","startBlock","startIndex","Infinity","tempSrc","tempStart","forEach","getStartIndex","errMsg","charCodeAt","console","error","Error","keepPrevChar","keys","includes","lastIndexOf","startInline","_Renderer","infostring","quote","body","startatt","listitem","checkbox","tablerow","content","tablecell","flags","cleanHref","out","image","_TextRenderer","_Parser","textRenderer","parse","parser","parseInline","renderers","genericToken","ret","headingToken","codeToken","tableToken","cell","blockquoteToken","listToken","itemBody","unshift","htmlToken","paragraphToken","textToken","escapeToken","tagToken","linkToken","imageToken","strongToken","emToken","codespanToken","delToken","_Hooks","static","Set","preprocess","markdown","postprocess","Marked","defaults","setOptions","Parser","Renderer","TextRenderer","Lexer","Tokenizer","Hooks","args","use","callback","values","concat","childTokens","pack","opts","ext","prevRenderer","apply","extLevel","prop","rendererFunc","rendererKey","tokenizerFunc","tokenizerKey","prevTokenizer","hooksFunc","hooksKey","prevHook","passThroughHooks","has","arg","Promise","resolve","then","packWalktokens","origOpt","warn","throwError","prototype","toString","all","catch","message","msg","reject","markedInstance","marked","getDefaults"],"sourceRoot":""}