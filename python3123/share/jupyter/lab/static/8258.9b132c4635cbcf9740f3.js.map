{"version":3,"file":"8258.9b132c4635cbcf9740f3.js?v=9b132c4635cbcf9740f3","mappings":"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","sources":["webpack://@jupyterlab/application-top/./node_modules/mdast-util-to-string/lib/index.js","webpack://@jupyterlab/application-top/./node_modules/micromark-util-chunked/index.js","webpack://@jupyterlab/application-top/./node_modules/micromark-util-combine-extensions/index.js","webpack://@jupyterlab/application-top/./node_modules/micromark-util-character/lib/unicode-punctuation-regex.js","webpack://@jupyterlab/application-top/./node_modules/micromark-util-character/index.js","webpack://@jupyterlab/application-top/./node_modules/micromark-factory-space/index.js","webpack://@jupyterlab/application-top/./node_modules/micromark/lib/initialize/content.js","webpack://@jupyterlab/application-top/./node_modules/micromark/lib/initialize/document.js","webpack://@jupyterlab/application-top/./node_modules/micromark-core-commonmark/lib/blank-line.js","webpack://@jupyterlab/application-top/./node_modules/micromark-util-subtokenize/index.js","webpack://@jupyterlab/application-top/./node_modules/micromark-core-commonmark/lib/content.js","webpack://@jupyterlab/application-top/./node_modules/micromark/lib/initialize/flow.js","webpack://@jupyterlab/application-top/./node_modules/micromark/lib/initialize/text.js","webpack://@jupyterlab/application-top/./node_modules/micromark-util-resolve-all/index.js","webpack://@jupyterlab/application-top/./node_modules/micromark/lib/create-tokenizer.js","webpack://@jupyterlab/application-top/./node_modules/micromark-core-commonmark/lib/thematic-break.js","webpack://@jupyterlab/application-top/./node_modules/micromark-core-commonmark/lib/list.js","webpack://@jupyterlab/application-top/./node_modules/micromark-core-commonmark/lib/block-quote.js","webpack://@jupyterlab/application-top/./node_modules/micromark-factory-destination/index.js","webpack://@jupyterlab/application-top/./node_modules/micromark-factory-label/index.js","webpack://@jupyterlab/application-top/./node_modules/micromark-factory-title/index.js","webpack://@jupyterlab/application-top/./node_modules/micromark-factory-whitespace/index.js","webpack://@jupyterlab/application-top/./node_modules/micromark-util-normalize-identifier/index.js","webpack://@jupyterlab/application-top/./node_modules/micromark-core-commonmark/lib/definition.js","webpack://@jupyterlab/application-top/./node_modules/micromark-core-commonmark/lib/code-indented.js","webpack://@jupyterlab/application-top/./node_modules/micromark-core-commonmark/lib/heading-atx.js","webpack://@jupyterlab/application-top/./node_modules/micromark-core-commonmark/lib/setext-underline.js","webpack://@jupyterlab/application-top/./node_modules/micromark-util-html-tag-name/index.js","webpack://@jupyterlab/application-top/./node_modules/micromark-core-commonmark/lib/html-flow.js","webpack://@jupyterlab/application-top/./node_modules/micromark-core-commonmark/lib/code-fenced.js","webpack://@jupyterlab/application-top/./node_modules/decode-named-character-reference/index.dom.js","webpack://@jupyterlab/application-top/./node_modules/micromark-core-commonmark/lib/character-reference.js","webpack://@jupyterlab/application-top/./node_modules/micromark-core-commonmark/lib/character-escape.js","webpack://@jupyterlab/application-top/./node_modules/micromark-core-commonmark/lib/line-ending.js","webpack://@jupyterlab/application-top/./node_modules/micromark-core-commonmark/lib/label-end.js","webpack://@jupyterlab/application-top/./node_modules/micromark-core-commonmark/lib/label-start-image.js","webpack://@jupyterlab/application-top/./node_modules/micromark-util-classify-character/index.js","webpack://@jupyterlab/application-top/./node_modules/micromark-core-commonmark/lib/attention.js","webpack://@jupyterlab/application-top/./node_modules/micromark-core-commonmark/lib/autolink.js","webpack://@jupyterlab/application-top/./node_modules/micromark-core-commonmark/lib/html-text.js","webpack://@jupyterlab/application-top/./node_modules/micromark-core-commonmark/lib/label-start-link.js","webpack://@jupyterlab/application-top/./node_modules/micromark-core-commonmark/lib/hard-break-escape.js","webpack://@jupyterlab/application-top/./node_modules/micromark-core-commonmark/lib/code-text.js","webpack://@jupyterlab/application-top/./node_modules/micromark/lib/constructs.js","webpack://@jupyterlab/application-top/./node_modules/micromark/lib/parse.js","webpack://@jupyterlab/application-top/./node_modules/micromark/lib/preprocess.js","webpack://@jupyterlab/application-top/./node_modules/micromark/lib/postprocess.js","webpack://@jupyterlab/application-top/./node_modules/micromark-util-decode-numeric-character-reference/index.js","webpack://@jupyterlab/application-top/./node_modules/micromark-util-decode-string/index.js","webpack://@jupyterlab/application-top/./node_modules/unist-util-stringify-position/lib/index.js","webpack://@jupyterlab/application-top/./node_modules/mdast-util-from-markdown/lib/index.js","webpack://@jupyterlab/application-top/./node_modules/mermaid/dist/createText-a48a4c90.js"],"sourcesContent":["/**\n * @typedef {import('mdast').Root|import('mdast').Content} Node\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [includeImageAlt=true]\n *   Whether to use `alt` for `image`s.\n * @property {boolean | null | undefined} [includeHtml=true]\n *   Whether to use `value` of HTML.\n */\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Get the text content of a node or list of nodes.\n *\n * Prefers the node’s plain-text fields, otherwise serializes its children,\n * and if the given value is an array, serialize the nodes in it.\n *\n * @param {unknown} value\n *   Thing to serialize, typically `Node`.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized `value`.\n */\nexport function toString(value, options) {\n  const settings = options || emptyOptions\n  const includeImageAlt =\n    typeof settings.includeImageAlt === 'boolean'\n      ? settings.includeImageAlt\n      : true\n  const includeHtml =\n    typeof settings.includeHtml === 'boolean' ? settings.includeHtml : true\n\n  return one(value, includeImageAlt, includeHtml)\n}\n\n/**\n * One node or several nodes.\n *\n * @param {unknown} value\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized node.\n */\nfunction one(value, includeImageAlt, includeHtml) {\n  if (node(value)) {\n    if ('value' in value) {\n      return value.type === 'html' && !includeHtml ? '' : value.value\n    }\n\n    if (includeImageAlt && 'alt' in value && value.alt) {\n      return value.alt\n    }\n\n    if ('children' in value) {\n      return all(value.children, includeImageAlt, includeHtml)\n    }\n  }\n\n  if (Array.isArray(value)) {\n    return all(value, includeImageAlt, includeHtml)\n  }\n\n  return ''\n}\n\n/**\n * Serialize a list of nodes.\n *\n * @param {Array<unknown>} values\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized nodes.\n */\nfunction all(values, includeImageAlt, includeHtml) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n\n  while (++index < values.length) {\n    result[index] = one(values[index], includeImageAlt, includeHtml)\n  }\n\n  return result.join('')\n}\n\n/**\n * Check if `value` looks like a node.\n *\n * @param {unknown} value\n *   Thing.\n * @returns {value is Node}\n *   Whether `value` is a node.\n */\nfunction node(value) {\n  return Boolean(value && typeof value === 'object')\n}\n","/**\n * Like `Array#splice`, but smarter for giant arrays.\n *\n * `Array#splice` takes all items to be inserted as individual argument which\n * causes a stack overflow in V8 when trying to insert 100k items for instance.\n *\n * Otherwise, this does not return the removed items, and takes `items` as an\n * array instead of rest parameters.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {number} start\n *   Index to remove/insert at (can be negative).\n * @param {number} remove\n *   Number of items to remove.\n * @param {Array<T>} items\n *   Items to inject into `list`.\n * @returns {void}\n *   Nothing.\n */\nexport function splice(list, start, remove, items) {\n  const end = list.length\n  let chunkStart = 0\n  /** @type {Array<unknown>} */\n  let parameters\n\n  // Make start between zero and `end` (included).\n  if (start < 0) {\n    start = -start > end ? 0 : end + start\n  } else {\n    start = start > end ? end : start\n  }\n  remove = remove > 0 ? remove : 0\n\n  // No need to chunk the items if there’s only a couple (10k) items.\n  if (items.length < 10000) {\n    parameters = Array.from(items)\n    parameters.unshift(start, remove)\n    // @ts-expect-error Hush, it’s fine.\n    list.splice(...parameters)\n  } else {\n    // Delete `remove` items starting from `start`\n    if (remove) list.splice(start, remove)\n\n    // Insert the items in chunks to not cause stack overflows.\n    while (chunkStart < items.length) {\n      parameters = items.slice(chunkStart, chunkStart + 10000)\n      parameters.unshift(start, 0)\n      // @ts-expect-error Hush, it’s fine.\n      list.splice(...parameters)\n      chunkStart += 10000\n      start += 10000\n    }\n  }\n}\n\n/**\n * Append `items` (an array) at the end of `list` (another array).\n * When `list` was empty, returns `items` instead.\n *\n * This prevents a potentially expensive operation when `list` is empty,\n * and adds items in batches to prevent V8 from hanging.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {Array<T>} items\n *   Items to add to `list`.\n * @returns {Array<T>}\n *   Either `list` or `items`.\n */\nexport function push(list, items) {\n  if (list.length > 0) {\n    splice(list, list.length, 0, items)\n    return list\n  }\n  return items\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Handles} Handles\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n * @typedef {import('micromark-util-types').NormalizedExtension} NormalizedExtension\n */\n\nimport {splice} from 'micromark-util-chunked'\n\nconst hasOwnProperty = {}.hasOwnProperty\n\n/**\n * Combine multiple syntax extensions into one.\n *\n * @param {Array<Extension>} extensions\n *   List of syntax extensions.\n * @returns {NormalizedExtension}\n *   A single combined extension.\n */\nexport function combineExtensions(extensions) {\n  /** @type {NormalizedExtension} */\n  const all = {}\n  let index = -1\n\n  while (++index < extensions.length) {\n    syntaxExtension(all, extensions[index])\n  }\n\n  return all\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {NormalizedExtension} all\n *   Extension to merge into.\n * @param {Extension} extension\n *   Extension to merge.\n * @returns {void}\n */\nfunction syntaxExtension(all, extension) {\n  /** @type {keyof Extension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    /** @type {Record<string, unknown>} */\n    const left = maybe || (all[hook] = {})\n    /** @type {Record<string, unknown> | undefined} */\n    const right = extension[hook]\n    /** @type {string} */\n    let code\n\n    if (right) {\n      for (code in right) {\n        if (!hasOwnProperty.call(left, code)) left[code] = []\n        const value = right[code]\n        constructs(\n          // @ts-expect-error Looks like a list.\n          left[code],\n          Array.isArray(value) ? value : value ? [value] : []\n        )\n      }\n    }\n  }\n}\n\n/**\n * Merge `list` into `existing` (both lists of constructs).\n * Mutates `existing`.\n *\n * @param {Array<unknown>} existing\n * @param {Array<unknown>} list\n * @returns {void}\n */\nfunction constructs(existing, list) {\n  let index = -1\n  /** @type {Array<unknown>} */\n  const before = []\n\n  while (++index < list.length) {\n    // @ts-expect-error Looks like an object.\n    ;(list[index].add === 'after' ? existing : before).push(list[index])\n  }\n\n  splice(existing, 0, 0, before)\n}\n\n/**\n * Combine multiple HTML extensions into one.\n *\n * @param {Array<HtmlExtension>} htmlExtensions\n *   List of HTML extensions.\n * @returns {HtmlExtension}\n *   A single combined HTML extension.\n */\nexport function combineHtmlExtensions(htmlExtensions) {\n  /** @type {HtmlExtension} */\n  const handlers = {}\n  let index = -1\n\n  while (++index < htmlExtensions.length) {\n    htmlExtension(handlers, htmlExtensions[index])\n  }\n\n  return handlers\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {HtmlExtension} all\n *   Extension to merge into.\n * @param {HtmlExtension} extension\n *   Extension to merge.\n * @returns {void}\n */\nfunction htmlExtension(all, extension) {\n  /** @type {keyof HtmlExtension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    const left = maybe || (all[hook] = {})\n    const right = extension[hook]\n    /** @type {keyof Handles} */\n    let type\n\n    if (right) {\n      for (type in right) {\n        // @ts-expect-error assume document vs regular handler are managed correctly.\n        left[type] = right[type]\n      }\n    }\n  }\n}\n","// This module is generated by `script/`.\n//\n// CommonMark handles attention (emphasis, strong) markers based on what comes\n// before or after them.\n// One such difference is if those characters are Unicode punctuation.\n// This script is generated from the Unicode data.\n\n/**\n * Regular expression that matches a unicode punctuation character.\n */\nexport const unicodePunctuationRegex =\n  /[!-\\/:-@\\[-`\\{-~\\xA1\\xA7\\xAB\\xB6\\xB7\\xBB\\xBF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061D-\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u09FD\\u0A76\\u0AF0\\u0C77\\u0C84\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1B7D\\u1B7E\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2308-\\u230B\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E4F\\u2E52-\\u2E5D\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]/\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport {unicodePunctuationRegex} from './lib/unicode-punctuation-regex.js'\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/)\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/)\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/)\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  )\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/)\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/)\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/)\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32)\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(unicodePunctuationRegex)\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/)\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n * @returns {(code: Code) => boolean}\n */\nfunction regexCheck(regex) {\n  return check\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && regex.test(String.fromCharCode(code))\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {markdownSpace} from 'micromark-util-character'\n\n// To do: implement `spaceOrTab`, `spaceOrTabMinMax`, `spaceOrTabWithOptions`.\n\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   spaces in markdown are often optional, in which case this factory can be\n *     used and `ok` will be switched to whether spaces were found or not\n * *   one line ending or space can be detected with `markdownSpace(code)` right\n *     before using `factorySpace`\n *\n * ###### Examples\n *\n * Where `␉` represents a tab (plus how much it expands) and `␠` represents a\n * single space.\n *\n * ```markdown\n * ␉\n * ␠␠␠␠\n * ␉␠\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {TokenType} type\n *   Type (`' \\t'`).\n * @param {number | undefined} [max=Infinity]\n *   Max (exclusive).\n * @returns\n *   Start state.\n */\nexport function factorySpace(effects, ok, type, max) {\n  const limit = max ? max - 1 : Number.POSITIVE_INFINITY\n  let size = 0\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownSpace(code)) {\n      effects.enter(type)\n      return prefix(code)\n    }\n    return ok(code)\n  }\n\n  /** @type {State} */\n  function prefix(code) {\n    if (markdownSpace(code) && size++ < limit) {\n      effects.consume(code)\n      return prefix\n    }\n    effects.exit(type)\n    return ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {InitialConstruct} */\nexport const content = {\n  tokenize: initializeContent\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeContent(effects) {\n  const contentStart = effects.attempt(\n    this.parser.constructs.contentInitial,\n    afterContentStartConstruct,\n    paragraphInitial\n  )\n  /** @type {Token} */\n  let previous\n  return contentStart\n\n  /** @type {State} */\n  function afterContentStartConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, contentStart, 'linePrefix')\n  }\n\n  /** @type {State} */\n  function paragraphInitial(code) {\n    effects.enter('paragraph')\n    return lineStart(code)\n  }\n\n  /** @type {State} */\n  function lineStart(code) {\n    const token = effects.enter('chunkText', {\n      contentType: 'text',\n      previous\n    })\n    if (previous) {\n      previous.next = token\n    }\n    previous = token\n    return data(code)\n  }\n\n  /** @type {State} */\n  function data(code) {\n    if (code === null) {\n      effects.exit('chunkText')\n      effects.exit('paragraph')\n      effects.consume(code)\n      return\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      effects.exit('chunkText')\n      return lineStart\n    }\n\n    // Data.\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ContainerState} ContainerState\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\n/**\n * @typedef {[Construct, ContainerState]} StackItem\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n/** @type {InitialConstruct} */\nexport const document = {\n  tokenize: initializeDocument\n}\n\n/** @type {Construct} */\nconst containerConstruct = {\n  tokenize: tokenizeContainer\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeDocument(effects) {\n  const self = this\n  /** @type {Array<StackItem>} */\n  const stack = []\n  let continued = 0\n  /** @type {TokenizeContext | undefined} */\n  let childFlow\n  /** @type {Token | undefined} */\n  let childToken\n  /** @type {number} */\n  let lineStartOffset\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    // First we iterate through the open blocks, starting with the root\n    // document, and descending through last children down to the last open\n    // block.\n    // Each block imposes a condition that the line must satisfy if the block is\n    // to remain open.\n    // For example, a block quote requires a `>` character.\n    // A paragraph requires a non-blank line.\n    // In this phase we may match all or just some of the open blocks.\n    // But we cannot close unmatched blocks yet, because we may have a lazy\n    // continuation line.\n    if (continued < stack.length) {\n      const item = stack[continued]\n      self.containerState = item[1]\n      return effects.attempt(\n        item[0].continuation,\n        documentContinue,\n        checkNewContainers\n      )(code)\n    }\n\n    // Done.\n    return checkNewContainers(code)\n  }\n\n  /** @type {State} */\n  function documentContinue(code) {\n    continued++\n\n    // Note: this field is called `_closeFlow` but it also closes containers.\n    // Perhaps a good idea to rename it but it’s already used in the wild by\n    // extensions.\n    if (self.containerState._closeFlow) {\n      self.containerState._closeFlow = undefined\n      if (childFlow) {\n        closeFlow()\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when dealing with lazy lines in `writeToChild`.\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {Point | undefined} */\n      let point\n\n      // Find the flow chunk.\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          point = self.events[indexBeforeFlow][1].end\n          break\n        }\n      }\n      exitContainers(continued)\n\n      // Fix positions.\n      let index = indexBeforeExits\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      )\n\n      // Discard the duplicate exits.\n      self.events.length = index\n      return checkNewContainers(code)\n    }\n    return start(code)\n  }\n\n  /** @type {State} */\n  function checkNewContainers(code) {\n    // Next, after consuming the continuation markers for existing blocks, we\n    // look for new block starts (e.g. `>` for a block quote).\n    // If we encounter a new block start, we close any blocks unmatched in\n    // step 1 before creating the new block as a child of the last matched\n    // block.\n    if (continued === stack.length) {\n      // No need to `check` whether there’s a container, of `exitContainers`\n      // would be moot.\n      // We can instead immediately `attempt` to parse one.\n      if (!childFlow) {\n        return documentContinued(code)\n      }\n\n      // If we have concrete content, such as block HTML or fenced code,\n      // we can’t have containers “pierce” into them, so we can immediately\n      // start.\n      if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {\n        return flowStart(code)\n      }\n\n      // If we do have flow, it could still be a blank line,\n      // but we’d be interrupting it w/ a new container if there’s a current\n      // construct.\n      // To do: next major: remove `_gfmTableDynamicInterruptHack` (no longer\n      // needed in micromark-extension-gfm-table@1.0.6).\n      self.interrupt = Boolean(\n        childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack\n      )\n    }\n\n    // Check if there is a new container.\n    self.containerState = {}\n    return effects.check(\n      containerConstruct,\n      thereIsANewContainer,\n      thereIsNoNewContainer\n    )(code)\n  }\n\n  /** @type {State} */\n  function thereIsANewContainer(code) {\n    if (childFlow) closeFlow()\n    exitContainers(continued)\n    return documentContinued(code)\n  }\n\n  /** @type {State} */\n  function thereIsNoNewContainer(code) {\n    self.parser.lazy[self.now().line] = continued !== stack.length\n    lineStartOffset = self.now().offset\n    return flowStart(code)\n  }\n\n  /** @type {State} */\n  function documentContinued(code) {\n    // Try new containers.\n    self.containerState = {}\n    return effects.attempt(\n      containerConstruct,\n      containerContinue,\n      flowStart\n    )(code)\n  }\n\n  /** @type {State} */\n  function containerContinue(code) {\n    continued++\n    stack.push([self.currentConstruct, self.containerState])\n    // Try another.\n    return documentContinued(code)\n  }\n\n  /** @type {State} */\n  function flowStart(code) {\n    if (code === null) {\n      if (childFlow) closeFlow()\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n    childFlow = childFlow || self.parser.flow(self.now())\n    effects.enter('chunkFlow', {\n      contentType: 'flow',\n      previous: childToken,\n      _tokenizer: childFlow\n    })\n    return flowContinue(code)\n  }\n\n  /** @type {State} */\n  function flowContinue(code) {\n    if (code === null) {\n      writeToChild(effects.exit('chunkFlow'), true)\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      writeToChild(effects.exit('chunkFlow'))\n      // Get ready for the next line.\n      continued = 0\n      self.interrupt = undefined\n      return start\n    }\n    effects.consume(code)\n    return flowContinue\n  }\n\n  /**\n   * @param {Token} token\n   * @param {boolean | undefined} [eof]\n   * @returns {void}\n   */\n  function writeToChild(token, eof) {\n    const stream = self.sliceStream(token)\n    if (eof) stream.push(null)\n    token.previous = childToken\n    if (childToken) childToken.next = token\n    childToken = token\n    childFlow.defineSkip(token.start)\n    childFlow.write(stream)\n\n    // Alright, so we just added a lazy line:\n    //\n    // ```markdown\n    // > a\n    // b.\n    //\n    // Or:\n    //\n    // > ~~~c\n    // d\n    //\n    // Or:\n    //\n    // > | e |\n    // f\n    // ```\n    //\n    // The construct in the second example (fenced code) does not accept lazy\n    // lines, so it marked itself as done at the end of its first line, and\n    // then the content construct parses `d`.\n    // Most constructs in markdown match on the first line: if the first line\n    // forms a construct, a non-lazy line can’t “unmake” it.\n    //\n    // The construct in the third example is potentially a GFM table, and\n    // those are *weird*.\n    // It *could* be a table, from the first line, if the following line\n    // matches a condition.\n    // In this case, that second line is lazy, which “unmakes” the first line\n    // and turns the whole into one content block.\n    //\n    // We’ve now parsed the non-lazy and the lazy line, and can figure out\n    // whether the lazy line started a new flow block.\n    // If it did, we exit the current containers between the two flow blocks.\n    if (self.parser.lazy[token.start.line]) {\n      let index = childFlow.events.length\n      while (index--) {\n        if (\n          // The token starts before the line ending…\n          childFlow.events[index][1].start.offset < lineStartOffset &&\n          // …and either is not ended yet…\n          (!childFlow.events[index][1].end ||\n            // …or ends after it.\n            childFlow.events[index][1].end.offset > lineStartOffset)\n        ) {\n          // Exit: there’s still something open, which means it’s a lazy line\n          // part of something.\n          return\n        }\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when closing flow in `documentContinue`.\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {boolean | undefined} */\n      let seen\n      /** @type {Point | undefined} */\n      let point\n\n      // Find the previous chunk (the one before the lazy line).\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          if (seen) {\n            point = self.events[indexBeforeFlow][1].end\n            break\n          }\n          seen = true\n        }\n      }\n      exitContainers(continued)\n\n      // Fix positions.\n      index = indexBeforeExits\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      )\n\n      // Discard the duplicate exits.\n      self.events.length = index\n    }\n  }\n\n  /**\n   * @param {number} size\n   * @returns {void}\n   */\n  function exitContainers(size) {\n    let index = stack.length\n\n    // Exit open containers.\n    while (index-- > size) {\n      const entry = stack[index]\n      self.containerState = entry[1]\n      entry[0].exit.call(self, effects)\n    }\n    stack.length = size\n  }\n  function closeFlow() {\n    childFlow.write([null])\n    childToken = undefined\n    childFlow = undefined\n    self.containerState._closeFlow = undefined\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContainer(effects, ok, nok) {\n  // Always populated by defaults.\n\n  return factorySpace(\n    effects,\n    effects.attempt(this.parser.constructs.document, ok, nok),\n    'linePrefix',\n    this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const blankLine = {\n  tokenize: tokenizeBlankLine,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLine(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of blank line.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *     ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, after, 'linePrefix')(code)\n      : after(code)\n  }\n\n  /**\n   * At eof/eol, after optional whitespace.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *       ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Token} Token\n */\n\nimport {splice} from 'micromark-util-chunked'\n/**\n * Tokenize subcontent.\n *\n * @param {Array<Event>} events\n *   List of events.\n * @returns {boolean}\n *   Whether subtokens were found.\n */\nexport function subtokenize(events) {\n  /** @type {Record<string, number>} */\n  const jumps = {}\n  let index = -1\n  /** @type {Event} */\n  let event\n  /** @type {number | undefined} */\n  let lineIndex\n  /** @type {number} */\n  let otherIndex\n  /** @type {Event} */\n  let otherEvent\n  /** @type {Array<Event>} */\n  let parameters\n  /** @type {Array<Event>} */\n  let subevents\n  /** @type {boolean | undefined} */\n  let more\n  while (++index < events.length) {\n    while (index in jumps) {\n      index = jumps[index]\n    }\n    event = events[index]\n\n    // Add a hook for the GFM tasklist extension, which needs to know if text\n    // is in the first content of a list item.\n    if (\n      index &&\n      event[1].type === 'chunkFlow' &&\n      events[index - 1][1].type === 'listItemPrefix'\n    ) {\n      subevents = event[1]._tokenizer.events\n      otherIndex = 0\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === 'lineEndingBlank'\n      ) {\n        otherIndex += 2\n      }\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === 'content'\n      ) {\n        while (++otherIndex < subevents.length) {\n          if (subevents[otherIndex][1].type === 'content') {\n            break\n          }\n          if (subevents[otherIndex][1].type === 'chunkText') {\n            subevents[otherIndex][1]._isInFirstContentOfListItem = true\n            otherIndex++\n          }\n        }\n      }\n    }\n\n    // Enter.\n    if (event[0] === 'enter') {\n      if (event[1].contentType) {\n        Object.assign(jumps, subcontent(events, index))\n        index = jumps[index]\n        more = true\n      }\n    }\n    // Exit.\n    else if (event[1]._container) {\n      otherIndex = index\n      lineIndex = undefined\n      while (otherIndex--) {\n        otherEvent = events[otherIndex]\n        if (\n          otherEvent[1].type === 'lineEnding' ||\n          otherEvent[1].type === 'lineEndingBlank'\n        ) {\n          if (otherEvent[0] === 'enter') {\n            if (lineIndex) {\n              events[lineIndex][1].type = 'lineEndingBlank'\n            }\n            otherEvent[1].type = 'lineEnding'\n            lineIndex = otherIndex\n          }\n        } else {\n          break\n        }\n      }\n      if (lineIndex) {\n        // Fix position.\n        event[1].end = Object.assign({}, events[lineIndex][1].start)\n\n        // Switch container exit w/ line endings.\n        parameters = events.slice(lineIndex, index)\n        parameters.unshift(event)\n        splice(events, lineIndex, index - lineIndex + 1, parameters)\n      }\n    }\n  }\n  return !more\n}\n\n/**\n * Tokenize embedded tokens.\n *\n * @param {Array<Event>} events\n * @param {number} eventIndex\n * @returns {Record<string, number>}\n */\nfunction subcontent(events, eventIndex) {\n  const token = events[eventIndex][1]\n  const context = events[eventIndex][2]\n  let startPosition = eventIndex - 1\n  /** @type {Array<number>} */\n  const startPositions = []\n  const tokenizer =\n    token._tokenizer || context.parser[token.contentType](token.start)\n  const childEvents = tokenizer.events\n  /** @type {Array<[number, number]>} */\n  const jumps = []\n  /** @type {Record<string, number>} */\n  const gaps = {}\n  /** @type {Array<Chunk>} */\n  let stream\n  /** @type {Token | undefined} */\n  let previous\n  let index = -1\n  /** @type {Token | undefined} */\n  let current = token\n  let adjust = 0\n  let start = 0\n  const breaks = [start]\n\n  // Loop forward through the linked tokens to pass them in order to the\n  // subtokenizer.\n  while (current) {\n    // Find the position of the event for this token.\n    while (events[++startPosition][1] !== current) {\n      // Empty.\n    }\n    startPositions.push(startPosition)\n    if (!current._tokenizer) {\n      stream = context.sliceStream(current)\n      if (!current.next) {\n        stream.push(null)\n      }\n      if (previous) {\n        tokenizer.defineSkip(current.start)\n      }\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = true\n      }\n      tokenizer.write(stream)\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = undefined\n      }\n    }\n\n    // Unravel the next token.\n    previous = current\n    current = current.next\n  }\n\n  // Now, loop back through all events (and linked tokens), to figure out which\n  // parts belong where.\n  current = token\n  while (++index < childEvents.length) {\n    if (\n      // Find a void token that includes a break.\n      childEvents[index][0] === 'exit' &&\n      childEvents[index - 1][0] === 'enter' &&\n      childEvents[index][1].type === childEvents[index - 1][1].type &&\n      childEvents[index][1].start.line !== childEvents[index][1].end.line\n    ) {\n      start = index + 1\n      breaks.push(start)\n      // Help GC.\n      current._tokenizer = undefined\n      current.previous = undefined\n      current = current.next\n    }\n  }\n\n  // Help GC.\n  tokenizer.events = []\n\n  // If there’s one more token (which is the cases for lines that end in an\n  // EOF), that’s perfect: the last point we found starts it.\n  // If there isn’t then make sure any remaining content is added to it.\n  if (current) {\n    // Help GC.\n    current._tokenizer = undefined\n    current.previous = undefined\n  } else {\n    breaks.pop()\n  }\n\n  // Now splice the events from the subtokenizer into the current events,\n  // moving back to front so that splice indices aren’t affected.\n  index = breaks.length\n  while (index--) {\n    const slice = childEvents.slice(breaks[index], breaks[index + 1])\n    const start = startPositions.pop()\n    jumps.unshift([start, start + slice.length - 1])\n    splice(events, start, 2, slice)\n  }\n  index = -1\n  while (++index < jumps.length) {\n    gaps[adjust + jumps[index][0]] = adjust + jumps[index][1]\n    adjust += jumps[index][1] - jumps[index][0] - 1\n  }\n  return gaps\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {subtokenize} from 'micromark-util-subtokenize'\n/**\n * No name because it must not be turned off.\n * @type {Construct}\n */\nexport const content = {\n  tokenize: tokenizeContent,\n  resolve: resolveContent\n}\n\n/** @type {Construct} */\nconst continuationConstruct = {\n  tokenize: tokenizeContinuation,\n  partial: true\n}\n\n/**\n * Content is transparent: it’s parsed right now. That way, definitions are also\n * parsed right now: before text in paragraphs (specifically, media) are parsed.\n *\n * @type {Resolver}\n */\nfunction resolveContent(events) {\n  subtokenize(events)\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContent(effects, ok) {\n  /** @type {Token | undefined} */\n  let previous\n  return chunkStart\n\n  /**\n   * Before a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkStart(code) {\n    effects.enter('content')\n    previous = effects.enter('chunkContent', {\n      contentType: 'content'\n    })\n    return chunkInside(code)\n  }\n\n  /**\n   * In a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkInside(code) {\n    if (code === null) {\n      return contentEnd(code)\n    }\n\n    // To do: in `markdown-rs`, each line is parsed on its own, and everything\n    // is stitched together resolving.\n    if (markdownLineEnding(code)) {\n      return effects.check(\n        continuationConstruct,\n        contentContinue,\n        contentEnd\n      )(code)\n    }\n\n    // Data.\n    effects.consume(code)\n    return chunkInside\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentEnd(code) {\n    effects.exit('chunkContent')\n    effects.exit('content')\n    return ok(code)\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentContinue(code) {\n    effects.consume(code)\n    effects.exit('chunkContent')\n    previous.next = effects.enter('chunkContent', {\n      contentType: 'content',\n      previous\n    })\n    previous = previous.next\n    return chunkInside\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContinuation(effects, ok, nok) {\n  const self = this\n  return startLookahead\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function startLookahead(code) {\n    effects.exit('chunkContent')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, prefixed, 'linePrefix')\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function prefixed(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n\n    // Always populated by defaults.\n\n    const tail = self.events[self.events.length - 1]\n    if (\n      !self.parser.constructs.disable.null.includes('codeIndented') &&\n      tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n    ) {\n      return ok(code)\n    }\n    return effects.interrupt(self.parser.constructs.flow, nok, ok)(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nimport {blankLine, content} from 'micromark-core-commonmark'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {InitialConstruct} */\nexport const flow = {\n  tokenize: initializeFlow\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeFlow(effects) {\n  const self = this\n  const initial = effects.attempt(\n    // Try to parse a blank line.\n    blankLine,\n    atBlankEnding,\n    // Try to parse initial flow (essentially, only code).\n    effects.attempt(\n      this.parser.constructs.flowInitial,\n      afterConstruct,\n      factorySpace(\n        effects,\n        effects.attempt(\n          this.parser.constructs.flow,\n          afterConstruct,\n          effects.attempt(content, afterConstruct)\n        ),\n        'linePrefix'\n      )\n    )\n  )\n  return initial\n\n  /** @type {State} */\n  function atBlankEnding(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEndingBlank')\n    effects.consume(code)\n    effects.exit('lineEndingBlank')\n    self.currentConstruct = undefined\n    return initial\n  }\n\n  /** @type {State} */\n  function afterConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    self.currentConstruct = undefined\n    return initial\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nexport const resolver = {\n  resolveAll: createResolver()\n}\nexport const string = initializeFactory('string')\nexport const text = initializeFactory('text')\n\n/**\n * @param {'string' | 'text'} field\n * @returns {InitialConstruct}\n */\nfunction initializeFactory(field) {\n  return {\n    tokenize: initializeText,\n    resolveAll: createResolver(\n      field === 'text' ? resolveAllLineSuffixes : undefined\n    )\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Initializer}\n   */\n  function initializeText(effects) {\n    const self = this\n    const constructs = this.parser.constructs[field]\n    const text = effects.attempt(constructs, start, notText)\n    return start\n\n    /** @type {State} */\n    function start(code) {\n      return atBreak(code) ? text(code) : notText(code)\n    }\n\n    /** @type {State} */\n    function notText(code) {\n      if (code === null) {\n        effects.consume(code)\n        return\n      }\n      effects.enter('data')\n      effects.consume(code)\n      return data\n    }\n\n    /** @type {State} */\n    function data(code) {\n      if (atBreak(code)) {\n        effects.exit('data')\n        return text(code)\n      }\n\n      // Data.\n      effects.consume(code)\n      return data\n    }\n\n    /**\n     * @param {Code} code\n     * @returns {boolean}\n     */\n    function atBreak(code) {\n      if (code === null) {\n        return true\n      }\n      const list = constructs[code]\n      let index = -1\n      if (list) {\n        // Always populated by defaults.\n\n        while (++index < list.length) {\n          const item = list[index]\n          if (!item.previous || item.previous.call(self, self.previous)) {\n            return true\n          }\n        }\n      }\n      return false\n    }\n  }\n}\n\n/**\n * @param {Resolver | undefined} [extraResolver]\n * @returns {Resolver}\n */\nfunction createResolver(extraResolver) {\n  return resolveAllText\n\n  /** @type {Resolver} */\n  function resolveAllText(events, context) {\n    let index = -1\n    /** @type {number | undefined} */\n    let enter\n\n    // A rather boring computation (to merge adjacent `data` events) which\n    // improves mm performance by 29%.\n    while (++index <= events.length) {\n      if (enter === undefined) {\n        if (events[index] && events[index][1].type === 'data') {\n          enter = index\n          index++\n        }\n      } else if (!events[index] || events[index][1].type !== 'data') {\n        // Don’t do anything if there is one data token.\n        if (index !== enter + 2) {\n          events[enter][1].end = events[index - 1][1].end\n          events.splice(enter + 2, index - enter - 2)\n          index = enter + 2\n        }\n        enter = undefined\n      }\n    }\n    return extraResolver ? extraResolver(events, context) : events\n  }\n}\n\n/**\n * A rather ugly set of instructions which again looks at chunks in the input\n * stream.\n * The reason to do this here is that it is *much* faster to parse in reverse.\n * And that we can’t hook into `null` to split the line suffix before an EOF.\n * To do: figure out if we can make this into a clean utility, or even in core.\n * As it will be useful for GFMs literal autolink extension (and maybe even\n * tables?)\n *\n * @type {Resolver}\n */\nfunction resolveAllLineSuffixes(events, context) {\n  let eventIndex = 0 // Skip first.\n\n  while (++eventIndex <= events.length) {\n    if (\n      (eventIndex === events.length ||\n        events[eventIndex][1].type === 'lineEnding') &&\n      events[eventIndex - 1][1].type === 'data'\n    ) {\n      const data = events[eventIndex - 1][1]\n      const chunks = context.sliceStream(data)\n      let index = chunks.length\n      let bufferIndex = -1\n      let size = 0\n      /** @type {boolean | undefined} */\n      let tabs\n      while (index--) {\n        const chunk = chunks[index]\n        if (typeof chunk === 'string') {\n          bufferIndex = chunk.length\n          while (chunk.charCodeAt(bufferIndex - 1) === 32) {\n            size++\n            bufferIndex--\n          }\n          if (bufferIndex) break\n          bufferIndex = -1\n        }\n        // Number\n        else if (chunk === -2) {\n          tabs = true\n          size++\n        } else if (chunk === -1) {\n          // Empty\n        } else {\n          // Replacement character, exit.\n          index++\n          break\n        }\n      }\n      if (size) {\n        const token = {\n          type:\n            eventIndex === events.length || tabs || size < 2\n              ? 'lineSuffix'\n              : 'hardBreakTrailing',\n          start: {\n            line: data.end.line,\n            column: data.end.column - size,\n            offset: data.end.offset - size,\n            _index: data.start._index + index,\n            _bufferIndex: index\n              ? bufferIndex\n              : data.start._bufferIndex + bufferIndex\n          },\n          end: Object.assign({}, data.end)\n        }\n        data.end = Object.assign({}, token.start)\n        if (data.start.offset === data.end.offset) {\n          Object.assign(data, token)\n        } else {\n          events.splice(\n            eventIndex,\n            0,\n            ['enter', token, context],\n            ['exit', token, context]\n          )\n          eventIndex += 2\n        }\n      }\n      eventIndex++\n    }\n  }\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\n/**\n * Call all `resolveAll`s.\n *\n * @param {Array<{resolveAll?: Resolver | undefined}>} constructs\n *   List of constructs, optionally with `resolveAll`s.\n * @param {Array<Event>} events\n *   List of events.\n * @param {TokenizeContext} context\n *   Context used by `tokenize`.\n * @returns {Array<Event>}\n *   Changed events.\n */\nexport function resolveAll(constructs, events, context) {\n  /** @type {Array<Resolver>} */\n  const called = []\n  let index = -1\n\n  while (++index < constructs.length) {\n    const resolve = constructs[index].resolveAll\n\n    if (resolve && !called.includes(resolve)) {\n      events = resolve(events, context)\n      called.push(resolve)\n    }\n  }\n\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenType} TokenType\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\n/**\n * @callback Restore\n * @returns {void}\n *\n * @typedef Info\n * @property {Restore} restore\n * @property {number} from\n *\n * @callback ReturnHandle\n *   Handle a successful run.\n * @param {Construct} construct\n * @param {Info} info\n * @returns {void}\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/**\n * Create a tokenizer.\n * Tokenizers deal with one type of data (e.g., containers, flow, text).\n * The parser is the object dealing with it all.\n * `initialize` works like other constructs, except that only its `tokenize`\n * function is used, in which case it doesn’t receive an `ok` or `nok`.\n * `from` can be given to set the point before the first character, although\n * when further lines are indented, they must be set with `defineSkip`.\n *\n * @param {ParseContext} parser\n * @param {InitialConstruct} initialize\n * @param {Omit<Point, '_bufferIndex' | '_index'> | undefined} [from]\n * @returns {TokenizeContext}\n */\nexport function createTokenizer(parser, initialize, from) {\n  /** @type {Point} */\n  let point = Object.assign(\n    from\n      ? Object.assign({}, from)\n      : {\n          line: 1,\n          column: 1,\n          offset: 0\n        },\n    {\n      _index: 0,\n      _bufferIndex: -1\n    }\n  )\n  /** @type {Record<string, number>} */\n  const columnStart = {}\n  /** @type {Array<Construct>} */\n  const resolveAllConstructs = []\n  /** @type {Array<Chunk>} */\n  let chunks = []\n  /** @type {Array<Token>} */\n  let stack = []\n  /** @type {boolean | undefined} */\n  let consumed = true\n\n  /**\n   * Tools used for tokenizing.\n   *\n   * @type {Effects}\n   */\n  const effects = {\n    consume,\n    enter,\n    exit,\n    attempt: constructFactory(onsuccessfulconstruct),\n    check: constructFactory(onsuccessfulcheck),\n    interrupt: constructFactory(onsuccessfulcheck, {\n      interrupt: true\n    })\n  }\n\n  /**\n   * State and tools for resolving and serializing.\n   *\n   * @type {TokenizeContext}\n   */\n  const context = {\n    previous: null,\n    code: null,\n    containerState: {},\n    events: [],\n    parser,\n    sliceStream,\n    sliceSerialize,\n    now,\n    defineSkip,\n    write\n  }\n\n  /**\n   * The state function.\n   *\n   * @type {State | void}\n   */\n  let state = initialize.tokenize.call(context, effects)\n\n  /**\n   * Track which character we expect to be consumed, to catch bugs.\n   *\n   * @type {Code}\n   */\n  let expectedCode\n  if (initialize.resolveAll) {\n    resolveAllConstructs.push(initialize)\n  }\n  return context\n\n  /** @type {TokenizeContext['write']} */\n  function write(slice) {\n    chunks = push(chunks, slice)\n    main()\n\n    // Exit if we’re not done, resolve might change stuff.\n    if (chunks[chunks.length - 1] !== null) {\n      return []\n    }\n    addResult(initialize, 0)\n\n    // Otherwise, resolve, and exit.\n    context.events = resolveAll(resolveAllConstructs, context.events, context)\n    return context.events\n  }\n\n  //\n  // Tools.\n  //\n\n  /** @type {TokenizeContext['sliceSerialize']} */\n  function sliceSerialize(token, expandTabs) {\n    return serializeChunks(sliceStream(token), expandTabs)\n  }\n\n  /** @type {TokenizeContext['sliceStream']} */\n  function sliceStream(token) {\n    return sliceChunks(chunks, token)\n  }\n\n  /** @type {TokenizeContext['now']} */\n  function now() {\n    // This is a hot path, so we clone manually instead of `Object.assign({}, point)`\n    const {line, column, offset, _index, _bufferIndex} = point\n    return {\n      line,\n      column,\n      offset,\n      _index,\n      _bufferIndex\n    }\n  }\n\n  /** @type {TokenizeContext['defineSkip']} */\n  function defineSkip(value) {\n    columnStart[value.line] = value.column\n    accountForPotentialSkip()\n  }\n\n  //\n  // State management.\n  //\n\n  /**\n   * Main loop (note that `_index` and `_bufferIndex` in `point` are modified by\n   * `consume`).\n   * Here is where we walk through the chunks, which either include strings of\n   * several characters, or numerical character codes.\n   * The reason to do this in a loop instead of a call is so the stack can\n   * drain.\n   *\n   * @returns {void}\n   */\n  function main() {\n    /** @type {number} */\n    let chunkIndex\n    while (point._index < chunks.length) {\n      const chunk = chunks[point._index]\n\n      // If we’re in a buffer chunk, loop through it.\n      if (typeof chunk === 'string') {\n        chunkIndex = point._index\n        if (point._bufferIndex < 0) {\n          point._bufferIndex = 0\n        }\n        while (\n          point._index === chunkIndex &&\n          point._bufferIndex < chunk.length\n        ) {\n          go(chunk.charCodeAt(point._bufferIndex))\n        }\n      } else {\n        go(chunk)\n      }\n    }\n  }\n\n  /**\n   * Deal with one code.\n   *\n   * @param {Code} code\n   * @returns {void}\n   */\n  function go(code) {\n    consumed = undefined\n    expectedCode = code\n    state = state(code)\n  }\n\n  /** @type {Effects['consume']} */\n  function consume(code) {\n    if (markdownLineEnding(code)) {\n      point.line++\n      point.column = 1\n      point.offset += code === -3 ? 2 : 1\n      accountForPotentialSkip()\n    } else if (code !== -1) {\n      point.column++\n      point.offset++\n    }\n\n    // Not in a string chunk.\n    if (point._bufferIndex < 0) {\n      point._index++\n    } else {\n      point._bufferIndex++\n\n      // At end of string chunk.\n      // @ts-expect-error Points w/ non-negative `_bufferIndex` reference\n      // strings.\n      if (point._bufferIndex === chunks[point._index].length) {\n        point._bufferIndex = -1\n        point._index++\n      }\n    }\n\n    // Expose the previous character.\n    context.previous = code\n\n    // Mark as consumed.\n    consumed = true\n  }\n\n  /** @type {Effects['enter']} */\n  function enter(type, fields) {\n    /** @type {Token} */\n    // @ts-expect-error Patch instead of assign required fields to help GC.\n    const token = fields || {}\n    token.type = type\n    token.start = now()\n    context.events.push(['enter', token, context])\n    stack.push(token)\n    return token\n  }\n\n  /** @type {Effects['exit']} */\n  function exit(type) {\n    const token = stack.pop()\n    token.end = now()\n    context.events.push(['exit', token, context])\n    return token\n  }\n\n  /**\n   * Use results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulconstruct(construct, info) {\n    addResult(construct, info.from)\n  }\n\n  /**\n   * Discard results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulcheck(_, info) {\n    info.restore()\n  }\n\n  /**\n   * Factory to attempt/check/interrupt.\n   *\n   * @param {ReturnHandle} onreturn\n   * @param {{interrupt?: boolean | undefined} | undefined} [fields]\n   */\n  function constructFactory(onreturn, fields) {\n    return hook\n\n    /**\n     * Handle either an object mapping codes to constructs, a list of\n     * constructs, or a single construct.\n     *\n     * @param {Array<Construct> | Construct | ConstructRecord} constructs\n     * @param {State} returnState\n     * @param {State | undefined} [bogusState]\n     * @returns {State}\n     */\n    function hook(constructs, returnState, bogusState) {\n      /** @type {Array<Construct>} */\n      let listOfConstructs\n      /** @type {number} */\n      let constructIndex\n      /** @type {Construct} */\n      let currentConstruct\n      /** @type {Info} */\n      let info\n      return Array.isArray(constructs) /* c8 ignore next 1 */\n        ? handleListOfConstructs(constructs)\n        : 'tokenize' in constructs\n        ? // @ts-expect-error Looks like a construct.\n          handleListOfConstructs([constructs])\n        : handleMapOfConstructs(constructs)\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ConstructRecord} map\n       * @returns {State}\n       */\n      function handleMapOfConstructs(map) {\n        return start\n\n        /** @type {State} */\n        function start(code) {\n          const def = code !== null && map[code]\n          const all = code !== null && map.null\n          const list = [\n            // To do: add more extension tests.\n            /* c8 ignore next 2 */\n            ...(Array.isArray(def) ? def : def ? [def] : []),\n            ...(Array.isArray(all) ? all : all ? [all] : [])\n          ]\n          return handleListOfConstructs(list)(code)\n        }\n      }\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {Array<Construct>} list\n       * @returns {State}\n       */\n      function handleListOfConstructs(list) {\n        listOfConstructs = list\n        constructIndex = 0\n        if (list.length === 0) {\n          return bogusState\n        }\n        return handleConstruct(list[constructIndex])\n      }\n\n      /**\n       * Handle a single construct.\n       *\n       * @param {Construct} construct\n       * @returns {State}\n       */\n      function handleConstruct(construct) {\n        return start\n\n        /** @type {State} */\n        function start(code) {\n          // To do: not needed to store if there is no bogus state, probably?\n          // Currently doesn’t work because `inspect` in document does a check\n          // w/o a bogus, which doesn’t make sense. But it does seem to help perf\n          // by not storing.\n          info = store()\n          currentConstruct = construct\n          if (!construct.partial) {\n            context.currentConstruct = construct\n          }\n\n          // Always populated by defaults.\n\n          if (\n            construct.name &&\n            context.parser.constructs.disable.null.includes(construct.name)\n          ) {\n            return nok(code)\n          }\n          return construct.tokenize.call(\n            // If we do have fields, create an object w/ `context` as its\n            // prototype.\n            // This allows a “live binding”, which is needed for `interrupt`.\n            fields ? Object.assign(Object.create(context), fields) : context,\n            effects,\n            ok,\n            nok\n          )(code)\n        }\n      }\n\n      /** @type {State} */\n      function ok(code) {\n        consumed = true\n        onreturn(currentConstruct, info)\n        return returnState\n      }\n\n      /** @type {State} */\n      function nok(code) {\n        consumed = true\n        info.restore()\n        if (++constructIndex < listOfConstructs.length) {\n          return handleConstruct(listOfConstructs[constructIndex])\n        }\n        return bogusState\n      }\n    }\n  }\n\n  /**\n   * @param {Construct} construct\n   * @param {number} from\n   * @returns {void}\n   */\n  function addResult(construct, from) {\n    if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {\n      resolveAllConstructs.push(construct)\n    }\n    if (construct.resolve) {\n      splice(\n        context.events,\n        from,\n        context.events.length - from,\n        construct.resolve(context.events.slice(from), context)\n      )\n    }\n    if (construct.resolveTo) {\n      context.events = construct.resolveTo(context.events, context)\n    }\n  }\n\n  /**\n   * Store state.\n   *\n   * @returns {Info}\n   */\n  function store() {\n    const startPoint = now()\n    const startPrevious = context.previous\n    const startCurrentConstruct = context.currentConstruct\n    const startEventsIndex = context.events.length\n    const startStack = Array.from(stack)\n    return {\n      restore,\n      from: startEventsIndex\n    }\n\n    /**\n     * Restore state.\n     *\n     * @returns {void}\n     */\n    function restore() {\n      point = startPoint\n      context.previous = startPrevious\n      context.currentConstruct = startCurrentConstruct\n      context.events.length = startEventsIndex\n      stack = startStack\n      accountForPotentialSkip()\n    }\n  }\n\n  /**\n   * Move the current point a bit forward in the line when it’s on a column\n   * skip.\n   *\n   * @returns {void}\n   */\n  function accountForPotentialSkip() {\n    if (point.line in columnStart && point.column < 2) {\n      point.column = columnStart[point.line]\n      point.offset += columnStart[point.line] - 1\n    }\n  }\n}\n\n/**\n * Get the chunks from a slice of chunks in the range of a token.\n *\n * @param {Array<Chunk>} chunks\n * @param {Pick<Token, 'end' | 'start'>} token\n * @returns {Array<Chunk>}\n */\nfunction sliceChunks(chunks, token) {\n  const startIndex = token.start._index\n  const startBufferIndex = token.start._bufferIndex\n  const endIndex = token.end._index\n  const endBufferIndex = token.end._bufferIndex\n  /** @type {Array<Chunk>} */\n  let view\n  if (startIndex === endIndex) {\n    // @ts-expect-error `_bufferIndex` is used on string chunks.\n    view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)]\n  } else {\n    view = chunks.slice(startIndex, endIndex)\n    if (startBufferIndex > -1) {\n      const head = view[0]\n      if (typeof head === 'string') {\n        view[0] = head.slice(startBufferIndex)\n      } else {\n        view.shift()\n      }\n    }\n    if (endBufferIndex > 0) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view.push(chunks[endIndex].slice(0, endBufferIndex))\n    }\n  }\n  return view\n}\n\n/**\n * Get the string value of a slice of chunks.\n *\n * @param {Array<Chunk>} chunks\n * @param {boolean | undefined} [expandTabs=false]\n * @returns {string}\n */\nfunction serializeChunks(chunks, expandTabs) {\n  let index = -1\n  /** @type {Array<string>} */\n  const result = []\n  /** @type {boolean | undefined} */\n  let atTab\n  while (++index < chunks.length) {\n    const chunk = chunks[index]\n    /** @type {string} */\n    let value\n    if (typeof chunk === 'string') {\n      value = chunk\n    } else\n      switch (chunk) {\n        case -5: {\n          value = '\\r'\n          break\n        }\n        case -4: {\n          value = '\\n'\n          break\n        }\n        case -3: {\n          value = '\\r' + '\\n'\n          break\n        }\n        case -2: {\n          value = expandTabs ? ' ' : '\\t'\n          break\n        }\n        case -1: {\n          if (!expandTabs && atTab) continue\n          value = ' '\n          break\n        }\n        default: {\n          // Currently only replacement character.\n          value = String.fromCharCode(chunk)\n        }\n      }\n    atTab = chunk === -2\n    result.push(value)\n  }\n  return result.join('')\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const thematicBreak = {\n  name: 'thematicBreak',\n  tokenize: tokenizeThematicBreak\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeThematicBreak(effects, ok, nok) {\n  let size = 0\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of thematic break.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('thematicBreak')\n    // To do: parse indent like `markdown-rs`.\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at marker.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    marker = code\n    return atBreak(code)\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.enter('thematicBreakSequence')\n      return sequence(code)\n    }\n    if (size >= 3 && (code === null || markdownLineEnding(code))) {\n      effects.exit('thematicBreak')\n      return ok(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code)\n      size++\n      return sequence\n    }\n    effects.exit('thematicBreakSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, atBreak, 'whitespace')(code)\n      : atBreak(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ContainerState} ContainerState\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {asciiDigit, markdownSpace} from 'micromark-util-character'\nimport {blankLine} from './blank-line.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/** @type {Construct} */\nexport const list = {\n  name: 'list',\n  tokenize: tokenizeListStart,\n  continuation: {\n    tokenize: tokenizeListContinuation\n  },\n  exit: tokenizeListEnd\n}\n\n/** @type {Construct} */\nconst listItemPrefixWhitespaceConstruct = {\n  tokenize: tokenizeListItemPrefixWhitespace,\n  partial: true\n}\n\n/** @type {Construct} */\nconst indentConstruct = {\n  tokenize: tokenizeIndent,\n  partial: true\n}\n\n// To do: `markdown-rs` parses list items on their own and later stitches them\n// together.\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListStart(effects, ok, nok) {\n  const self = this\n  const tail = self.events[self.events.length - 1]\n  let initialSize =\n    tail && tail[1].type === 'linePrefix'\n      ? tail[2].sliceSerialize(tail[1], true).length\n      : 0\n  let size = 0\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    const kind =\n      self.containerState.type ||\n      (code === 42 || code === 43 || code === 45\n        ? 'listUnordered'\n        : 'listOrdered')\n    if (\n      kind === 'listUnordered'\n        ? !self.containerState.marker || code === self.containerState.marker\n        : asciiDigit(code)\n    ) {\n      if (!self.containerState.type) {\n        self.containerState.type = kind\n        effects.enter(kind, {\n          _container: true\n        })\n      }\n      if (kind === 'listUnordered') {\n        effects.enter('listItemPrefix')\n        return code === 42 || code === 45\n          ? effects.check(thematicBreak, nok, atMarker)(code)\n          : atMarker(code)\n      }\n      if (!self.interrupt || code === 49) {\n        effects.enter('listItemPrefix')\n        effects.enter('listItemValue')\n        return inside(code)\n      }\n    }\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function inside(code) {\n    if (asciiDigit(code) && ++size < 10) {\n      effects.consume(code)\n      return inside\n    }\n    if (\n      (!self.interrupt || size < 2) &&\n      (self.containerState.marker\n        ? code === self.containerState.marker\n        : code === 41 || code === 46)\n    ) {\n      effects.exit('listItemValue')\n      return atMarker(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * @type {State}\n   **/\n  function atMarker(code) {\n    effects.enter('listItemMarker')\n    effects.consume(code)\n    effects.exit('listItemMarker')\n    self.containerState.marker = self.containerState.marker || code\n    return effects.check(\n      blankLine,\n      // Can’t be empty when interrupting.\n      self.interrupt ? nok : onBlank,\n      effects.attempt(\n        listItemPrefixWhitespaceConstruct,\n        endOfPrefix,\n        otherPrefix\n      )\n    )\n  }\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.initialBlankLine = true\n    initialSize++\n    return endOfPrefix(code)\n  }\n\n  /** @type {State} */\n  function otherPrefix(code) {\n    if (markdownSpace(code)) {\n      effects.enter('listItemPrefixWhitespace')\n      effects.consume(code)\n      effects.exit('listItemPrefixWhitespace')\n      return endOfPrefix\n    }\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function endOfPrefix(code) {\n    self.containerState.size =\n      initialSize +\n      self.sliceSerialize(effects.exit('listItemPrefix'), true).length\n    return ok(code)\n  }\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListContinuation(effects, ok, nok) {\n  const self = this\n  self.containerState._closeFlow = undefined\n  return effects.check(blankLine, onBlank, notBlank)\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.furtherBlankLines =\n      self.containerState.furtherBlankLines ||\n      self.containerState.initialBlankLine\n\n    // We have a blank line.\n    // Still, try to consume at most the items size.\n    return factorySpace(\n      effects,\n      ok,\n      'listItemIndent',\n      self.containerState.size + 1\n    )(code)\n  }\n\n  /** @type {State} */\n  function notBlank(code) {\n    if (self.containerState.furtherBlankLines || !markdownSpace(code)) {\n      self.containerState.furtherBlankLines = undefined\n      self.containerState.initialBlankLine = undefined\n      return notInCurrentItem(code)\n    }\n    self.containerState.furtherBlankLines = undefined\n    self.containerState.initialBlankLine = undefined\n    return effects.attempt(indentConstruct, ok, notInCurrentItem)(code)\n  }\n\n  /** @type {State} */\n  function notInCurrentItem(code) {\n    // While we do continue, we signal that the flow should be closed.\n    self.containerState._closeFlow = true\n    // As we’re closing flow, we’re no longer interrupting.\n    self.interrupt = undefined\n    // Always populated by defaults.\n\n    return factorySpace(\n      effects,\n      effects.attempt(list, ok, nok),\n      'linePrefix',\n      self.parser.constructs.disable.null.includes('codeIndented')\n        ? undefined\n        : 4\n    )(code)\n  }\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemIndent',\n    self.containerState.size + 1\n  )\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'listItemIndent' &&\n      tail[2].sliceSerialize(tail[1], true).length === self.containerState.size\n      ? ok(code)\n      : nok(code)\n  }\n}\n\n/**\n * @type {Exiter}\n * @this {TokenizeContext}\n */\nfunction tokenizeListEnd(effects) {\n  effects.exit(this.containerState.type)\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListItemPrefixWhitespace(effects, ok, nok) {\n  const self = this\n\n  // Always populated by defaults.\n\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemPrefixWhitespace',\n    self.parser.constructs.disable.null.includes('codeIndented')\n      ? undefined\n      : 4 + 1\n  )\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return !markdownSpace(code) &&\n      tail &&\n      tail[1].type === 'listItemPrefixWhitespace'\n      ? ok(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const blockQuote = {\n  name: 'blockQuote',\n  tokenize: tokenizeBlockQuoteStart,\n  continuation: {\n    tokenize: tokenizeBlockQuoteContinuation\n  },\n  exit\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteStart(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of block quote.\n   *\n   * ```markdown\n   * > | > a\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 62) {\n      const state = self.containerState\n      if (!state.open) {\n        effects.enter('blockQuote', {\n          _container: true\n        })\n        state.open = true\n      }\n      effects.enter('blockQuotePrefix')\n      effects.enter('blockQuoteMarker')\n      effects.consume(code)\n      effects.exit('blockQuoteMarker')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `>`, before optional whitespace.\n   *\n   * ```markdown\n   * > | > a\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (markdownSpace(code)) {\n      effects.enter('blockQuotePrefixWhitespace')\n      effects.consume(code)\n      effects.exit('blockQuotePrefixWhitespace')\n      effects.exit('blockQuotePrefix')\n      return ok\n    }\n    effects.exit('blockQuotePrefix')\n    return ok(code)\n  }\n}\n\n/**\n * Start of block quote continuation.\n *\n * ```markdown\n *   | > a\n * > | > b\n *     ^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteContinuation(effects, ok, nok) {\n  const self = this\n  return contStart\n\n  /**\n   * Start of block quote continuation.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contStart(code) {\n    if (markdownSpace(code)) {\n      // Always populated by defaults.\n\n      return factorySpace(\n        effects,\n        contBefore,\n        'linePrefix',\n        self.parser.constructs.disable.null.includes('codeIndented')\n          ? undefined\n          : 4\n      )(code)\n    }\n    return contBefore(code)\n  }\n\n  /**\n   * At `>`, after optional whitespace.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contBefore(code) {\n    return effects.attempt(blockQuote, ok, nok)(code)\n  }\n}\n\n/** @type {Exiter} */\nfunction exit(effects) {\n  effects.exit('blockQuote')\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {\n  asciiControl,\n  markdownLineEndingOrSpace,\n  markdownLineEnding\n} from 'micromark-util-character'\n/**\n * Parse destinations.\n *\n * ###### Examples\n *\n * ```markdown\n * <a>\n * <a\\>b>\n * <a b>\n * <a)>\n * a\n * a\\)b\n * a(b)c\n * a(b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type for whole (`<a>` or `b`).\n * @param {TokenType} literalType\n *   Type when enclosed (`<a>`).\n * @param {TokenType} literalMarkerType\n *   Type for enclosing (`<` and `>`).\n * @param {TokenType} rawType\n *   Type when not enclosed (`b`).\n * @param {TokenType} stringType\n *   Type for the value (`a` or `b`).\n * @param {number | undefined} [max=Infinity]\n *   Depth of nested parens (inclusive).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryDestination(\n  effects,\n  ok,\n  nok,\n  type,\n  literalType,\n  literalMarkerType,\n  rawType,\n  stringType,\n  max\n) {\n  const limit = max || Number.POSITIVE_INFINITY\n  let balance = 0\n  return start\n\n  /**\n   * Start of destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *     ^\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 60) {\n      effects.enter(type)\n      effects.enter(literalType)\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      return enclosedBefore\n    }\n\n    // ASCII control, space, closing paren.\n    if (code === null || code === 32 || code === 41 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.enter(type)\n    effects.enter(rawType)\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return raw(code)\n  }\n\n  /**\n   * After `<`, at an enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedBefore(code) {\n    if (code === 62) {\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      effects.exit(literalType)\n      effects.exit(type)\n      return ok\n    }\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return enclosed(code)\n  }\n\n  /**\n   * In enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosed(code) {\n    if (code === 62) {\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      return enclosedBefore(code)\n    }\n    if (code === null || code === 60 || markdownLineEnding(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return code === 92 ? enclosedEscape : enclosed\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | <a\\*a>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedEscape(code) {\n    if (code === 60 || code === 62 || code === 92) {\n      effects.consume(code)\n      return enclosed\n    }\n    return enclosed(code)\n  }\n\n  /**\n   * In raw destination.\n   *\n   * ```markdown\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function raw(code) {\n    if (\n      !balance &&\n      (code === null || code === 41 || markdownLineEndingOrSpace(code))\n    ) {\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      effects.exit(rawType)\n      effects.exit(type)\n      return ok(code)\n    }\n    if (balance < limit && code === 40) {\n      effects.consume(code)\n      balance++\n      return raw\n    }\n    if (code === 41) {\n      effects.consume(code)\n      balance--\n      return raw\n    }\n\n    // ASCII control (but *not* `\\0`) and space and `(`.\n    // Note: in `markdown-rs`, `\\0` exists in codes, in `micromark-js` it\n    // doesn’t.\n    if (code === null || code === 32 || code === 40 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return code === 92 ? rawEscape : raw\n  }\n\n  /**\n   * After `\\`, at special character.\n   *\n   * ```markdown\n   * > | a\\*a\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function rawEscape(code) {\n    if (code === 40 || code === 41 || code === 92) {\n      effects.consume(code)\n      return raw\n    }\n    return raw(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/**\n * Parse labels.\n *\n * > 👉 **Note**: labels in markdown are capped at 999 characters in the string.\n *\n * ###### Examples\n *\n * ```markdown\n * [a]\n * [a\n * b]\n * [a\\]b]\n * ```\n *\n * @this {TokenizeContext}\n *   Tokenize context.\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole label (`[a]`).\n * @param {TokenType} markerType\n *   Type for the markers (`[` and `]`).\n * @param {TokenType} stringType\n *   Type for the identifier (`a`).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryLabel(effects, ok, nok, type, markerType, stringType) {\n  const self = this\n  let size = 0\n  /** @type {boolean} */\n  let seen\n  return start\n\n  /**\n   * Start of label.\n   *\n   * ```markdown\n   * > | [a]\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(type)\n    effects.enter(markerType)\n    effects.consume(code)\n    effects.exit(markerType)\n    effects.enter(stringType)\n    return atBreak\n  }\n\n  /**\n   * In label, at something, before something else.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (\n      size > 999 ||\n      code === null ||\n      code === 91 ||\n      (code === 93 && !seen) ||\n      // To do: remove in the future once we’ve switched from\n      // `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n      // which doesn’t need this.\n      // Hidden footnotes hook.\n      /* c8 ignore next 3 */\n      (code === 94 &&\n        !size &&\n        '_hiddenFootnoteSupport' in self.parser.constructs)\n    ) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.exit(stringType)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n\n    // To do: indent? Link chunks and EOLs together?\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return atBreak\n    }\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return labelInside(code)\n  }\n\n  /**\n   * In label, in text.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (\n      code === null ||\n      code === 91 ||\n      code === 93 ||\n      markdownLineEnding(code) ||\n      size++ > 999\n    ) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    if (!seen) seen = !markdownSpace(code)\n    return code === 92 ? labelEscape : labelInside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | [a\\*a]\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return labelInside\n    }\n    return labelInside(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/**\n * Parse titles.\n *\n * ###### Examples\n *\n * ```markdown\n * \"a\"\n * 'b'\n * (c)\n * \"a\n * b\"\n * 'a\n *     b'\n * (a\\)b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole title (`\"a\"`, `'b'`, `(c)`).\n * @param {TokenType} markerType\n *   Type for the markers (`\"`, `'`, `(`, and `)`).\n * @param {TokenType} stringType\n *   Type for the value (`a`).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryTitle(effects, ok, nok, type, markerType, stringType) {\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of title.\n   *\n   * ```markdown\n   * > | \"a\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      effects.enter(type)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      marker = code === 40 ? 41 : code\n      return begin\n    }\n    return nok(code)\n  }\n\n  /**\n   * After opening marker.\n   *\n   * This is also used at the closing marker.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function begin(code) {\n    if (code === marker) {\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n    effects.enter(stringType)\n    return atBreak(code)\n  }\n\n  /**\n   * At something, before something else.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.exit(stringType)\n      return begin(marker)\n    }\n    if (code === null) {\n      return nok(code)\n    }\n\n    // Note: blank lines can’t exist in content.\n    if (markdownLineEnding(code)) {\n      // To do: use `space_or_tab_eol_with_options`, connect.\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return factorySpace(effects, atBreak, 'linePrefix')\n    }\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return inside(code)\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker || code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return code === 92 ? escape : inside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | \"a\\*b\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function escape(code) {\n    if (code === marker || code === 92) {\n      effects.consume(code)\n      return inside\n    }\n    return inside(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   line endings or spaces in markdown are often optional, in which case this\n *     factory can be used and `ok` will be switched to whether spaces were found\n *     or not\n * *   one line ending or space can be detected with\n *     `markdownLineEndingOrSpace(code)` right before using `factoryWhitespace`\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @returns\n *   Start state.\n */\nexport function factoryWhitespace(effects, ok) {\n  /** @type {boolean} */\n  let seen\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      seen = true\n      return start\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(\n        effects,\n        start,\n        seen ? 'linePrefix' : 'lineSuffix'\n      )(code)\n    }\n    return ok(code)\n  }\n}\n","/**\n * Normalize an identifier (as found in references, definitions).\n *\n * Collapses markdown whitespace, trim, and then lower- and uppercase.\n *\n * Some characters are considered “uppercase”, such as U+03F4 (`ϴ`), but if their\n * lowercase counterpart (U+03B8 (`θ`)) is uppercased will result in a different\n * uppercase character (U+0398 (`Θ`)).\n * So, to get a canonical form, we perform both lower- and uppercase.\n *\n * Using uppercase last makes sure keys will never interact with default\n * prototypal values (such as `constructor`): nothing in the prototype of\n * `Object` is uppercase.\n *\n * @param {string} value\n *   Identifier to normalize.\n * @returns {string}\n *   Normalized identifier.\n */\nexport function normalizeIdentifier(value) {\n  return (\n    value\n      // Collapse markdown whitespace.\n      .replace(/[\\t\\n\\r ]+/g, ' ')\n      // Trim.\n      .replace(/^ | $/g, '')\n      // Some characters are considered “uppercase”, but if their lowercase\n      // counterpart is uppercased will result in a different uppercase\n      // character.\n      // Hence, to get that form, we perform both lower- and uppercase.\n      // Upper case makes sure keys will not interact with default prototypal\n      // methods: no method is uppercase.\n      .toLowerCase()\n      .toUpperCase()\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factorySpace} from 'micromark-factory-space'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\n/** @type {Construct} */\nexport const definition = {\n  name: 'definition',\n  tokenize: tokenizeDefinition\n}\n\n/** @type {Construct} */\nconst titleBefore = {\n  tokenize: tokenizeTitleBefore,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinition(effects, ok, nok) {\n  const self = this\n  /** @type {string} */\n  let identifier\n  return start\n\n  /**\n   * At start of a definition.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Do not interrupt paragraphs (but do follow definitions).\n    // To do: do `interrupt` the way `markdown-rs` does.\n    // To do: parse whitespace the way `markdown-rs` does.\n    effects.enter('definition')\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at `[`.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    // To do: parse whitespace the way `markdown-rs` does.\n\n    return factoryLabel.call(\n      self,\n      effects,\n      labelAfter,\n      // Note: we don’t need to reset the way `markdown-rs` does.\n      nok,\n      'definitionLabel',\n      'definitionLabelMarker',\n      'definitionLabelString'\n    )(code)\n  }\n\n  /**\n   * After label.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    identifier = normalizeIdentifier(\n      self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n    )\n    if (code === 58) {\n      effects.enter('definitionMarker')\n      effects.consume(code)\n      effects.exit('definitionMarker')\n      return markerAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * After marker.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function markerAfter(code) {\n    // Note: whitespace is optional.\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, destinationBefore)(code)\n      : destinationBefore(code)\n  }\n\n  /**\n   * Before destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationBefore(code) {\n    return factoryDestination(\n      effects,\n      destinationAfter,\n      // Note: we don’t need to reset the way `markdown-rs` does.\n      nok,\n      'definitionDestination',\n      'definitionDestinationLiteral',\n      'definitionDestinationLiteralMarker',\n      'definitionDestinationRaw',\n      'definitionDestinationString'\n    )(code)\n  }\n\n  /**\n   * After destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationAfter(code) {\n    return effects.attempt(titleBefore, after, after)(code)\n  }\n\n  /**\n   * After definition.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, afterWhitespace, 'whitespace')(code)\n      : afterWhitespace(code)\n  }\n\n  /**\n   * After definition, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterWhitespace(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('definition')\n\n      // Note: we don’t care about uniqueness.\n      // It’s likely that that doesn’t happen very frequently.\n      // It is more likely that it wastes precious time.\n      self.parser.defined.push(identifier)\n\n      // To do: `markdown-rs` interrupt.\n      // // You’d be interrupting.\n      // tokenizer.interrupt = true\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTitleBefore(effects, ok, nok) {\n  return titleBefore\n\n  /**\n   * After destination, at whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleBefore(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, beforeMarker)(code)\n      : nok(code)\n  }\n\n  /**\n   * At title.\n   *\n   * ```markdown\n   *   | [a]: b\n   * > | \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeMarker(code) {\n    return factoryTitle(\n      effects,\n      titleAfter,\n      nok,\n      'definitionTitle',\n      'definitionTitleMarker',\n      'definitionTitleString'\n    )(code)\n  }\n\n  /**\n   * After title.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfter(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, titleAfterOptionalWhitespace, 'whitespace')(code)\n      : titleAfterOptionalWhitespace(code)\n  }\n\n  /**\n   * After title, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfterOptionalWhitespace(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const codeIndented = {\n  name: 'codeIndented',\n  tokenize: tokenizeCodeIndented\n}\n\n/** @type {Construct} */\nconst furtherStart = {\n  tokenize: tokenizeFurtherStart,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeIndented(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of code (indented).\n   *\n   * > **Parsing note**: it is not needed to check if this first line is a\n   * > filled line (that it has a non-whitespace character), because blank lines\n   * > are parsed already, so we never run into that.\n   *\n   * ```markdown\n   * > |     aaa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: manually check if interrupting like `markdown-rs`.\n\n    effects.enter('codeIndented')\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code)\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? atBreak(code)\n      : nok(code)\n  }\n\n  /**\n   * At a break.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === null) {\n      return after(code)\n    }\n    if (markdownLineEnding(code)) {\n      return effects.attempt(furtherStart, atBreak, after)(code)\n    }\n    effects.enter('codeFlowValue')\n    return inside(code)\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return inside\n  }\n\n  /** @type {State} */\n  function after(code) {\n    effects.exit('codeIndented')\n    // To do: allow interrupting like `markdown-rs`.\n    // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    return ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeFurtherStart(effects, ok, nok) {\n  const self = this\n  return furtherStart\n\n  /**\n   * At eol, trying to parse another indent.\n   *\n   * ```markdown\n   * > |     aaa\n   *            ^\n   *   |     bbb\n   * ```\n   *\n   * @type {State}\n   */\n  function furtherStart(code) {\n    // To do: improve `lazy` / `pierce` handling.\n    // If this is a lazy line, it can’t be code.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code)\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return furtherStart\n    }\n\n    // To do: the code here in `micromark-js` is a bit different from\n    // `markdown-rs` because there it can attempt spaces.\n    // We can’t yet.\n    //\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code)\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? ok(code)\n      : markdownLineEnding(code)\n      ? furtherStart(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n/** @type {Construct} */\nexport const headingAtx = {\n  name: 'headingAtx',\n  tokenize: tokenizeHeadingAtx,\n  resolve: resolveHeadingAtx\n}\n\n/** @type {Resolver} */\nfunction resolveHeadingAtx(events, context) {\n  let contentEnd = events.length - 2\n  let contentStart = 3\n  /** @type {Token} */\n  let content\n  /** @type {Token} */\n  let text\n\n  // Prefix whitespace, part of the opening.\n  if (events[contentStart][1].type === 'whitespace') {\n    contentStart += 2\n  }\n\n  // Suffix whitespace, part of the closing.\n  if (\n    contentEnd - 2 > contentStart &&\n    events[contentEnd][1].type === 'whitespace'\n  ) {\n    contentEnd -= 2\n  }\n  if (\n    events[contentEnd][1].type === 'atxHeadingSequence' &&\n    (contentStart === contentEnd - 1 ||\n      (contentEnd - 4 > contentStart &&\n        events[contentEnd - 2][1].type === 'whitespace'))\n  ) {\n    contentEnd -= contentStart + 1 === contentEnd ? 2 : 4\n  }\n  if (contentEnd > contentStart) {\n    content = {\n      type: 'atxHeadingText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end\n    }\n    text = {\n      type: 'chunkText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end,\n      contentType: 'text'\n    }\n    splice(events, contentStart, contentEnd - contentStart + 1, [\n      ['enter', content, context],\n      ['enter', text, context],\n      ['exit', text, context],\n      ['exit', content, context]\n    ])\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHeadingAtx(effects, ok, nok) {\n  let size = 0\n  return start\n\n  /**\n   * Start of a heading (atx).\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    effects.enter('atxHeading')\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at `#`.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('atxHeadingSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 35 && size++ < 6) {\n      effects.consume(code)\n      return sequenceOpen\n    }\n\n    // Always at least one `#`.\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingSequence')\n      return atBreak(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ## aa\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === 35) {\n      effects.enter('atxHeadingSequence')\n      return sequenceFurther(code)\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('atxHeading')\n      // To do: interrupt like `markdown-rs`.\n      // // Feel free to interrupt.\n      // tokenizer.interrupt = false\n      return ok(code)\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, atBreak, 'whitespace')(code)\n    }\n\n    // To do: generate `data` tokens, add the `text` token later.\n    // Needs edit map, see: `markdown.rs`.\n    effects.enter('atxHeadingText')\n    return data(code)\n  }\n\n  /**\n   * In further sequence (after whitespace).\n   *\n   * Could be normal “visible” hashes in the heading or a final sequence.\n   *\n   * ```markdown\n   * > | ## aa ##\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceFurther(code) {\n    if (code === 35) {\n      effects.consume(code)\n      return sequenceFurther\n    }\n    effects.exit('atxHeadingSequence')\n    return atBreak(code)\n  }\n\n  /**\n   * In text.\n   *\n   * ```markdown\n   * > | ## aa\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (code === null || code === 35 || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingText')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const setextUnderline = {\n  name: 'setextUnderline',\n  tokenize: tokenizeSetextUnderline,\n  resolveTo: resolveToSetextUnderline\n}\n\n/** @type {Resolver} */\nfunction resolveToSetextUnderline(events, context) {\n  // To do: resolve like `markdown-rs`.\n  let index = events.length\n  /** @type {number | undefined} */\n  let content\n  /** @type {number | undefined} */\n  let text\n  /** @type {number | undefined} */\n  let definition\n\n  // Find the opening of the content.\n  // It’ll always exist: we don’t tokenize if it isn’t there.\n  while (index--) {\n    if (events[index][0] === 'enter') {\n      if (events[index][1].type === 'content') {\n        content = index\n        break\n      }\n      if (events[index][1].type === 'paragraph') {\n        text = index\n      }\n    }\n    // Exit\n    else {\n      if (events[index][1].type === 'content') {\n        // Remove the content end (if needed we’ll add it later)\n        events.splice(index, 1)\n      }\n      if (!definition && events[index][1].type === 'definition') {\n        definition = index\n      }\n    }\n  }\n  const heading = {\n    type: 'setextHeading',\n    start: Object.assign({}, events[text][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n\n  // Change the paragraph to setext heading text.\n  events[text][1].type = 'setextHeadingText'\n\n  // If we have definitions in the content, we’ll keep on having content,\n  // but we need move it.\n  if (definition) {\n    events.splice(text, 0, ['enter', heading, context])\n    events.splice(definition + 1, 0, ['exit', events[content][1], context])\n    events[content][1].end = Object.assign({}, events[definition][1].end)\n  } else {\n    events[content][1] = heading\n  }\n\n  // Add the heading exit at the end.\n  events.push(['exit', heading, context])\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeSetextUnderline(effects, ok, nok) {\n  const self = this\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * At start of heading (setext) underline.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    let index = self.events.length\n    /** @type {boolean | undefined} */\n    let paragraph\n    // Find an opening.\n    while (index--) {\n      // Skip enter/exit of line ending, line prefix, and content.\n      // We can now either have a definition or a paragraph.\n      if (\n        self.events[index][1].type !== 'lineEnding' &&\n        self.events[index][1].type !== 'linePrefix' &&\n        self.events[index][1].type !== 'content'\n      ) {\n        paragraph = self.events[index][1].type === 'paragraph'\n        break\n      }\n    }\n\n    // To do: handle lazy/pierce like `markdown-rs`.\n    // To do: parse indent like `markdown-rs`.\n    if (!self.parser.lazy[self.now().line] && (self.interrupt || paragraph)) {\n      effects.enter('setextHeadingLine')\n      marker = code\n      return before(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * After optional whitespace, at `-` or `=`.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('setextHeadingLineSequence')\n    return inside(code)\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return inside\n    }\n    effects.exit('setextHeadingLineSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, after, 'lineSuffix')(code)\n      : after(code)\n  }\n\n  /**\n   * After sequence, after optional whitespace.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('setextHeadingLine')\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n","/**\n * List of lowercase HTML “block” tag names.\n *\n * The list, when parsing HTML (flow), results in more relaxed rules (condition\n * 6).\n * Because they are known blocks, the HTML-like syntax doesn’t have to be\n * strictly parsed.\n * For tag names not in this list, a more strict algorithm (condition 7) is used\n * to detect whether the HTML-like syntax is seen as HTML (flow) or not.\n *\n * This is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `search` was added in `CommonMark@0.31`.\n */\nexport const htmlBlockNames = [\n  'address',\n  'article',\n  'aside',\n  'base',\n  'basefont',\n  'blockquote',\n  'body',\n  'caption',\n  'center',\n  'col',\n  'colgroup',\n  'dd',\n  'details',\n  'dialog',\n  'dir',\n  'div',\n  'dl',\n  'dt',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'frame',\n  'frameset',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'head',\n  'header',\n  'hr',\n  'html',\n  'iframe',\n  'legend',\n  'li',\n  'link',\n  'main',\n  'menu',\n  'menuitem',\n  'nav',\n  'noframes',\n  'ol',\n  'optgroup',\n  'option',\n  'p',\n  'param',\n  'search',\n  'section',\n  'summary',\n  'table',\n  'tbody',\n  'td',\n  'tfoot',\n  'th',\n  'thead',\n  'title',\n  'tr',\n  'track',\n  'ul'\n]\n\n/**\n * List of lowercase HTML “raw” tag names.\n *\n * The list, when parsing HTML (flow), results in HTML that can include lines\n * without exiting, until a closing tag also in this list is found (condition\n * 1).\n *\n * This module is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `textarea` was added in `CommonMark@0.30`.\n */\nexport const htmlRawNames = ['pre', 'script', 'style', 'textarea']\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {htmlBlockNames, htmlRawNames} from 'micromark-util-html-tag-name'\nimport {blankLine} from './blank-line.js'\n\n/** @type {Construct} */\nexport const htmlFlow = {\n  name: 'htmlFlow',\n  tokenize: tokenizeHtmlFlow,\n  resolveTo: resolveToHtmlFlow,\n  concrete: true\n}\n\n/** @type {Construct} */\nconst blankLineBefore = {\n  tokenize: tokenizeBlankLineBefore,\n  partial: true\n}\nconst nonLazyContinuationStart = {\n  tokenize: tokenizeNonLazyContinuationStart,\n  partial: true\n}\n\n/** @type {Resolver} */\nfunction resolveToHtmlFlow(events) {\n  let index = events.length\n  while (index--) {\n    if (events[index][0] === 'enter' && events[index][1].type === 'htmlFlow') {\n      break\n    }\n  }\n  if (index > 1 && events[index - 2][1].type === 'linePrefix') {\n    // Add the prefix start to the HTML token.\n    events[index][1].start = events[index - 2][1].start\n    // Add the prefix start to the HTML line token.\n    events[index + 1][1].start = events[index - 2][1].start\n    // Remove the line prefix.\n    events.splice(index - 2, 2)\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlFlow(effects, ok, nok) {\n  const self = this\n  /** @type {number} */\n  let marker\n  /** @type {boolean} */\n  let closingTag\n  /** @type {string} */\n  let buffer\n  /** @type {number} */\n  let index\n  /** @type {Code} */\n  let markerB\n  return start\n\n  /**\n   * Start of HTML (flow).\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    return before(code)\n  }\n\n  /**\n   * At `<`, after optional whitespace.\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('htmlFlow')\n    effects.enter('htmlFlowData')\n    effects.consume(code)\n    return open\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | <x />\n   *      ^\n   * > | <!doctype>\n   *      ^\n   * > | <!--xxx-->\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationOpen\n    }\n    if (code === 47) {\n      effects.consume(code)\n      closingTag = true\n      return tagCloseStart\n    }\n    if (code === 63) {\n      effects.consume(code)\n      marker = 3\n      // To do:\n      // tokenizer.concrete = true\n      // To do: use `markdown-rs` style interrupt.\n      // While we’re in an instruction instead of a declaration, we’re on a `?`\n      // right now, so we do need to search for `>`, similar to declarations.\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer = String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *       ^\n   * > | <!--xxx-->\n   *       ^\n   * > | <![CDATA[>&<]]>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      marker = 2\n      return commentOpenInside\n    }\n    if (code === 91) {\n      effects.consume(code)\n      marker = 5\n      index = 0\n      return cdataOpenInside\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      marker = 4\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!-`, inside a comment, at another `-`.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<![`, inside CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *        ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = 'CDATA['\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code)\n      if (index === value.length) {\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok : continuation\n      }\n      return cdataOpenInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | </x>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer = String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * In tag name.\n   *\n   * ```markdown\n   * > | <ab>\n   *      ^^\n   * > | </ab>\n   *       ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagName(code) {\n    if (\n      code === null ||\n      code === 47 ||\n      code === 62 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      const slash = code === 47\n      const name = buffer.toLowerCase()\n      if (!slash && !closingTag && htmlRawNames.includes(name)) {\n        marker = 1\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n      if (htmlBlockNames.includes(buffer.toLowerCase())) {\n        marker = 6\n        if (slash) {\n          effects.consume(code)\n          return basicSelfClosing\n        }\n\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n      marker = 7\n      // Do not support complete HTML when interrupting.\n      return self.interrupt && !self.parser.lazy[self.now().line]\n        ? nok(code)\n        : closingTag\n        ? completeClosingTagAfter(code)\n        : completeAttributeNameBefore(code)\n    }\n\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      buffer += String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * After closing slash of a basic tag name.\n   *\n   * ```markdown\n   * > | <div/>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function basicSelfClosing(code) {\n    if (code === 62) {\n      effects.consume(code)\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuation\n    }\n    return nok(code)\n  }\n\n  /**\n   * After closing slash of a complete tag name.\n   *\n   * ```markdown\n   * > | <x/>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeClosingTagAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeClosingTagAfter\n    }\n    return completeEnd(code)\n  }\n\n  /**\n   * At an attribute name.\n   *\n   * At first, this state is used after a complete tag name, after whitespace,\n   * where it expects optional attributes or the end of the tag.\n   * It is also reused after attributes, when expecting more optional\n   * attributes.\n   *\n   * ```markdown\n   * > | <a />\n   *        ^\n   * > | <a :b>\n   *        ^\n   * > | <a _b>\n   *        ^\n   * > | <a b>\n   *        ^\n   * > | <a >\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameBefore(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return completeEnd\n    }\n\n    // ASCII alphanumerical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameBefore\n    }\n    return completeEnd(code)\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | <a :b>\n   *         ^\n   * > | <a _b>\n   *         ^\n   * > | <a b>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeName(code) {\n    // ASCII alphanumerical and `-`, `.`, `:`, and `_`.\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n    return completeAttributeNameAfter(code)\n  }\n\n  /**\n   * After attribute name, at an optional initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b>\n   *         ^\n   * > | <a b=c>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameAfter\n    }\n    return completeAttributeNameBefore(code)\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * > | <a b=\"c\">\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      markerB = code\n      return completeAttributeValueQuoted\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n    return completeAttributeValueUnquoted(code)\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *           ^\n   * > | <a b='c'>\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuoted(code) {\n    if (code === markerB) {\n      effects.consume(code)\n      markerB = null\n      return completeAttributeValueQuotedAfter\n    }\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return completeAttributeValueQuoted\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 47 ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      return completeAttributeNameAfter(code)\n    }\n    effects.consume(code)\n    return completeAttributeValueUnquoted\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the\n   * end of the tag.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownSpace(code)) {\n      return completeAttributeNameBefore(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In certain circumstances of a complete tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeEnd(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return completeAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `>` in a complete tag.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAfter(code) {\n    if (code === null || markdownLineEnding(code)) {\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return continuation(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * In continuation of any HTML kind.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuation(code) {\n    if (code === 45 && marker === 2) {\n      effects.consume(code)\n      return continuationCommentInside\n    }\n    if (code === 60 && marker === 1) {\n      effects.consume(code)\n      return continuationRawTagOpen\n    }\n    if (code === 62 && marker === 4) {\n      effects.consume(code)\n      return continuationClose\n    }\n    if (code === 63 && marker === 3) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    if (code === 93 && marker === 5) {\n      effects.consume(code)\n      return continuationCdataInside\n    }\n    if (markdownLineEnding(code) && (marker === 6 || marker === 7)) {\n      effects.exit('htmlFlowData')\n      return effects.check(\n        blankLineBefore,\n        continuationAfter,\n        continuationStart\n      )(code)\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('htmlFlowData')\n      return continuationStart(code)\n    }\n    effects.consume(code)\n    return continuation\n  }\n\n  /**\n   * In continuation, at eol.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStart(code) {\n    return effects.check(\n      nonLazyContinuationStart,\n      continuationStartNonLazy,\n      continuationAfter\n    )(code)\n  }\n\n  /**\n   * In continuation, at eol, before non-lazy content.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStartNonLazy(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return continuationBefore\n  }\n\n  /**\n   * In continuation, before non-lazy content.\n   *\n   * ```markdown\n   *   | <x>\n   * > | asd\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return continuationStart(code)\n    }\n    effects.enter('htmlFlowData')\n    return continuation(code)\n  }\n\n  /**\n   * In comment continuation, after one `-`, expecting another.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCommentInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In raw continuation, after `<`, at `/`.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawTagOpen(code) {\n    if (code === 47) {\n      effects.consume(code)\n      buffer = ''\n      return continuationRawEndTag\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In raw continuation, after `</`, in a raw tag name.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                             ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawEndTag(code) {\n    if (code === 62) {\n      const name = buffer.toLowerCase()\n      if (htmlRawNames.includes(name)) {\n        effects.consume(code)\n        return continuationClose\n      }\n      return continuation(code)\n    }\n    if (asciiAlpha(code) && buffer.length < 8) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer += String.fromCharCode(code)\n      return continuationRawEndTag\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In cdata continuation, after `]`, expecting `]>`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *                  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCdataInside(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In declaration or instruction continuation, at `>`.\n   *\n   * ```markdown\n   * > | <!-->\n   *         ^\n   * > | <?>\n   *       ^\n   * > | <!q>\n   *        ^\n   * > | <!--ab-->\n   *             ^\n   * > | <![CDATA[>&<]]>\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationDeclarationInside(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return continuationClose\n    }\n\n    // More dashes.\n    if (code === 45 && marker === 2) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In closed continuation: everything we get until the eol/eof is part of it.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationClose(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('htmlFlowData')\n      return continuationAfter(code)\n    }\n    effects.consume(code)\n    return continuationClose\n  }\n\n  /**\n   * Done.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationAfter(code) {\n    effects.exit('htmlFlow')\n    // // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    // // No longer concrete.\n    // tokenizer.concrete = false\n    return ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuationStart(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * At eol, before continuation.\n   *\n   * ```markdown\n   * > | * ```js\n   *            ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * A continuation.\n   *\n   * ```markdown\n   *   | * ```js\n   * > | b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLineBefore(effects, ok, nok) {\n  return start\n\n  /**\n   * Before eol, expecting blank line.\n   *\n   * ```markdown\n   * > | <div>\n   *          ^\n   *   |\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return effects.attempt(blankLine, ok, nok)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nconst nonLazyContinuation = {\n  tokenize: tokenizeNonLazyContinuation,\n  partial: true\n}\n\n/** @type {Construct} */\nexport const codeFenced = {\n  name: 'codeFenced',\n  tokenize: tokenizeCodeFenced,\n  concrete: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeFenced(effects, ok, nok) {\n  const self = this\n  /** @type {Construct} */\n  const closeStart = {\n    tokenize: tokenizeCloseStart,\n    partial: true\n  }\n  let initialPrefix = 0\n  let sizeOpen = 0\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of code.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse whitespace like `markdown-rs`.\n    return beforeSequenceOpen(code)\n  }\n\n  /**\n   * In opening fence, after prefix, at sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeSequenceOpen(code) {\n    const tail = self.events[self.events.length - 1]\n    initialPrefix =\n      tail && tail[1].type === 'linePrefix'\n        ? tail[2].sliceSerialize(tail[1], true).length\n        : 0\n    marker = code\n    effects.enter('codeFenced')\n    effects.enter('codeFencedFence')\n    effects.enter('codeFencedFenceSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening fence sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *      ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === marker) {\n      sizeOpen++\n      effects.consume(code)\n      return sequenceOpen\n    }\n    if (sizeOpen < 3) {\n      return nok(code)\n    }\n    effects.exit('codeFencedFenceSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, infoBefore, 'whitespace')(code)\n      : infoBefore(code)\n  }\n\n  /**\n   * In opening fence, after the sequence (and optional whitespace), before info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function infoBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFencedFence')\n      return self.interrupt\n        ? ok(code)\n        : effects.check(nonLazyContinuation, atNonLazyBreak, after)(code)\n    }\n    effects.enter('codeFencedFenceInfo')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return info(code)\n  }\n\n  /**\n   * In info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function info(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceInfo')\n      return infoBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceInfo')\n      return factorySpace(effects, metaBefore, 'whitespace')(code)\n    }\n    if (code === 96 && code === marker) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return info\n  }\n\n  /**\n   * In opening fence, after info and whitespace, before meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function metaBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return infoBefore(code)\n    }\n    effects.enter('codeFencedFenceMeta')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return meta(code)\n  }\n\n  /**\n   * In meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function meta(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceMeta')\n      return infoBefore(code)\n    }\n    if (code === 96 && code === marker) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return meta\n  }\n\n  /**\n   * At eol/eof in code, before a non-lazy closing fence or content.\n   *\n   * ```markdown\n   * > | ~~~js\n   *          ^\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function atNonLazyBreak(code) {\n    return effects.attempt(closeStart, after, contentBefore)(code)\n  }\n\n  /**\n   * Before code content, not a closing fence, at eol.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentBefore(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return contentStart\n  }\n\n  /**\n   * Before code content, not a closing fence.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentStart(code) {\n    return initialPrefix > 0 && markdownSpace(code)\n      ? factorySpace(\n          effects,\n          beforeContentChunk,\n          'linePrefix',\n          initialPrefix + 1\n        )(code)\n      : beforeContentChunk(code)\n  }\n\n  /**\n   * Before code content, after optional prefix.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeContentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return effects.check(nonLazyContinuation, atNonLazyBreak, after)(code)\n    }\n    effects.enter('codeFlowValue')\n    return contentChunk(code)\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^^^^^^^^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return beforeContentChunk(code)\n    }\n    effects.consume(code)\n    return contentChunk\n  }\n\n  /**\n   * After code.\n   *\n   * ```markdown\n   *   | ~~~js\n   *   | alert(1)\n   * > | ~~~\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    effects.exit('codeFenced')\n    return ok(code)\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeCloseStart(effects, ok, nok) {\n    let size = 0\n    return startBefore\n\n    /**\n     *\n     *\n     * @type {State}\n     */\n    function startBefore(code) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return start\n    }\n\n    /**\n     * Before closing fence, at optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function start(code) {\n      // Always populated by defaults.\n\n      // To do: `enter` here or in next state?\n      effects.enter('codeFencedFence')\n      return markdownSpace(code)\n        ? factorySpace(\n            effects,\n            beforeSequenceClose,\n            'linePrefix',\n            self.parser.constructs.disable.null.includes('codeIndented')\n              ? undefined\n              : 4\n          )(code)\n        : beforeSequenceClose(code)\n    }\n\n    /**\n     * In closing fence, after optional whitespace, at sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function beforeSequenceClose(code) {\n      if (code === marker) {\n        effects.enter('codeFencedFenceSequence')\n        return sequenceClose(code)\n      }\n      return nok(code)\n    }\n\n    /**\n     * In closing fence sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceClose(code) {\n      if (code === marker) {\n        size++\n        effects.consume(code)\n        return sequenceClose\n      }\n      if (size >= sizeOpen) {\n        effects.exit('codeFencedFenceSequence')\n        return markdownSpace(code)\n          ? factorySpace(effects, sequenceCloseAfter, 'whitespace')(code)\n          : sequenceCloseAfter(code)\n      }\n      return nok(code)\n    }\n\n    /**\n     * After closing fence sequence, after optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *        ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceCloseAfter(code) {\n      if (code === null || markdownLineEnding(code)) {\n        effects.exit('codeFencedFence')\n        return ok(code)\n      }\n      return nok(code)\n    }\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuation(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return lineStart\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function lineStart(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n  }\n}\n","/// <reference lib=\"dom\" />\n\n/* eslint-env browser */\n\nconst element = document.createElement('i')\n\n/**\n * @param {string} value\n * @returns {string|false}\n */\nexport function decodeNamedCharacterReference(value) {\n  const characterReference = '&' + value + ';'\n  element.innerHTML = characterReference\n  const char = element.textContent\n\n  // Some named character references do not require the closing semicolon\n  // (`&not`, for instance), which leads to situations where parsing the assumed\n  // named reference of `&notit;` will result in the string `¬it;`.\n  // When we encounter a trailing semicolon after parsing, and the character\n  // reference to decode was not a semicolon (`&semi;`), we can assume that the\n  // matching was not complete.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  if (char.charCodeAt(char.length - 1) === 59 /* `;` */ && value !== 'semi') {\n    return false\n  }\n\n  // If the decoded string is equal to the input, the character reference was\n  // not valid.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  return char === characterReference ? false : char\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {\n  asciiAlphanumeric,\n  asciiDigit,\n  asciiHexDigit\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const characterReference = {\n  name: 'characterReference',\n  tokenize: tokenizeCharacterReference\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterReference(effects, ok, nok) {\n  const self = this\n  let size = 0\n  /** @type {number} */\n  let max\n  /** @type {(code: Code) => boolean} */\n  let test\n  return start\n\n  /**\n   * Start of character reference.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *      ^\n   * > | a&#123;b\n   *      ^\n   * > | a&#x9;b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('characterReference')\n    effects.enter('characterReferenceMarker')\n    effects.consume(code)\n    effects.exit('characterReferenceMarker')\n    return open\n  }\n\n  /**\n   * After `&`, at `#` for numeric references or alphanumeric for named\n   * references.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^\n   * > | a&#123;b\n   *       ^\n   * > | a&#x9;b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 35) {\n      effects.enter('characterReferenceMarkerNumeric')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerNumeric')\n      return numeric\n    }\n    effects.enter('characterReferenceValue')\n    max = 31\n    test = asciiAlphanumeric\n    return value(code)\n  }\n\n  /**\n   * After `#`, at `x` for hexadecimals or digit for decimals.\n   *\n   * ```markdown\n   * > | a&#123;b\n   *        ^\n   * > | a&#x9;b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function numeric(code) {\n    if (code === 88 || code === 120) {\n      effects.enter('characterReferenceMarkerHexadecimal')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerHexadecimal')\n      effects.enter('characterReferenceValue')\n      max = 6\n      test = asciiHexDigit\n      return value\n    }\n    effects.enter('characterReferenceValue')\n    max = 7\n    test = asciiDigit\n    return value(code)\n  }\n\n  /**\n   * After markers (`&#x`, `&#`, or `&`), in value, before `;`.\n   *\n   * The character reference kind defines what and how many characters are\n   * allowed.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^^^\n   * > | a&#123;b\n   *        ^^^\n   * > | a&#x9;b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function value(code) {\n    if (code === 59 && size) {\n      const token = effects.exit('characterReferenceValue')\n      if (\n        test === asciiAlphanumeric &&\n        !decodeNamedCharacterReference(self.sliceSerialize(token))\n      ) {\n        return nok(code)\n      }\n\n      // To do: `markdown-rs` uses a different name:\n      // `CharacterReferenceMarkerSemi`.\n      effects.enter('characterReferenceMarker')\n      effects.consume(code)\n      effects.exit('characterReferenceMarker')\n      effects.exit('characterReference')\n      return ok\n    }\n    if (test(code) && size++ < max) {\n      effects.consume(code)\n      return value\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {asciiPunctuation} from 'micromark-util-character'\n/** @type {Construct} */\nexport const characterEscape = {\n  name: 'characterEscape',\n  tokenize: tokenizeCharacterEscape\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterEscape(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of character escape.\n   *\n   * ```markdown\n   * > | a\\*b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('characterEscape')\n    effects.enter('escapeMarker')\n    effects.consume(code)\n    effects.exit('escapeMarker')\n    return inside\n  }\n\n  /**\n   * After `\\`, at punctuation.\n   *\n   * ```markdown\n   * > | a\\*b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // ASCII punctuation.\n    if (asciiPunctuation(code)) {\n      effects.enter('characterEscapeValue')\n      effects.consume(code)\n      effects.exit('characterEscapeValue')\n      effects.exit('characterEscape')\n      return ok\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const lineEnding = {\n  name: 'lineEnding',\n  tokenize: tokenizeLineEnding\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLineEnding(effects, ok) {\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, ok, 'linePrefix')\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {markdownLineEndingOrSpace} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/** @type {Construct} */\nexport const labelEnd = {\n  name: 'labelEnd',\n  tokenize: tokenizeLabelEnd,\n  resolveTo: resolveToLabelEnd,\n  resolveAll: resolveAllLabelEnd\n}\n\n/** @type {Construct} */\nconst resourceConstruct = {\n  tokenize: tokenizeResource\n}\n/** @type {Construct} */\nconst referenceFullConstruct = {\n  tokenize: tokenizeReferenceFull\n}\n/** @type {Construct} */\nconst referenceCollapsedConstruct = {\n  tokenize: tokenizeReferenceCollapsed\n}\n\n/** @type {Resolver} */\nfunction resolveAllLabelEnd(events) {\n  let index = -1\n  while (++index < events.length) {\n    const token = events[index][1]\n    if (\n      token.type === 'labelImage' ||\n      token.type === 'labelLink' ||\n      token.type === 'labelEnd'\n    ) {\n      // Remove the marker.\n      events.splice(index + 1, token.type === 'labelImage' ? 4 : 2)\n      token.type = 'data'\n      index++\n    }\n  }\n  return events\n}\n\n/** @type {Resolver} */\nfunction resolveToLabelEnd(events, context) {\n  let index = events.length\n  let offset = 0\n  /** @type {Token} */\n  let token\n  /** @type {number | undefined} */\n  let open\n  /** @type {number | undefined} */\n  let close\n  /** @type {Array<Event>} */\n  let media\n\n  // Find an opening.\n  while (index--) {\n    token = events[index][1]\n    if (open) {\n      // If we see another link, or inactive link label, we’ve been here before.\n      if (\n        token.type === 'link' ||\n        (token.type === 'labelLink' && token._inactive)\n      ) {\n        break\n      }\n\n      // Mark other link openings as inactive, as we can’t have links in\n      // links.\n      if (events[index][0] === 'enter' && token.type === 'labelLink') {\n        token._inactive = true\n      }\n    } else if (close) {\n      if (\n        events[index][0] === 'enter' &&\n        (token.type === 'labelImage' || token.type === 'labelLink') &&\n        !token._balanced\n      ) {\n        open = index\n        if (token.type !== 'labelLink') {\n          offset = 2\n          break\n        }\n      }\n    } else if (token.type === 'labelEnd') {\n      close = index\n    }\n  }\n  const group = {\n    type: events[open][1].type === 'labelLink' ? 'link' : 'image',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n  const label = {\n    type: 'label',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[close][1].end)\n  }\n  const text = {\n    type: 'labelText',\n    start: Object.assign({}, events[open + offset + 2][1].end),\n    end: Object.assign({}, events[close - 2][1].start)\n  }\n  media = [\n    ['enter', group, context],\n    ['enter', label, context]\n  ]\n\n  // Opening marker.\n  media = push(media, events.slice(open + 1, open + offset + 3))\n\n  // Text open.\n  media = push(media, [['enter', text, context]])\n\n  // Always populated by defaults.\n\n  // Between.\n  media = push(\n    media,\n    resolveAll(\n      context.parser.constructs.insideSpan.null,\n      events.slice(open + offset + 4, close - 3),\n      context\n    )\n  )\n\n  // Text close, marker close, label close.\n  media = push(media, [\n    ['exit', text, context],\n    events[close - 2],\n    events[close - 1],\n    ['exit', label, context]\n  ])\n\n  // Reference, resource, or so.\n  media = push(media, events.slice(close + 1))\n\n  // Media close.\n  media = push(media, [['exit', group, context]])\n  splice(events, open, events.length, media)\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelEnd(effects, ok, nok) {\n  const self = this\n  let index = self.events.length\n  /** @type {Token} */\n  let labelStart\n  /** @type {boolean} */\n  let defined\n\n  // Find an opening.\n  while (index--) {\n    if (\n      (self.events[index][1].type === 'labelImage' ||\n        self.events[index][1].type === 'labelLink') &&\n      !self.events[index][1]._balanced\n    ) {\n      labelStart = self.events[index][1]\n      break\n    }\n  }\n  return start\n\n  /**\n   * Start of label end.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // If there is not an okay opening.\n    if (!labelStart) {\n      return nok(code)\n    }\n\n    // If the corresponding label (link) start is marked as inactive,\n    // it means we’d be wrapping a link, like this:\n    //\n    // ```markdown\n    // > | a [b [c](d) e](f) g.\n    //                  ^\n    // ```\n    //\n    // We can’t have that, so it’s just balanced brackets.\n    if (labelStart._inactive) {\n      return labelEndNok(code)\n    }\n    defined = self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize({\n          start: labelStart.end,\n          end: self.now()\n        })\n      )\n    )\n    effects.enter('labelEnd')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelEnd')\n    return after\n  }\n\n  /**\n   * After `]`.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // Note: `markdown-rs` also parses GFM footnotes here, which for us is in\n    // an extension.\n\n    // Resource (`[asd](fgh)`)?\n    if (code === 40) {\n      return effects.attempt(\n        resourceConstruct,\n        labelEndOk,\n        defined ? labelEndOk : labelEndNok\n      )(code)\n    }\n\n    // Full (`[asd][fgh]`) or collapsed (`[asd][]`) reference?\n    if (code === 91) {\n      return effects.attempt(\n        referenceFullConstruct,\n        labelEndOk,\n        defined ? referenceNotFull : labelEndNok\n      )(code)\n    }\n\n    // Shortcut (`[asd]`) reference?\n    return defined ? labelEndOk(code) : labelEndNok(code)\n  }\n\n  /**\n   * After `]`, at `[`, but not at a full reference.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] b\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceNotFull(code) {\n    return effects.attempt(\n      referenceCollapsedConstruct,\n      labelEndOk,\n      labelEndNok\n    )(code)\n  }\n\n  /**\n   * Done, we found something.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *           ^\n   * > | [a][b] c\n   *           ^\n   * > | [a][] b\n   *          ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndOk(code) {\n    // Note: `markdown-rs` does a bunch of stuff here.\n    return ok(code)\n  }\n\n  /**\n   * Done, it’s nothing.\n   *\n   * There was an okay opening, but we didn’t match anything.\n   *\n   * ```markdown\n   * > | [a](b c\n   *        ^\n   * > | [a][b c\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndNok(code) {\n    labelStart._balanced = true\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeResource(effects, ok, nok) {\n  return resourceStart\n\n  /**\n   * At a resource.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceStart(code) {\n    effects.enter('resource')\n    effects.enter('resourceMarker')\n    effects.consume(code)\n    effects.exit('resourceMarker')\n    return resourceBefore\n  }\n\n  /**\n   * In resource, after `(`, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBefore(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceOpen)(code)\n      : resourceOpen(code)\n  }\n\n  /**\n   * In resource, after optional whitespace, at `)` or a destination.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceOpen(code) {\n    if (code === 41) {\n      return resourceEnd(code)\n    }\n    return factoryDestination(\n      effects,\n      resourceDestinationAfter,\n      resourceDestinationMissing,\n      'resourceDestination',\n      'resourceDestinationLiteral',\n      'resourceDestinationLiteralMarker',\n      'resourceDestinationRaw',\n      'resourceDestinationString',\n      32\n    )(code)\n  }\n\n  /**\n   * In resource, after destination, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationAfter(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceBetween)(code)\n      : resourceEnd(code)\n  }\n\n  /**\n   * At invalid destination.\n   *\n   * ```markdown\n   * > | [a](<<) b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationMissing(code) {\n    return nok(code)\n  }\n\n  /**\n   * In resource, after destination and whitespace, at `(` or title.\n   *\n   * ```markdown\n   * > | [a](b ) c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBetween(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      return factoryTitle(\n        effects,\n        resourceTitleAfter,\n        nok,\n        'resourceTitle',\n        'resourceTitleMarker',\n        'resourceTitleString'\n      )(code)\n    }\n    return resourceEnd(code)\n  }\n\n  /**\n   * In resource, after title, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b \"c\") d\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceTitleAfter(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceEnd)(code)\n      : resourceEnd(code)\n  }\n\n  /**\n   * In resource, at `)`.\n   *\n   * ```markdown\n   * > | [a](b) d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceEnd(code) {\n    if (code === 41) {\n      effects.enter('resourceMarker')\n      effects.consume(code)\n      effects.exit('resourceMarker')\n      effects.exit('resource')\n      return ok\n    }\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceFull(effects, ok, nok) {\n  const self = this\n  return referenceFull\n\n  /**\n   * In a reference (full), at the `[`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFull(code) {\n    return factoryLabel.call(\n      self,\n      effects,\n      referenceFullAfter,\n      referenceFullMissing,\n      'reference',\n      'referenceMarker',\n      'referenceString'\n    )(code)\n  }\n\n  /**\n   * In a reference (full), after `]`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullAfter(code) {\n    return self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n      )\n    )\n      ? ok(code)\n      : nok(code)\n  }\n\n  /**\n   * In reference (full) that was missing.\n   *\n   * ```markdown\n   * > | [a][b d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullMissing(code) {\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceCollapsed(effects, ok, nok) {\n  return referenceCollapsedStart\n\n  /**\n   * In reference (collapsed), at `[`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceCollapsedStart(code) {\n    // We only attempt a collapsed label if there’s a `[`.\n\n    effects.enter('reference')\n    effects.enter('referenceMarker')\n    effects.consume(code)\n    effects.exit('referenceMarker')\n    return referenceCollapsedOpen\n  }\n\n  /**\n   * In reference (collapsed), at `]`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *         ^\n   * ```\n   *\n   *  @type {State}\n   */\n  function referenceCollapsedOpen(code) {\n    if (code === 93) {\n      effects.enter('referenceMarker')\n      effects.consume(code)\n      effects.exit('referenceMarker')\n      effects.exit('reference')\n      return ok\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {labelEnd} from './label-end.js'\n\n/** @type {Construct} */\nexport const labelStartImage = {\n  name: 'labelStartImage',\n  tokenize: tokenizeLabelStartImage,\n  resolveAll: labelEnd.resolveAll\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartImage(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of label (image) start.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('labelImage')\n    effects.enter('labelImageMarker')\n    effects.consume(code)\n    effects.exit('labelImageMarker')\n    return open\n  }\n\n  /**\n   * After `!`, at `[`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 91) {\n      effects.enter('labelMarker')\n      effects.consume(code)\n      effects.exit('labelMarker')\n      effects.exit('labelImage')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `![`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *         ^\n   * ```\n   *\n   * This is needed in because, when GFM footnotes are enabled, images never\n   * form when started with a `^`.\n   * Instead, links form:\n   *\n   * ```markdown\n   * ![^a](b)\n   *\n   * ![^a][b]\n   *\n   * [b]: c\n   * ```\n   *\n   * ```html\n   * <p>!<a href=\\\"b\\\">^a</a></p>\n   * <p>!<a href=\\\"c\\\">^a</a></p>\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // To do: use a new field to do this, this is still needed for\n    // `micromark-extension-gfm-footnote`, but the `label-start-link`\n    // behavior isn’t.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport {\n  markdownLineEndingOrSpace,\n  unicodePunctuation,\n  unicodeWhitespace\n} from 'micromark-util-character'\n/**\n * Classify whether a code represents whitespace, punctuation, or something\n * else.\n *\n * Used for attention (emphasis, strong), whose sequences can open or close\n * based on the class of surrounding characters.\n *\n * > 👉 **Note**: eof (`null`) is seen as whitespace.\n *\n * @param {Code} code\n *   Code.\n * @returns {typeof constants.characterGroupWhitespace | typeof constants.characterGroupPunctuation | undefined}\n *   Group.\n */\nexport function classifyCharacter(code) {\n  if (\n    code === null ||\n    markdownLineEndingOrSpace(code) ||\n    unicodeWhitespace(code)\n  ) {\n    return 1\n  }\n  if (unicodePunctuation(code)) {\n    return 2\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {push, splice} from 'micromark-util-chunked'\nimport {classifyCharacter} from 'micromark-util-classify-character'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/** @type {Construct} */\nexport const attention = {\n  name: 'attention',\n  tokenize: tokenizeAttention,\n  resolveAll: resolveAllAttention\n}\n\n/**\n * Take all events and resolve attention to emphasis or strong.\n *\n * @type {Resolver}\n */\nfunction resolveAllAttention(events, context) {\n  let index = -1\n  /** @type {number} */\n  let open\n  /** @type {Token} */\n  let group\n  /** @type {Token} */\n  let text\n  /** @type {Token} */\n  let openingSequence\n  /** @type {Token} */\n  let closingSequence\n  /** @type {number} */\n  let use\n  /** @type {Array<Event>} */\n  let nextEvents\n  /** @type {number} */\n  let offset\n\n  // Walk through all events.\n  //\n  // Note: performance of this is fine on an mb of normal markdown, but it’s\n  // a bottleneck for malicious stuff.\n  while (++index < events.length) {\n    // Find a token that can close.\n    if (\n      events[index][0] === 'enter' &&\n      events[index][1].type === 'attentionSequence' &&\n      events[index][1]._close\n    ) {\n      open = index\n\n      // Now walk back to find an opener.\n      while (open--) {\n        // Find a token that can open the closer.\n        if (\n          events[open][0] === 'exit' &&\n          events[open][1].type === 'attentionSequence' &&\n          events[open][1]._open &&\n          // If the markers are the same:\n          context.sliceSerialize(events[open][1]).charCodeAt(0) ===\n            context.sliceSerialize(events[index][1]).charCodeAt(0)\n        ) {\n          // If the opening can close or the closing can open,\n          // and the close size *is not* a multiple of three,\n          // but the sum of the opening and closing size *is* multiple of three,\n          // then don’t match.\n          if (\n            (events[open][1]._close || events[index][1]._open) &&\n            (events[index][1].end.offset - events[index][1].start.offset) % 3 &&\n            !(\n              (events[open][1].end.offset -\n                events[open][1].start.offset +\n                events[index][1].end.offset -\n                events[index][1].start.offset) %\n              3\n            )\n          ) {\n            continue\n          }\n\n          // Number of markers to use from the sequence.\n          use =\n            events[open][1].end.offset - events[open][1].start.offset > 1 &&\n            events[index][1].end.offset - events[index][1].start.offset > 1\n              ? 2\n              : 1\n          const start = Object.assign({}, events[open][1].end)\n          const end = Object.assign({}, events[index][1].start)\n          movePoint(start, -use)\n          movePoint(end, use)\n          openingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start,\n            end: Object.assign({}, events[open][1].end)\n          }\n          closingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start: Object.assign({}, events[index][1].start),\n            end\n          }\n          text = {\n            type: use > 1 ? 'strongText' : 'emphasisText',\n            start: Object.assign({}, events[open][1].end),\n            end: Object.assign({}, events[index][1].start)\n          }\n          group = {\n            type: use > 1 ? 'strong' : 'emphasis',\n            start: Object.assign({}, openingSequence.start),\n            end: Object.assign({}, closingSequence.end)\n          }\n          events[open][1].end = Object.assign({}, openingSequence.start)\n          events[index][1].start = Object.assign({}, closingSequence.end)\n          nextEvents = []\n\n          // If there are more markers in the opening, add them before.\n          if (events[open][1].end.offset - events[open][1].start.offset) {\n            nextEvents = push(nextEvents, [\n              ['enter', events[open][1], context],\n              ['exit', events[open][1], context]\n            ])\n          }\n\n          // Opening.\n          nextEvents = push(nextEvents, [\n            ['enter', group, context],\n            ['enter', openingSequence, context],\n            ['exit', openingSequence, context],\n            ['enter', text, context]\n          ])\n\n          // Always populated by defaults.\n\n          // Between.\n          nextEvents = push(\n            nextEvents,\n            resolveAll(\n              context.parser.constructs.insideSpan.null,\n              events.slice(open + 1, index),\n              context\n            )\n          )\n\n          // Closing.\n          nextEvents = push(nextEvents, [\n            ['exit', text, context],\n            ['enter', closingSequence, context],\n            ['exit', closingSequence, context],\n            ['exit', group, context]\n          ])\n\n          // If there are more markers in the closing, add them after.\n          if (events[index][1].end.offset - events[index][1].start.offset) {\n            offset = 2\n            nextEvents = push(nextEvents, [\n              ['enter', events[index][1], context],\n              ['exit', events[index][1], context]\n            ])\n          } else {\n            offset = 0\n          }\n          splice(events, open - 1, index - open + 3, nextEvents)\n          index = open + nextEvents.length - offset - 2\n          break\n        }\n      }\n    }\n  }\n\n  // Remove remaining sequences.\n  index = -1\n  while (++index < events.length) {\n    if (events[index][1].type === 'attentionSequence') {\n      events[index][1].type = 'data'\n    }\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeAttention(effects, ok) {\n  const attentionMarkers = this.parser.constructs.attentionMarkers.null\n  const previous = this.previous\n  const before = classifyCharacter(previous)\n\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Before a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    marker = code\n    effects.enter('attentionSequence')\n    return inside(code)\n  }\n\n  /**\n   * In a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return inside\n    }\n    const token = effects.exit('attentionSequence')\n\n    // To do: next major: move this to resolver, just like `markdown-rs`.\n    const after = classifyCharacter(code)\n\n    // Always populated by defaults.\n\n    const open =\n      !after || (after === 2 && before) || attentionMarkers.includes(code)\n    const close =\n      !before || (before === 2 && after) || attentionMarkers.includes(previous)\n    token._open = Boolean(marker === 42 ? open : open && (before || !close))\n    token._close = Boolean(marker === 42 ? close : close && (after || !open))\n    return ok(code)\n  }\n}\n\n/**\n * Move a point a bit.\n *\n * Note: `move` only works inside lines! It’s not possible to move past other\n * chunks (replacement characters, tabs, or line endings).\n *\n * @param {Point} point\n * @param {number} offset\n * @returns {void}\n */\nfunction movePoint(point, offset) {\n  point.column += offset\n  point.offset += offset\n  point._bufferIndex += offset\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  asciiAtext,\n  asciiControl\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const autolink = {\n  name: 'autolink',\n  tokenize: tokenizeAutolink\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeAutolink(effects, ok, nok) {\n  let size = 0\n  return start\n\n  /**\n   * Start of an autolink.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *      ^\n   * > | a<user@example.com>b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('autolink')\n    effects.enter('autolinkMarker')\n    effects.consume(code)\n    effects.exit('autolinkMarker')\n    effects.enter('autolinkProtocol')\n    return open\n  }\n\n  /**\n   * After `<`, at protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *       ^\n   * > | a<user@example.com>b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return schemeOrEmailAtext\n    }\n    return emailAtext(code)\n  }\n\n  /**\n   * At second byte of protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeOrEmailAtext(code) {\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) {\n      // Count the previous alphabetical from `open` too.\n      size = 1\n      return schemeInsideOrEmailAtext(code)\n    }\n    return emailAtext(code)\n  }\n\n  /**\n   * In ambiguous protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeInsideOrEmailAtext(code) {\n    if (code === 58) {\n      effects.consume(code)\n      size = 0\n      return urlInside\n    }\n\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (\n      (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) &&\n      size++ < 32\n    ) {\n      effects.consume(code)\n      return schemeInsideOrEmailAtext\n    }\n    size = 0\n    return emailAtext(code)\n  }\n\n  /**\n   * After protocol, in URL.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function urlInside(code) {\n    if (code === 62) {\n      effects.exit('autolinkProtocol')\n      effects.enter('autolinkMarker')\n      effects.consume(code)\n      effects.exit('autolinkMarker')\n      effects.exit('autolink')\n      return ok\n    }\n\n    // ASCII control, space, or `<`.\n    if (code === null || code === 32 || code === 60 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return urlInside\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtext(code) {\n    if (code === 64) {\n      effects.consume(code)\n      return emailAtSignOrDot\n    }\n    if (asciiAtext(code)) {\n      effects.consume(code)\n      return emailAtext\n    }\n    return nok(code)\n  }\n\n  /**\n   * In label, after at-sign or dot.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                 ^       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtSignOrDot(code) {\n    return asciiAlphanumeric(code) ? emailLabel(code) : nok(code)\n  }\n\n  /**\n   * In label, where `.` and `>` are allowed.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailLabel(code) {\n    if (code === 46) {\n      effects.consume(code)\n      size = 0\n      return emailAtSignOrDot\n    }\n    if (code === 62) {\n      // Exit, then change the token type.\n      effects.exit('autolinkProtocol').type = 'autolinkEmail'\n      effects.enter('autolinkMarker')\n      effects.consume(code)\n      effects.exit('autolinkMarker')\n      effects.exit('autolink')\n      return ok\n    }\n    return emailValue(code)\n  }\n\n  /**\n   * In label, where `.` and `>` are *not* allowed.\n   *\n   * Though, this is also used in `emailLabel` to parse other values.\n   *\n   * ```markdown\n   * > | a<user.name@ex-ample.com>b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailValue(code) {\n    // ASCII alphanumeric or `-`.\n    if ((code === 45 || asciiAlphanumeric(code)) && size++ < 63) {\n      const next = code === 45 ? emailValue : emailLabel\n      effects.consume(code)\n      return next\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const htmlText = {\n  name: 'htmlText',\n  tokenize: tokenizeHtmlText\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlText(effects, ok, nok) {\n  const self = this\n  /** @type {NonNullable<Code> | undefined} */\n  let marker\n  /** @type {number} */\n  let index\n  /** @type {State} */\n  let returnState\n  return start\n\n  /**\n   * Start of HTML (text).\n   *\n   * ```markdown\n   * > | a <b> c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('htmlText')\n    effects.enter('htmlTextData')\n    effects.consume(code)\n    return open\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | a <b> c\n   *        ^\n   * > | a <!doctype> c\n   *        ^\n   * > | a <!--b--> c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationOpen\n    }\n    if (code === 47) {\n      effects.consume(code)\n      return tagCloseStart\n    }\n    if (code === 63) {\n      effects.consume(code)\n      return instruction\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | a <!doctype> c\n   *         ^\n   * > | a <!--b--> c\n   *         ^\n   * > | a <![CDATA[>&<]]> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentOpenInside\n    }\n    if (code === 91) {\n      effects.consume(code)\n      index = 0\n      return cdataOpenInside\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return declaration\n    }\n    return nok(code)\n  }\n\n  /**\n   * In a comment, after `<!-`, at another `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentEnd\n    }\n    return nok(code)\n  }\n\n  /**\n   * In comment.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function comment(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 45) {\n      effects.consume(code)\n      return commentClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = comment\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return comment\n  }\n\n  /**\n   * In comment, after `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentClose(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentEnd\n    }\n    return comment(code)\n  }\n\n  /**\n   * In comment, after `--`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentEnd(code) {\n    return code === 62\n      ? end(code)\n      : code === 45\n      ? commentClose(code)\n      : comment(code)\n  }\n\n  /**\n   * After `<![`, in CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *          ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = 'CDATA['\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code)\n      return index === value.length ? cdata : cdataOpenInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * In CDATA.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdata(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.consume(code)\n      return cdataClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = cdata\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return cdata\n  }\n\n  /**\n   * In CDATA, after `]`, at another `]`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataClose(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n    return cdata(code)\n  }\n\n  /**\n   * In CDATA, after `]]`, at `>`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataEnd(code) {\n    if (code === 62) {\n      return end(code)\n    }\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n    return cdata(code)\n  }\n\n  /**\n   * In declaration.\n   *\n   * ```markdown\n   * > | a <!b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declaration(code) {\n    if (code === null || code === 62) {\n      return end(code)\n    }\n    if (markdownLineEnding(code)) {\n      returnState = declaration\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return declaration\n  }\n\n  /**\n   * In instruction.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instruction(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 63) {\n      effects.consume(code)\n      return instructionClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = instruction\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return instruction\n  }\n\n  /**\n   * In instruction, after `?`, at `>`.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instructionClose(code) {\n    return code === 62 ? end(code) : instruction(code)\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `</x`, in a tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagClose(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n    return tagCloseBetween(code)\n  }\n\n  /**\n   * In closing tag, after tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseBetween(code) {\n    if (markdownLineEnding(code)) {\n      returnState = tagCloseBetween\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagCloseBetween\n    }\n    return end(code)\n  }\n\n  /**\n   * After `<x`, in opening tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpen(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In opening tag, after tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenBetween(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return end\n    }\n\n    // ASCII alphabetical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenBetween\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenBetween\n    }\n    return end(code)\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeName(code) {\n    // ASCII alphabetical and `-`, `.`, `:`, and `_`.\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n    return tagOpenAttributeNameAfter(code)\n  }\n\n  /**\n   * After attribute name, before initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeNameAfter\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeNameAfter\n    }\n    return tagOpenBetween(code)\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      marker = code\n      return tagOpenAttributeValueQuoted\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueBefore\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueUnquoted\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuoted(code) {\n    if (code === marker) {\n      effects.consume(code)\n      marker = undefined\n      return tagOpenAttributeValueQuotedAfter\n    }\n    if (code === null) {\n      return nok(code)\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueQuoted\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueQuoted\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 60 ||\n      code === 61 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueUnquoted\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the end\n   * of the tag.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In certain circumstances of a tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function end(code) {\n    if (code === 62) {\n      effects.consume(code)\n      effects.exit('htmlTextData')\n      effects.exit('htmlText')\n      return ok\n    }\n    return nok(code)\n  }\n\n  /**\n   * At eol.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   * > | a <!--a\n   *            ^\n   *   | b-->\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingBefore(code) {\n    effects.exit('htmlTextData')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return lineEndingAfter\n  }\n\n  /**\n   * After eol, at optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfter(code) {\n    // Always populated by defaults.\n\n    return markdownSpace(code)\n      ? factorySpace(\n          effects,\n          lineEndingAfterPrefix,\n          'linePrefix',\n          self.parser.constructs.disable.null.includes('codeIndented')\n            ? undefined\n            : 4\n        )(code)\n      : lineEndingAfterPrefix(code)\n  }\n\n  /**\n   * After eol, after optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfterPrefix(code) {\n    effects.enter('htmlTextData')\n    return returnState(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {labelEnd} from './label-end.js'\n\n/** @type {Construct} */\nexport const labelStartLink = {\n  name: 'labelStartLink',\n  tokenize: tokenizeLabelStartLink,\n  resolveAll: labelEnd.resolveAll\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartLink(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of label (link) start.\n   *\n   * ```markdown\n   * > | a [b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('labelLink')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelLink')\n    return after\n  }\n\n  /** @type {State} */\n  function after(code) {\n    // To do: this isn’t needed in `micromark-extension-gfm-footnote`,\n    // remove.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const hardBreakEscape = {\n  name: 'hardBreakEscape',\n  tokenize: tokenizeHardBreakEscape\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHardBreakEscape(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of a hard break (escape).\n   *\n   * ```markdown\n   * > | a\\\n   *      ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('hardBreakEscape')\n    effects.consume(code)\n    return after\n  }\n\n  /**\n   * After `\\`, at eol.\n   *\n   * ```markdown\n   * > | a\\\n   *       ^\n   *   | b\n   * ```\n   *\n   *  @type {State}\n   */\n  function after(code) {\n    if (markdownLineEnding(code)) {\n      effects.exit('hardBreakEscape')\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const codeText = {\n  name: 'codeText',\n  tokenize: tokenizeCodeText,\n  resolve: resolveCodeText,\n  previous\n}\n\n// To do: next major: don’t resolve, like `markdown-rs`.\n/** @type {Resolver} */\nfunction resolveCodeText(events) {\n  let tailExitIndex = events.length - 4\n  let headEnterIndex = 3\n  /** @type {number} */\n  let index\n  /** @type {number | undefined} */\n  let enter\n\n  // If we start and end with an EOL or a space.\n  if (\n    (events[headEnterIndex][1].type === 'lineEnding' ||\n      events[headEnterIndex][1].type === 'space') &&\n    (events[tailExitIndex][1].type === 'lineEnding' ||\n      events[tailExitIndex][1].type === 'space')\n  ) {\n    index = headEnterIndex\n\n    // And we have data.\n    while (++index < tailExitIndex) {\n      if (events[index][1].type === 'codeTextData') {\n        // Then we have padding.\n        events[headEnterIndex][1].type = 'codeTextPadding'\n        events[tailExitIndex][1].type = 'codeTextPadding'\n        headEnterIndex += 2\n        tailExitIndex -= 2\n        break\n      }\n    }\n  }\n\n  // Merge adjacent spaces and data.\n  index = headEnterIndex - 1\n  tailExitIndex++\n  while (++index <= tailExitIndex) {\n    if (enter === undefined) {\n      if (index !== tailExitIndex && events[index][1].type !== 'lineEnding') {\n        enter = index\n      }\n    } else if (\n      index === tailExitIndex ||\n      events[index][1].type === 'lineEnding'\n    ) {\n      events[enter][1].type = 'codeTextData'\n      if (index !== enter + 2) {\n        events[enter][1].end = events[index - 1][1].end\n        events.splice(enter + 2, index - enter - 2)\n        tailExitIndex -= index - enter - 2\n        index = enter + 2\n      }\n      enter = undefined\n    }\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Previous}\n */\nfunction previous(code) {\n  // If there is a previous code, there will always be a tail.\n  return (\n    code !== 96 ||\n    this.events[this.events.length - 1][1].type === 'characterEscape'\n  )\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeText(effects, ok, nok) {\n  const self = this\n  let sizeOpen = 0\n  /** @type {number} */\n  let size\n  /** @type {Token} */\n  let token\n  return start\n\n  /**\n   * Start of code (text).\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * > | \\`a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('codeText')\n    effects.enter('codeTextSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 96) {\n      effects.consume(code)\n      sizeOpen++\n      return sequenceOpen\n    }\n    effects.exit('codeTextSequence')\n    return between(code)\n  }\n\n  /**\n   * Between something and something else.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function between(code) {\n    // EOF.\n    if (code === null) {\n      return nok(code)\n    }\n\n    // To do: next major: don’t do spaces in resolve, but when compiling,\n    // like `markdown-rs`.\n    // Tabs don’t work, and virtual spaces don’t make sense.\n    if (code === 32) {\n      effects.enter('space')\n      effects.consume(code)\n      effects.exit('space')\n      return between\n    }\n\n    // Closing fence? Could also be data.\n    if (code === 96) {\n      token = effects.enter('codeTextSequence')\n      size = 0\n      return sequenceClose(code)\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return between\n    }\n\n    // Data.\n    effects.enter('codeTextData')\n    return data(code)\n  }\n\n  /**\n   * In data.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (\n      code === null ||\n      code === 32 ||\n      code === 96 ||\n      markdownLineEnding(code)\n    ) {\n      effects.exit('codeTextData')\n      return between(code)\n    }\n    effects.consume(code)\n    return data\n  }\n\n  /**\n   * In closing sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceClose(code) {\n    // More.\n    if (code === 96) {\n      effects.consume(code)\n      size++\n      return sequenceClose\n    }\n\n    // Done!\n    if (size === sizeOpen) {\n      effects.exit('codeTextSequence')\n      effects.exit('codeText')\n      return ok(code)\n    }\n\n    // More or less accents: mark as data.\n    token.type = 'codeTextData'\n    return data(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n */\n\nimport {\n  attention,\n  autolink,\n  blockQuote,\n  characterEscape,\n  characterReference,\n  codeFenced,\n  codeIndented,\n  codeText,\n  definition,\n  hardBreakEscape,\n  headingAtx,\n  htmlFlow,\n  htmlText,\n  labelEnd,\n  labelStartImage,\n  labelStartLink,\n  lineEnding,\n  list,\n  setextUnderline,\n  thematicBreak\n} from 'micromark-core-commonmark'\nimport {resolver as resolveText} from './initialize/text.js'\n\n/** @satisfies {Extension['document']} */\nexport const document = {\n  [42]: list,\n  [43]: list,\n  [45]: list,\n  [48]: list,\n  [49]: list,\n  [50]: list,\n  [51]: list,\n  [52]: list,\n  [53]: list,\n  [54]: list,\n  [55]: list,\n  [56]: list,\n  [57]: list,\n  [62]: blockQuote\n}\n\n/** @satisfies {Extension['contentInitial']} */\nexport const contentInitial = {\n  [91]: definition\n}\n\n/** @satisfies {Extension['flowInitial']} */\nexport const flowInitial = {\n  [-2]: codeIndented,\n  [-1]: codeIndented,\n  [32]: codeIndented\n}\n\n/** @satisfies {Extension['flow']} */\nexport const flow = {\n  [35]: headingAtx,\n  [42]: thematicBreak,\n  [45]: [setextUnderline, thematicBreak],\n  [60]: htmlFlow,\n  [61]: setextUnderline,\n  [95]: thematicBreak,\n  [96]: codeFenced,\n  [126]: codeFenced\n}\n\n/** @satisfies {Extension['string']} */\nexport const string = {\n  [38]: characterReference,\n  [92]: characterEscape\n}\n\n/** @satisfies {Extension['text']} */\nexport const text = {\n  [-5]: lineEnding,\n  [-4]: lineEnding,\n  [-3]: lineEnding,\n  [33]: labelStartImage,\n  [38]: characterReference,\n  [42]: attention,\n  [60]: [autolink, htmlText],\n  [91]: labelStartLink,\n  [92]: [hardBreakEscape, characterEscape],\n  [93]: labelEnd,\n  [95]: attention,\n  [96]: codeText\n}\n\n/** @satisfies {Extension['insideSpan']} */\nexport const insideSpan = {\n  null: [attention, resolveText]\n}\n\n/** @satisfies {Extension['attentionMarkers']} */\nexport const attentionMarkers = {\n  null: [42, 95]\n}\n\n/** @satisfies {Extension['disable']} */\nexport const disable = {\n  null: []\n}\n","/**\n * @typedef {import('micromark-util-types').Create} Create\n * @typedef {import('micromark-util-types').FullNormalizedExtension} FullNormalizedExtension\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n */\n\nimport {combineExtensions} from 'micromark-util-combine-extensions'\nimport {content} from './initialize/content.js'\nimport {document} from './initialize/document.js'\nimport {flow} from './initialize/flow.js'\nimport {text, string} from './initialize/text.js'\nimport {createTokenizer} from './create-tokenizer.js'\nimport * as defaultConstructs from './constructs.js'\n\n/**\n * @param {ParseOptions | null | undefined} [options]\n * @returns {ParseContext}\n */\nexport function parse(options) {\n  const settings = options || {}\n  const constructs =\n    /** @type {FullNormalizedExtension} */\n    combineExtensions([defaultConstructs, ...(settings.extensions || [])])\n\n  /** @type {ParseContext} */\n  const parser = {\n    defined: [],\n    lazy: {},\n    constructs,\n    content: create(content),\n    document: create(document),\n    flow: create(flow),\n    string: create(string),\n    text: create(text)\n  }\n  return parser\n\n  /**\n   * @param {InitialConstruct} initial\n   */\n  function create(initial) {\n    return creator\n    /** @type {Create} */\n    function creator(from) {\n      return createTokenizer(parser, initial, from)\n    }\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Value} Value\n */\n\n/**\n * @callback Preprocessor\n * @param {Value} value\n * @param {Encoding | null | undefined} [encoding]\n * @param {boolean | null | undefined} [end=false]\n * @returns {Array<Chunk>}\n */\n\nconst search = /[\\0\\t\\n\\r]/g\n\n/**\n * @returns {Preprocessor}\n */\nexport function preprocess() {\n  let column = 1\n  let buffer = ''\n  /** @type {boolean | undefined} */\n  let start = true\n  /** @type {boolean | undefined} */\n  let atCarriageReturn\n  return preprocessor\n\n  /** @type {Preprocessor} */\n  function preprocessor(value, encoding, end) {\n    /** @type {Array<Chunk>} */\n    const chunks = []\n    /** @type {RegExpMatchArray | null} */\n    let match\n    /** @type {number} */\n    let next\n    /** @type {number} */\n    let startPosition\n    /** @type {number} */\n    let endPosition\n    /** @type {Code} */\n    let code\n\n    // @ts-expect-error `Buffer` does allow an encoding.\n    value = buffer + value.toString(encoding)\n    startPosition = 0\n    buffer = ''\n    if (start) {\n      // To do: `markdown-rs` actually parses BOMs (byte order mark).\n      if (value.charCodeAt(0) === 65279) {\n        startPosition++\n      }\n      start = undefined\n    }\n    while (startPosition < value.length) {\n      search.lastIndex = startPosition\n      match = search.exec(value)\n      endPosition =\n        match && match.index !== undefined ? match.index : value.length\n      code = value.charCodeAt(endPosition)\n      if (!match) {\n        buffer = value.slice(startPosition)\n        break\n      }\n      if (code === 10 && startPosition === endPosition && atCarriageReturn) {\n        chunks.push(-3)\n        atCarriageReturn = undefined\n      } else {\n        if (atCarriageReturn) {\n          chunks.push(-5)\n          atCarriageReturn = undefined\n        }\n        if (startPosition < endPosition) {\n          chunks.push(value.slice(startPosition, endPosition))\n          column += endPosition - startPosition\n        }\n        switch (code) {\n          case 0: {\n            chunks.push(65533)\n            column++\n            break\n          }\n          case 9: {\n            next = Math.ceil(column / 4) * 4\n            chunks.push(-2)\n            while (column++ < next) chunks.push(-1)\n            break\n          }\n          case 10: {\n            chunks.push(-4)\n            column = 1\n            break\n          }\n          default: {\n            atCarriageReturn = true\n            column = 1\n          }\n        }\n      }\n      startPosition = endPosition + 1\n    }\n    if (end) {\n      if (atCarriageReturn) chunks.push(-5)\n      if (buffer) chunks.push(buffer)\n      chunks.push(null)\n    }\n    return chunks\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n */\n\nimport {subtokenize} from 'micromark-util-subtokenize'\n\n/**\n * @param {Array<Event>} events\n * @returns {Array<Event>}\n */\nexport function postprocess(events) {\n  while (!subtokenize(events)) {\n    // Empty\n  }\n  return events\n}\n","/**\n * Turn the number (in string form as either hexa- or plain decimal) coming from\n * a numeric character reference into a character.\n *\n * Sort of like `String.fromCharCode(Number.parseInt(value, base))`, but makes\n * non-characters and control characters safe.\n *\n * @param {string} value\n *   Value to decode.\n * @param {number} base\n *   Numeric base.\n * @returns {string}\n *   Character.\n */\nexport function decodeNumericCharacterReference(value, base) {\n  const code = Number.parseInt(value, base)\n  if (\n    // C0 except for HT, LF, FF, CR, space.\n    code < 9 ||\n    code === 11 ||\n    (code > 13 && code < 32) ||\n    // Control character (DEL) of C0, and C1 controls.\n    (code > 126 && code < 160) ||\n    // Lone high surrogates and low surrogates.\n    (code > 55295 && code < 57344) ||\n    // Noncharacters.\n    (code > 64975 && code < 65008) /* eslint-disable no-bitwise */ ||\n    (code & 65535) === 65535 ||\n    (code & 65535) === 65534 /* eslint-enable no-bitwise */ ||\n    // Out of range\n    code > 1114111\n  ) {\n    return '\\uFFFD'\n  }\n  return String.fromCharCode(code)\n}\n","import {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nconst characterEscapeOrReference =\n  /\\\\([!-/:-@[-`{-~])|&(#(?:\\d{1,7}|x[\\da-f]{1,6})|[\\da-z]{1,31});/gi\n\n/**\n * Decode markdown strings (which occur in places such as fenced code info\n * strings, destinations, labels, and titles).\n *\n * The “string” content type allows character escapes and -references.\n * This decodes those.\n *\n * @param {string} value\n *   Value to decode.\n * @returns {string}\n *   Decoded value.\n */\nexport function decodeString(value) {\n  return value.replace(characterEscapeOrReference, decode)\n}\n\n/**\n * @param {string} $0\n * @param {string} $1\n * @param {string} $2\n * @returns {string}\n */\nfunction decode($0, $1, $2) {\n  if ($1) {\n    // Escape.\n    return $1\n  }\n\n  // Reference.\n  const head = $2.charCodeAt(0)\n  if (head === 35) {\n    const head = $2.charCodeAt(1)\n    const hex = head === 120 || head === 88\n    return decodeNumericCharacterReference($2.slice(hex ? 2 : 1), hex ? 16 : 10)\n  }\n  return decodeNamedCharacterReference($2) || $0\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Serialize the positional info of a point, position (start and end points),\n * or node.\n *\n * @param {Node | NodeLike | Position | PositionLike | Point | PointLike | null | undefined} [value]\n *   Node, position, or point.\n * @returns {string}\n *   Pretty printed positional info of a node (`string`).\n *\n *   In the format of a range `ls:cs-le:ce` (when given `node` or `position`)\n *   or a point `l:c` (when given `point`), where `l` stands for line, `c` for\n *   column, `s` for `start`, and `e` for end.\n *   An empty string (`''`) is returned if the given value is neither `node`,\n *   `position`, nor `point`.\n */\nexport function stringifyPosition(value) {\n  // Nothing.\n  if (!value || typeof value !== 'object') {\n    return ''\n  }\n\n  // Node.\n  if ('position' in value || 'type' in value) {\n    return position(value.position)\n  }\n\n  // Position.\n  if ('start' in value || 'end' in value) {\n    return position(value)\n  }\n\n  // Point.\n  if ('line' in value || 'column' in value) {\n    return point(value)\n  }\n\n  // ?\n  return ''\n}\n\n/**\n * @param {Point | PointLike | null | undefined} point\n * @returns {string}\n */\nfunction point(point) {\n  return index(point && point.line) + ':' + index(point && point.column)\n}\n\n/**\n * @param {Position | PositionLike | null | undefined} pos\n * @returns {string}\n */\nfunction position(pos) {\n  return point(pos && pos.start) + '-' + point(pos && pos.end)\n}\n\n/**\n * @param {number | null | undefined} value\n * @returns {number}\n */\nfunction index(value) {\n  return value && typeof value === 'number' ? value : 1\n}\n","/**\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Value} Value\n *\n * @typedef {import('unist').Parent} UnistParent\n * @typedef {import('unist').Point} Point\n *\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('mdast').StaticPhrasingContent} StaticPhrasingContent\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Break} Break\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('mdast').Code} Code\n * @typedef {import('mdast').Definition} Definition\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('mdast').HTML} HTML\n * @typedef {import('mdast').Image} Image\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('mdast').List} List\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('mdast').Text} Text\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('mdast').ReferenceType} ReferenceType\n * @typedef {import('../index.js').CompileData} CompileData\n */\n\n/**\n * @typedef {Root | Content} Node\n * @typedef {Extract<Node, UnistParent>} Parent\n *\n * @typedef {Omit<UnistParent, 'type' | 'children'> & {type: 'fragment', children: Array<PhrasingContent>}} Fragment\n */\n\n/**\n * @callback Transform\n *   Extra transform, to change the AST afterwards.\n * @param {Root} tree\n *   Tree to transform.\n * @returns {Root | undefined | null | void}\n *   New tree or nothing (in which case the current tree is used).\n *\n * @callback Handle\n *   Handle a token.\n * @param {CompileContext} this\n *   Context.\n * @param {Token} token\n *   Current token.\n * @returns {void}\n *   Nothing.\n *\n * @typedef {Record<string, Handle>} Handles\n *   Token types mapping to handles\n *\n * @callback OnEnterError\n *   Handle the case where the `right` token is open, but it is closed (by the\n *   `left` token) or because we reached the end of the document.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token | undefined} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {void}\n *   Nothing.\n *\n * @callback OnExitError\n *   Handle the case where the `right` token is open but it is closed by\n *   exiting the `left` token.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {void}\n *   Nothing.\n *\n * @typedef {[Token, OnEnterError | undefined]} TokenTuple\n *   Open token on the stack, with an optional error handler for when\n *   that token isn’t closed properly.\n */\n\n/**\n * @typedef Config\n *   Configuration.\n *\n *   We have our defaults, but extensions will add more.\n * @property {Array<string>} canContainEols\n *   Token types where line endings are used.\n * @property {Handles} enter\n *   Opening handles.\n * @property {Handles} exit\n *   Closing handles.\n * @property {Array<Transform>} transforms\n *   Tree transforms.\n *\n * @typedef {Partial<Config>} Extension\n *   Change how markdown tokens from micromark are turned into mdast.\n *\n * @typedef CompileContext\n *   mdast compiler context.\n * @property {Array<Node | Fragment>} stack\n *   Stack of nodes.\n * @property {Array<TokenTuple>} tokenStack\n *   Stack of tokens.\n * @property {<Key extends keyof CompileData>(key: Key) => CompileData[Key]} getData\n *   Get data from the key/value store.\n * @property {<Key extends keyof CompileData>(key: Key, value?: CompileData[Key]) => void} setData\n *   Set data into the key/value store.\n * @property {(this: CompileContext) => void} buffer\n *   Capture some of the output data.\n * @property {(this: CompileContext) => string} resume\n *   Stop capturing and access the output data.\n * @property {<Kind extends Node>(this: CompileContext, node: Kind, token: Token, onError?: OnEnterError) => Kind} enter\n *   Enter a token.\n * @property {(this: CompileContext, token: Token, onError?: OnExitError) => Node} exit\n *   Exit a token.\n * @property {TokenizeContext['sliceSerialize']} sliceSerialize\n *   Get the string value of a token.\n * @property {Config} config\n *   Configuration.\n *\n * @typedef FromMarkdownOptions\n *   Configuration for how to build mdast.\n * @property {Array<Extension | Array<Extension>> | null | undefined} [mdastExtensions]\n *   Extensions for this utility to change how tokens are turned into a tree.\n *\n * @typedef {ParseOptions & FromMarkdownOptions} Options\n *   Configuration.\n */\n\n// To do: micromark: create a registry of tokens?\n// To do: next major: don’t return given `Node` from `enter`.\n// To do: next major: remove setter/getter.\n\nimport {toString} from 'mdast-util-to-string'\nimport {parse} from 'micromark/lib/parse.js'\nimport {preprocess} from 'micromark/lib/preprocess.js'\nimport {postprocess} from 'micromark/lib/postprocess.js'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nimport {decodeString} from 'micromark-util-decode-string'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {stringifyPosition} from 'unist-util-stringify-position'\nconst own = {}.hasOwnProperty\n\n/**\n * @param value\n *   Markdown to parse.\n * @param encoding\n *   Character encoding for when `value` is `Buffer`.\n * @param options\n *   Configuration.\n * @returns\n *   mdast tree.\n */\nexport const fromMarkdown =\n  /**\n   * @type {(\n   *   ((value: Value, encoding: Encoding, options?: Options | null | undefined) => Root) &\n   *   ((value: Value, options?: Options | null | undefined) => Root)\n   * )}\n   */\n\n  /**\n   * @param {Value} value\n   * @param {Encoding | Options | null | undefined} [encoding]\n   * @param {Options | null | undefined} [options]\n   * @returns {Root}\n   */\n  function (value, encoding, options) {\n    if (typeof encoding !== 'string') {\n      options = encoding\n      encoding = undefined\n    }\n    return compiler(options)(\n      postprocess(\n        parse(options).document().write(preprocess()(value, encoding, true))\n      )\n    )\n  }\n\n/**\n * Note this compiler only understand complete buffering, not streaming.\n *\n * @param {Options | null | undefined} [options]\n */\nfunction compiler(options) {\n  /** @type {Config} */\n  const config = {\n    transforms: [],\n    canContainEols: ['emphasis', 'fragment', 'heading', 'paragraph', 'strong'],\n    enter: {\n      autolink: opener(link),\n      autolinkProtocol: onenterdata,\n      autolinkEmail: onenterdata,\n      atxHeading: opener(heading),\n      blockQuote: opener(blockQuote),\n      characterEscape: onenterdata,\n      characterReference: onenterdata,\n      codeFenced: opener(codeFlow),\n      codeFencedFenceInfo: buffer,\n      codeFencedFenceMeta: buffer,\n      codeIndented: opener(codeFlow, buffer),\n      codeText: opener(codeText, buffer),\n      codeTextData: onenterdata,\n      data: onenterdata,\n      codeFlowValue: onenterdata,\n      definition: opener(definition),\n      definitionDestinationString: buffer,\n      definitionLabelString: buffer,\n      definitionTitleString: buffer,\n      emphasis: opener(emphasis),\n      hardBreakEscape: opener(hardBreak),\n      hardBreakTrailing: opener(hardBreak),\n      htmlFlow: opener(html, buffer),\n      htmlFlowData: onenterdata,\n      htmlText: opener(html, buffer),\n      htmlTextData: onenterdata,\n      image: opener(image),\n      label: buffer,\n      link: opener(link),\n      listItem: opener(listItem),\n      listItemValue: onenterlistitemvalue,\n      listOrdered: opener(list, onenterlistordered),\n      listUnordered: opener(list),\n      paragraph: opener(paragraph),\n      reference: onenterreference,\n      referenceString: buffer,\n      resourceDestinationString: buffer,\n      resourceTitleString: buffer,\n      setextHeading: opener(heading),\n      strong: opener(strong),\n      thematicBreak: opener(thematicBreak)\n    },\n    exit: {\n      atxHeading: closer(),\n      atxHeadingSequence: onexitatxheadingsequence,\n      autolink: closer(),\n      autolinkEmail: onexitautolinkemail,\n      autolinkProtocol: onexitautolinkprotocol,\n      blockQuote: closer(),\n      characterEscapeValue: onexitdata,\n      characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,\n      characterReferenceMarkerNumeric: onexitcharacterreferencemarker,\n      characterReferenceValue: onexitcharacterreferencevalue,\n      codeFenced: closer(onexitcodefenced),\n      codeFencedFence: onexitcodefencedfence,\n      codeFencedFenceInfo: onexitcodefencedfenceinfo,\n      codeFencedFenceMeta: onexitcodefencedfencemeta,\n      codeFlowValue: onexitdata,\n      codeIndented: closer(onexitcodeindented),\n      codeText: closer(onexitcodetext),\n      codeTextData: onexitdata,\n      data: onexitdata,\n      definition: closer(),\n      definitionDestinationString: onexitdefinitiondestinationstring,\n      definitionLabelString: onexitdefinitionlabelstring,\n      definitionTitleString: onexitdefinitiontitlestring,\n      emphasis: closer(),\n      hardBreakEscape: closer(onexithardbreak),\n      hardBreakTrailing: closer(onexithardbreak),\n      htmlFlow: closer(onexithtmlflow),\n      htmlFlowData: onexitdata,\n      htmlText: closer(onexithtmltext),\n      htmlTextData: onexitdata,\n      image: closer(onexitimage),\n      label: onexitlabel,\n      labelText: onexitlabeltext,\n      lineEnding: onexitlineending,\n      link: closer(onexitlink),\n      listItem: closer(),\n      listOrdered: closer(),\n      listUnordered: closer(),\n      paragraph: closer(),\n      referenceString: onexitreferencestring,\n      resourceDestinationString: onexitresourcedestinationstring,\n      resourceTitleString: onexitresourcetitlestring,\n      resource: onexitresource,\n      setextHeading: closer(onexitsetextheading),\n      setextHeadingLineSequence: onexitsetextheadinglinesequence,\n      setextHeadingText: onexitsetextheadingtext,\n      strong: closer(),\n      thematicBreak: closer()\n    }\n  }\n  configure(config, (options || {}).mdastExtensions || [])\n\n  /** @type {CompileData} */\n  const data = {}\n  return compile\n\n  /**\n   * Turn micromark events into an mdast tree.\n   *\n   * @param {Array<Event>} events\n   *   Events.\n   * @returns {Root}\n   *   mdast tree.\n   */\n  function compile(events) {\n    /** @type {Root} */\n    let tree = {\n      type: 'root',\n      children: []\n    }\n    /** @type {Omit<CompileContext, 'sliceSerialize'>} */\n    const context = {\n      stack: [tree],\n      tokenStack: [],\n      config,\n      enter,\n      exit,\n      buffer,\n      resume,\n      setData,\n      getData\n    }\n    /** @type {Array<number>} */\n    const listStack = []\n    let index = -1\n    while (++index < events.length) {\n      // We preprocess lists to add `listItem` tokens, and to infer whether\n      // items the list itself are spread out.\n      if (\n        events[index][1].type === 'listOrdered' ||\n        events[index][1].type === 'listUnordered'\n      ) {\n        if (events[index][0] === 'enter') {\n          listStack.push(index)\n        } else {\n          const tail = listStack.pop()\n          index = prepareList(events, tail, index)\n        }\n      }\n    }\n    index = -1\n    while (++index < events.length) {\n      const handler = config[events[index][0]]\n      if (own.call(handler, events[index][1].type)) {\n        handler[events[index][1].type].call(\n          Object.assign(\n            {\n              sliceSerialize: events[index][2].sliceSerialize\n            },\n            context\n          ),\n          events[index][1]\n        )\n      }\n    }\n\n    // Handle tokens still being open.\n    if (context.tokenStack.length > 0) {\n      const tail = context.tokenStack[context.tokenStack.length - 1]\n      const handler = tail[1] || defaultOnError\n      handler.call(context, undefined, tail[0])\n    }\n\n    // Figure out `root` position.\n    tree.position = {\n      start: point(\n        events.length > 0\n          ? events[0][1].start\n          : {\n              line: 1,\n              column: 1,\n              offset: 0\n            }\n      ),\n      end: point(\n        events.length > 0\n          ? events[events.length - 2][1].end\n          : {\n              line: 1,\n              column: 1,\n              offset: 0\n            }\n      )\n    }\n\n    // Call transforms.\n    index = -1\n    while (++index < config.transforms.length) {\n      tree = config.transforms[index](tree) || tree\n    }\n    return tree\n  }\n\n  /**\n   * @param {Array<Event>} events\n   * @param {number} start\n   * @param {number} length\n   * @returns {number}\n   */\n  function prepareList(events, start, length) {\n    let index = start - 1\n    let containerBalance = -1\n    let listSpread = false\n    /** @type {Token | undefined} */\n    let listItem\n    /** @type {number | undefined} */\n    let lineIndex\n    /** @type {number | undefined} */\n    let firstBlankLineIndex\n    /** @type {boolean | undefined} */\n    let atMarker\n    while (++index <= length) {\n      const event = events[index]\n      if (\n        event[1].type === 'listUnordered' ||\n        event[1].type === 'listOrdered' ||\n        event[1].type === 'blockQuote'\n      ) {\n        if (event[0] === 'enter') {\n          containerBalance++\n        } else {\n          containerBalance--\n        }\n        atMarker = undefined\n      } else if (event[1].type === 'lineEndingBlank') {\n        if (event[0] === 'enter') {\n          if (\n            listItem &&\n            !atMarker &&\n            !containerBalance &&\n            !firstBlankLineIndex\n          ) {\n            firstBlankLineIndex = index\n          }\n          atMarker = undefined\n        }\n      } else if (\n        event[1].type === 'linePrefix' ||\n        event[1].type === 'listItemValue' ||\n        event[1].type === 'listItemMarker' ||\n        event[1].type === 'listItemPrefix' ||\n        event[1].type === 'listItemPrefixWhitespace'\n      ) {\n        // Empty.\n      } else {\n        atMarker = undefined\n      }\n      if (\n        (!containerBalance &&\n          event[0] === 'enter' &&\n          event[1].type === 'listItemPrefix') ||\n        (containerBalance === -1 &&\n          event[0] === 'exit' &&\n          (event[1].type === 'listUnordered' ||\n            event[1].type === 'listOrdered'))\n      ) {\n        if (listItem) {\n          let tailIndex = index\n          lineIndex = undefined\n          while (tailIndex--) {\n            const tailEvent = events[tailIndex]\n            if (\n              tailEvent[1].type === 'lineEnding' ||\n              tailEvent[1].type === 'lineEndingBlank'\n            ) {\n              if (tailEvent[0] === 'exit') continue\n              if (lineIndex) {\n                events[lineIndex][1].type = 'lineEndingBlank'\n                listSpread = true\n              }\n              tailEvent[1].type = 'lineEnding'\n              lineIndex = tailIndex\n            } else if (\n              tailEvent[1].type === 'linePrefix' ||\n              tailEvent[1].type === 'blockQuotePrefix' ||\n              tailEvent[1].type === 'blockQuotePrefixWhitespace' ||\n              tailEvent[1].type === 'blockQuoteMarker' ||\n              tailEvent[1].type === 'listItemIndent'\n            ) {\n              // Empty\n            } else {\n              break\n            }\n          }\n          if (\n            firstBlankLineIndex &&\n            (!lineIndex || firstBlankLineIndex < lineIndex)\n          ) {\n            listItem._spread = true\n          }\n\n          // Fix position.\n          listItem.end = Object.assign(\n            {},\n            lineIndex ? events[lineIndex][1].start : event[1].end\n          )\n          events.splice(lineIndex || index, 0, ['exit', listItem, event[2]])\n          index++\n          length++\n        }\n\n        // Create a new list item.\n        if (event[1].type === 'listItemPrefix') {\n          listItem = {\n            type: 'listItem',\n            _spread: false,\n            start: Object.assign({}, event[1].start),\n            // @ts-expect-error: we’ll add `end` in a second.\n            end: undefined\n          }\n          // @ts-expect-error: `listItem` is most definitely defined, TS...\n          events.splice(index, 0, ['enter', listItem, event[2]])\n          index++\n          length++\n          firstBlankLineIndex = undefined\n          atMarker = true\n        }\n      }\n    }\n    events[start][1]._spread = listSpread\n    return length\n  }\n\n  /**\n   * Set data.\n   *\n   * @template {keyof CompileData} Key\n   *   Field type.\n   * @param {Key} key\n   *   Key of field.\n   * @param {CompileData[Key]} [value]\n   *   New value.\n   * @returns {void}\n   *   Nothing.\n   */\n  function setData(key, value) {\n    data[key] = value\n  }\n\n  /**\n   * Get data.\n   *\n   * @template {keyof CompileData} Key\n   *   Field type.\n   * @param {Key} key\n   *   Key of field.\n   * @returns {CompileData[Key]}\n   *   Value.\n   */\n  function getData(key) {\n    return data[key]\n  }\n\n  /**\n   * Create an opener handle.\n   *\n   * @param {(token: Token) => Node} create\n   *   Create a node.\n   * @param {Handle} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function opener(create, and) {\n    return open\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {void}\n     */\n    function open(token) {\n      enter.call(this, create(token), token)\n      if (and) and.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {void}\n   */\n  function buffer() {\n    this.stack.push({\n      type: 'fragment',\n      children: []\n    })\n  }\n\n  /**\n   * @template {Node} Kind\n   *   Node type.\n   * @this {CompileContext}\n   *   Context.\n   * @param {Kind} node\n   *   Node to enter.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnEnterError | undefined} [errorHandler]\n   *   Handle the case where this token is open, but it is closed by something else.\n   * @returns {Kind}\n   *   The given node.\n   */\n  function enter(node, token, errorHandler) {\n    const parent = this.stack[this.stack.length - 1]\n    // @ts-expect-error: Assume `Node` can exist as a child of `parent`.\n    parent.children.push(node)\n    this.stack.push(node)\n    this.tokenStack.push([token, errorHandler])\n    // @ts-expect-error: `end` will be patched later.\n    node.position = {\n      start: point(token.start)\n    }\n    return node\n  }\n\n  /**\n   * Create a closer handle.\n   *\n   * @param {Handle} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function closer(and) {\n    return close\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {void}\n     */\n    function close(token) {\n      if (and) and.call(this, token)\n      exit.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   *   Context.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnExitError | undefined} [onExitError]\n   *   Handle the case where another token is open.\n   * @returns {Node}\n   *   The closed node.\n   */\n  function exit(token, onExitError) {\n    const node = this.stack.pop()\n    const open = this.tokenStack.pop()\n    if (!open) {\n      throw new Error(\n        'Cannot close `' +\n          token.type +\n          '` (' +\n          stringifyPosition({\n            start: token.start,\n            end: token.end\n          }) +\n          '): it’s not open'\n      )\n    } else if (open[0].type !== token.type) {\n      if (onExitError) {\n        onExitError.call(this, token, open[0])\n      } else {\n        const handler = open[1] || defaultOnError\n        handler.call(this, token, open[0])\n      }\n    }\n    node.position.end = point(token.end)\n    return node\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {string}\n   */\n  function resume() {\n    return toString(this.stack.pop())\n  }\n\n  //\n  // Handlers.\n  //\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistordered() {\n    setData('expectingFirstListItemValue', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistitemvalue(token) {\n    if (getData('expectingFirstListItemValue')) {\n      const ancestor = this.stack[this.stack.length - 2]\n      ancestor.start = Number.parseInt(this.sliceSerialize(token), 10)\n      setData('expectingFirstListItemValue')\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfenceinfo() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.lang = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfencemeta() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.meta = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfence() {\n    // Exit if this is the closing fence.\n    if (getData('flowCodeInside')) return\n    this.buffer()\n    setData('flowCodeInside', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefenced() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data.replace(/^(\\r?\\n|\\r)|(\\r?\\n|\\r)$/g, '')\n    setData('flowCodeInside')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodeindented() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data.replace(/(\\r?\\n|\\r)$/g, '')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitionlabelstring(token) {\n    const label = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.label = label\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiontitlestring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.title = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiondestinationstring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.url = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitatxheadingsequence(token) {\n    const node = this.stack[this.stack.length - 1]\n    if (!node.depth) {\n      const depth = this.sliceSerialize(token).length\n      node.depth = depth\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadingtext() {\n    setData('setextHeadingSlurpLineEnding', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadinglinesequence(token) {\n    const node = this.stack[this.stack.length - 1]\n    node.depth = this.sliceSerialize(token).charCodeAt(0) === 61 ? 1 : 2\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheading() {\n    setData('setextHeadingSlurpLineEnding')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterdata(token) {\n    const node = this.stack[this.stack.length - 1]\n    let tail = node.children[node.children.length - 1]\n    if (!tail || tail.type !== 'text') {\n      // Add a new text node.\n      tail = text()\n      // @ts-expect-error: we’ll add `end` later.\n      tail.position = {\n        start: point(token.start)\n      }\n      // @ts-expect-error: Assume `parent` accepts `text`.\n      node.children.push(tail)\n    }\n    this.stack.push(tail)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitdata(token) {\n    const tail = this.stack.pop()\n    tail.value += this.sliceSerialize(token)\n    tail.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlineending(token) {\n    const context = this.stack[this.stack.length - 1]\n    // If we’re at a hard break, include the line ending in there.\n    if (getData('atHardBreak')) {\n      const tail = context.children[context.children.length - 1]\n      tail.position.end = point(token.end)\n      setData('atHardBreak')\n      return\n    }\n    if (\n      !getData('setextHeadingSlurpLineEnding') &&\n      config.canContainEols.includes(context.type)\n    ) {\n      onenterdata.call(this, token)\n      onexitdata.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithardbreak() {\n    setData('atHardBreak', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmlflow() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmltext() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcodetext() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlink() {\n    const node = this.stack[this.stack.length - 1]\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n    // To do: clean.\n    if (getData('inReference')) {\n      /** @type {ReferenceType} */\n      const referenceType = getData('referenceType') || 'shortcut'\n      node.type += 'Reference'\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType\n      // @ts-expect-error: mutate.\n      delete node.url\n      delete node.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier\n      // @ts-expect-error: mutate.\n      delete node.label\n    }\n    setData('referenceType')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitimage() {\n    const node = this.stack[this.stack.length - 1]\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n    // To do: clean.\n    if (getData('inReference')) {\n      /** @type {ReferenceType} */\n      const referenceType = getData('referenceType') || 'shortcut'\n      node.type += 'Reference'\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType\n      // @ts-expect-error: mutate.\n      delete node.url\n      delete node.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier\n      // @ts-expect-error: mutate.\n      delete node.label\n    }\n    setData('referenceType')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabeltext(token) {\n    const string = this.sliceSerialize(token)\n    const ancestor = this.stack[this.stack.length - 2]\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    ancestor.label = decodeString(string)\n    // @ts-expect-error: same as above.\n    ancestor.identifier = normalizeIdentifier(string).toLowerCase()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabel() {\n    const fragment = this.stack[this.stack.length - 1]\n    const value = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    // Assume a reference.\n    setData('inReference', true)\n    if (node.type === 'link') {\n      /** @type {Array<StaticPhrasingContent>} */\n      // @ts-expect-error: Assume static phrasing content.\n      const children = fragment.children\n      node.children = children\n    } else {\n      node.alt = value\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcedestinationstring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.url = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcetitlestring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.title = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresource() {\n    setData('inReference')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterreference() {\n    setData('referenceType', 'collapsed')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitreferencestring(token) {\n    const label = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    node.label = label\n    // @ts-expect-error: same as above.\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n    setData('referenceType', 'full')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcharacterreferencemarker(token) {\n    setData('characterReferenceType', token.type)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcharacterreferencevalue(token) {\n    const data = this.sliceSerialize(token)\n    const type = getData('characterReferenceType')\n    /** @type {string} */\n    let value\n    if (type) {\n      value = decodeNumericCharacterReference(\n        data,\n        type === 'characterReferenceMarkerNumeric' ? 10 : 16\n      )\n      setData('characterReferenceType')\n    } else {\n      const result = decodeNamedCharacterReference(data)\n      value = result\n    }\n    const tail = this.stack.pop()\n    tail.value += value\n    tail.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkprotocol(token) {\n    onexitdata.call(this, token)\n    const node = this.stack[this.stack.length - 1]\n    node.url = this.sliceSerialize(token)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkemail(token) {\n    onexitdata.call(this, token)\n    const node = this.stack[this.stack.length - 1]\n    node.url = 'mailto:' + this.sliceSerialize(token)\n  }\n\n  //\n  // Creaters.\n  //\n\n  /** @returns {Blockquote} */\n  function blockQuote() {\n    return {\n      type: 'blockquote',\n      children: []\n    }\n  }\n\n  /** @returns {Code} */\n  function codeFlow() {\n    return {\n      type: 'code',\n      lang: null,\n      meta: null,\n      value: ''\n    }\n  }\n\n  /** @returns {InlineCode} */\n  function codeText() {\n    return {\n      type: 'inlineCode',\n      value: ''\n    }\n  }\n\n  /** @returns {Definition} */\n  function definition() {\n    return {\n      type: 'definition',\n      identifier: '',\n      label: null,\n      title: null,\n      url: ''\n    }\n  }\n\n  /** @returns {Emphasis} */\n  function emphasis() {\n    return {\n      type: 'emphasis',\n      children: []\n    }\n  }\n\n  /** @returns {Heading} */\n  function heading() {\n    // @ts-expect-error `depth` will be set later.\n    return {\n      type: 'heading',\n      depth: undefined,\n      children: []\n    }\n  }\n\n  /** @returns {Break} */\n  function hardBreak() {\n    return {\n      type: 'break'\n    }\n  }\n\n  /** @returns {HTML} */\n  function html() {\n    return {\n      type: 'html',\n      value: ''\n    }\n  }\n\n  /** @returns {Image} */\n  function image() {\n    return {\n      type: 'image',\n      title: null,\n      url: '',\n      alt: null\n    }\n  }\n\n  /** @returns {Link} */\n  function link() {\n    return {\n      type: 'link',\n      title: null,\n      url: '',\n      children: []\n    }\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {List}\n   */\n  function list(token) {\n    return {\n      type: 'list',\n      ordered: token.type === 'listOrdered',\n      start: null,\n      spread: token._spread,\n      children: []\n    }\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {ListItem}\n   */\n  function listItem(token) {\n    return {\n      type: 'listItem',\n      spread: token._spread,\n      checked: null,\n      children: []\n    }\n  }\n\n  /** @returns {Paragraph} */\n  function paragraph() {\n    return {\n      type: 'paragraph',\n      children: []\n    }\n  }\n\n  /** @returns {Strong} */\n  function strong() {\n    return {\n      type: 'strong',\n      children: []\n    }\n  }\n\n  /** @returns {Text} */\n  function text() {\n    return {\n      type: 'text',\n      value: ''\n    }\n  }\n\n  /** @returns {ThematicBreak} */\n  function thematicBreak() {\n    return {\n      type: 'thematicBreak'\n    }\n  }\n}\n\n/**\n * Copy a point-like value.\n *\n * @param {Point} d\n *   Point-like value.\n * @returns {Point}\n *   unist point.\n */\nfunction point(d) {\n  return {\n    line: d.line,\n    column: d.column,\n    offset: d.offset\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Array<Extension | Array<Extension>>} extensions\n * @returns {void}\n */\nfunction configure(combined, extensions) {\n  let index = -1\n  while (++index < extensions.length) {\n    const value = extensions[index]\n    if (Array.isArray(value)) {\n      configure(combined, value)\n    } else {\n      extension(combined, value)\n    }\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Extension} extension\n * @returns {void}\n */\nfunction extension(combined, extension) {\n  /** @type {keyof Extension} */\n  let key\n  for (key in extension) {\n    if (own.call(extension, key)) {\n      if (key === 'canContainEols') {\n        const right = extension[key]\n        if (right) {\n          combined[key].push(...right)\n        }\n      } else if (key === 'transforms') {\n        const right = extension[key]\n        if (right) {\n          combined[key].push(...right)\n        }\n      } else if (key === 'enter' || key === 'exit') {\n        const right = extension[key]\n        if (right) {\n          Object.assign(combined[key], right)\n        }\n      }\n    }\n  }\n}\n\n/** @type {OnEnterError} */\nfunction defaultOnError(left, right) {\n  if (left) {\n    throw new Error(\n      'Cannot close `' +\n        left.type +\n        '` (' +\n        stringifyPosition({\n          start: left.start,\n          end: left.end\n        }) +\n        '): a different token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({\n          start: right.start,\n          end: right.end\n        }) +\n        ') is open'\n    )\n  } else {\n    throw new Error(\n      'Cannot close document, a token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({\n          start: right.start,\n          end: right.end\n        }) +\n        ') is still open'\n    )\n  }\n}\n","import { l as log, J as decodeEntities } from \"./mermaid-04fb0060.js\";\nimport { fromMarkdown } from \"mdast-util-from-markdown\";\nimport { dedent } from \"ts-dedent\";\nfunction preprocessMarkdown(markdown) {\n  const withoutMultipleNewlines = markdown.replace(/\\n{2,}/g, \"\\n\");\n  const withoutExtraSpaces = dedent(withoutMultipleNewlines);\n  return withoutExtraSpaces;\n}\nfunction markdownToLines(markdown) {\n  const preprocessedMarkdown = preprocessMarkdown(markdown);\n  const { children } = fromMarkdown(preprocessedMarkdown);\n  const lines = [[]];\n  let currentLine = 0;\n  function processNode(node, parentType = \"normal\") {\n    if (node.type === \"text\") {\n      const textLines = node.value.split(\"\\n\");\n      textLines.forEach((textLine, index) => {\n        if (index !== 0) {\n          currentLine++;\n          lines.push([]);\n        }\n        textLine.split(\" \").forEach((word) => {\n          if (word) {\n            lines[currentLine].push({ content: word, type: parentType });\n          }\n        });\n      });\n    } else if (node.type === \"strong\" || node.type === \"emphasis\") {\n      node.children.forEach((contentNode) => {\n        processNode(contentNode, node.type);\n      });\n    }\n  }\n  children.forEach((treeNode) => {\n    if (treeNode.type === \"paragraph\") {\n      treeNode.children.forEach((contentNode) => {\n        processNode(contentNode);\n      });\n    }\n  });\n  return lines;\n}\nfunction markdownToHTML(markdown) {\n  const { children } = fromMarkdown(markdown);\n  function output(node) {\n    if (node.type === \"text\") {\n      return node.value.replace(/\\n/g, \"<br/>\");\n    } else if (node.type === \"strong\") {\n      return `<strong>${node.children.map(output).join(\"\")}</strong>`;\n    } else if (node.type === \"emphasis\") {\n      return `<em>${node.children.map(output).join(\"\")}</em>`;\n    } else if (node.type === \"paragraph\") {\n      return `<p>${node.children.map(output).join(\"\")}</p>`;\n    }\n    return `Unsupported markdown: ${node.type}`;\n  }\n  return children.map(output).join(\"\");\n}\nfunction splitTextToChars(text) {\n  if (Intl.Segmenter) {\n    return [...new Intl.Segmenter().segment(text)].map((s) => s.segment);\n  }\n  return [...text];\n}\nfunction splitWordToFitWidth(checkFit, word) {\n  const characters = splitTextToChars(word.content);\n  return splitWordToFitWidthRecursion(checkFit, [], characters, word.type);\n}\nfunction splitWordToFitWidthRecursion(checkFit, usedChars, remainingChars, type) {\n  if (remainingChars.length === 0) {\n    return [\n      { content: usedChars.join(\"\"), type },\n      { content: \"\", type }\n    ];\n  }\n  const [nextChar, ...rest] = remainingChars;\n  const newWord = [...usedChars, nextChar];\n  if (checkFit([{ content: newWord.join(\"\"), type }])) {\n    return splitWordToFitWidthRecursion(checkFit, newWord, rest, type);\n  }\n  if (usedChars.length === 0 && nextChar) {\n    usedChars.push(nextChar);\n    remainingChars.shift();\n  }\n  return [\n    { content: usedChars.join(\"\"), type },\n    { content: remainingChars.join(\"\"), type }\n  ];\n}\nfunction splitLineToFitWidth(line, checkFit) {\n  if (line.some(({ content }) => content.includes(\"\\n\"))) {\n    throw new Error(\"splitLineToFitWidth does not support newlines in the line\");\n  }\n  return splitLineToFitWidthRecursion(line, checkFit);\n}\nfunction splitLineToFitWidthRecursion(words, checkFit, lines = [], newLine = []) {\n  if (words.length === 0) {\n    if (newLine.length > 0) {\n      lines.push(newLine);\n    }\n    return lines.length > 0 ? lines : [];\n  }\n  let joiner = \"\";\n  if (words[0].content === \" \") {\n    joiner = \" \";\n    words.shift();\n  }\n  const nextWord = words.shift() ?? { content: \" \", type: \"normal\" };\n  const lineWithNextWord = [...newLine];\n  if (joiner !== \"\") {\n    lineWithNextWord.push({ content: joiner, type: \"normal\" });\n  }\n  lineWithNextWord.push(nextWord);\n  if (checkFit(lineWithNextWord)) {\n    return splitLineToFitWidthRecursion(words, checkFit, lines, lineWithNextWord);\n  }\n  if (newLine.length > 0) {\n    lines.push(newLine);\n    words.unshift(nextWord);\n  } else if (nextWord.content) {\n    const [line, rest] = splitWordToFitWidth(checkFit, nextWord);\n    lines.push([line]);\n    if (rest.content) {\n      words.unshift(rest);\n    }\n  }\n  return splitLineToFitWidthRecursion(words, checkFit, lines);\n}\nfunction applyStyle(dom, styleFn) {\n  if (styleFn) {\n    dom.attr(\"style\", styleFn);\n  }\n}\nfunction addHtmlSpan(element, node, width, classes, addBackground = false) {\n  const fo = element.append(\"foreignObject\");\n  const div = fo.append(\"xhtml:div\");\n  const label = node.label;\n  const labelClass = node.isNode ? \"nodeLabel\" : \"edgeLabel\";\n  div.html(\n    `\n    <span class=\"${labelClass} ${classes}\" ` + (node.labelStyle ? 'style=\"' + node.labelStyle + '\"' : \"\") + \">\" + label + \"</span>\"\n  );\n  applyStyle(div, node.labelStyle);\n  div.style(\"display\", \"table-cell\");\n  div.style(\"white-space\", \"nowrap\");\n  div.style(\"max-width\", width + \"px\");\n  div.attr(\"xmlns\", \"http://www.w3.org/1999/xhtml\");\n  if (addBackground) {\n    div.attr(\"class\", \"labelBkg\");\n  }\n  let bbox = div.node().getBoundingClientRect();\n  if (bbox.width === width) {\n    div.style(\"display\", \"table\");\n    div.style(\"white-space\", \"break-spaces\");\n    div.style(\"width\", width + \"px\");\n    bbox = div.node().getBoundingClientRect();\n  }\n  fo.style(\"width\", bbox.width);\n  fo.style(\"height\", bbox.height);\n  return fo.node();\n}\nfunction createTspan(textElement, lineIndex, lineHeight) {\n  return textElement.append(\"tspan\").attr(\"class\", \"text-outer-tspan\").attr(\"x\", 0).attr(\"y\", lineIndex * lineHeight - 0.1 + \"em\").attr(\"dy\", lineHeight + \"em\");\n}\nfunction computeWidthOfText(parentNode, lineHeight, line) {\n  const testElement = parentNode.append(\"text\");\n  const testSpan = createTspan(testElement, 1, lineHeight);\n  updateTextContentAndStyles(testSpan, line);\n  const textLength = testSpan.node().getComputedTextLength();\n  testElement.remove();\n  return textLength;\n}\nfunction computeDimensionOfText(parentNode, lineHeight, text) {\n  var _a;\n  const testElement = parentNode.append(\"text\");\n  const testSpan = createTspan(testElement, 1, lineHeight);\n  updateTextContentAndStyles(testSpan, [{ content: text, type: \"normal\" }]);\n  const textDimension = (_a = testSpan.node()) == null ? void 0 : _a.getBoundingClientRect();\n  if (textDimension) {\n    testElement.remove();\n  }\n  return textDimension;\n}\nfunction createFormattedText(width, g, structuredText, addBackground = false) {\n  const lineHeight = 1.1;\n  const labelGroup = g.append(\"g\");\n  const bkg = labelGroup.insert(\"rect\").attr(\"class\", \"background\");\n  const textElement = labelGroup.append(\"text\").attr(\"y\", \"-10.1\");\n  let lineIndex = 0;\n  for (const line of structuredText) {\n    const checkWidth = (line2) => computeWidthOfText(labelGroup, lineHeight, line2) <= width;\n    const linesUnderWidth = checkWidth(line) ? [line] : splitLineToFitWidth(line, checkWidth);\n    for (const preparedLine of linesUnderWidth) {\n      const tspan = createTspan(textElement, lineIndex, lineHeight);\n      updateTextContentAndStyles(tspan, preparedLine);\n      lineIndex++;\n    }\n  }\n  if (addBackground) {\n    const bbox = textElement.node().getBBox();\n    const padding = 2;\n    bkg.attr(\"x\", -padding).attr(\"y\", -padding).attr(\"width\", bbox.width + 2 * padding).attr(\"height\", bbox.height + 2 * padding);\n    return labelGroup.node();\n  } else {\n    return textElement.node();\n  }\n}\nfunction updateTextContentAndStyles(tspan, wrappedLine) {\n  tspan.text(\"\");\n  wrappedLine.forEach((word, index) => {\n    const innerTspan = tspan.append(\"tspan\").attr(\"font-style\", word.type === \"emphasis\" ? \"italic\" : \"normal\").attr(\"class\", \"text-inner-tspan\").attr(\"font-weight\", word.type === \"strong\" ? \"bold\" : \"normal\");\n    if (index === 0) {\n      innerTspan.text(word.content);\n    } else {\n      innerTspan.text(\" \" + word.content);\n    }\n  });\n}\nconst createText = (el, text = \"\", {\n  style = \"\",\n  isTitle = false,\n  classes = \"\",\n  useHtmlLabels = true,\n  isNode = true,\n  width = 200,\n  addSvgBackground = false\n} = {}) => {\n  log.info(\"createText\", text, style, isTitle, classes, useHtmlLabels, isNode, addSvgBackground);\n  if (useHtmlLabels) {\n    const htmlText = markdownToHTML(text);\n    const node = {\n      isNode,\n      label: decodeEntities(htmlText).replace(\n        /fa[blrs]?:fa-[\\w-]+/g,\n        (s) => `<i class='${s.replace(\":\", \" \")}'></i>`\n      ),\n      labelStyle: style.replace(\"fill:\", \"color:\")\n    };\n    const vertexNode = addHtmlSpan(el, node, width, classes, addSvgBackground);\n    return vertexNode;\n  } else {\n    const structuredText = markdownToLines(text);\n    const svgLabel = createFormattedText(width, el, structuredText, addSvgBackground);\n    return svgLabel;\n  }\n};\nexport {\n  createText as a,\n  computeDimensionOfText as c\n};\n"],"names":["emptyOptions","value","options","settings","includeImageAlt","includeHtml","one","node","type","alt","children","Array","isArray","values","result","index","length","join","Boolean","splice","list","start","remove","items","end","chunkStart","parameters","from","unshift","slice","push","hasOwnProperty","combineExtensions","extensions","all","syntaxExtension","extension","hook","maybe","call","undefined","left","right","code","constructs","existing","before","add","combineHtmlExtensions","htmlExtensions","handlers","htmlExtension","unicodePunctuationRegex","asciiAlpha","regexCheck","asciiAlphanumeric","asciiAtext","asciiControl","asciiDigit","asciiHexDigit","asciiPunctuation","markdownLineEnding","markdownLineEndingOrSpace","markdownSpace","unicodePunctuation","unicodeWhitespace","regex","check","test","String","fromCharCode","factorySpace","effects","ok","max","limit","Number","POSITIVE_INFINITY","size","enter","prefix","consume","exit","content","tokenize","initializeContent","contentStart","attempt","this","parser","contentInitial","afterContentStartConstruct","paragraphInitial","previous","lineStart","token","contentType","next","data","initializeDocument","containerConstruct","tokenizeContainer","self","stack","continued","childFlow","childToken","lineStartOffset","item","containerState","continuation","documentContinue","checkNewContainers","_closeFlow","closeFlow","indexBeforeExits","events","indexBeforeFlow","point","exitContainers","Object","assign","documentContinued","currentConstruct","concrete","flowStart","interrupt","_gfmTableDynamicInterruptHack","thereIsANewContainer","thereIsNoNewContainer","lazy","now","line","offset","containerContinue","flow","_tokenizer","flowContinue","writeToChild","eof","stream","sliceStream","defineSkip","write","seen","entry","nok","document","disable","null","includes","blankLine","tokenizeBlankLine","partial","after","subtokenize","jumps","event","lineIndex","otherIndex","otherEvent","subevents","more","_isInFirstContentOfListItem","subcontent","_container","eventIndex","context","startPosition","startPositions","tokenizer","childEvents","gaps","current","adjust","breaks","_gfmTasklistFirstContentOfListItem","pop","tokenizeContent","resolve","resolveContent","continuationConstruct","tokenizeContinuation","chunkInside","contentEnd","contentContinue","startLookahead","prefixed","tail","sliceSerialize","initializeFlow","initial","atBlankEnding","flowInitial","afterConstruct","resolver","resolveAll","createResolver","string","initializeFactory","field","initializeText","resolveAllLineSuffixes","text","notText","atBreak","extraResolver","resolveAllText","chunks","bufferIndex","tabs","chunk","charCodeAt","column","_index","_bufferIndex","called","createTokenizer","initialize","columnStart","resolveAllConstructs","consumed","constructFactory","onsuccessfulconstruct","onsuccessfulcheck","state","expectedCode","main","addResult","expandTabs","serializeChunks","sliceChunks","accountForPotentialSkip","chunkIndex","go","fields","construct","info","_","restore","onreturn","returnState","bogusState","listOfConstructs","constructIndex","handleListOfConstructs","handleMapOfConstructs","map","def","handleConstruct","store","name","create","resolveTo","startPoint","startPrevious","startCurrentConstruct","startEventsIndex","startStack","startIndex","startBufferIndex","endIndex","endBufferIndex","view","head","shift","atTab","thematicBreak","tokenizeThematicBreak","marker","sequence","tokenizeListStart","tokenizeListContinuation","tokenizeListEnd","listItemPrefixWhitespaceConstruct","tokenizeListItemPrefixWhitespace","indentConstruct","tokenizeIndent","initialSize","kind","atMarker","inside","onBlank","endOfPrefix","otherPrefix","initialBlankLine","notBlank","furtherBlankLines","notInCurrentItem","afterPrefix","blockQuote","tokenizeBlockQuoteStart","tokenizeBlockQuoteContinuation","open","contStart","contBefore","factoryDestination","literalType","literalMarkerType","rawType","stringType","balance","enclosedBefore","raw","enclosed","enclosedEscape","rawEscape","factoryLabel","markerType","labelInside","labelEscape","factoryTitle","begin","escape","factoryWhitespace","normalizeIdentifier","replace","toLowerCase","toUpperCase","definition","tokenizeDefinition","titleBefore","tokenizeTitleBefore","identifier","labelAfter","markerAfter","destinationBefore","destinationAfter","afterWhitespace","defined","beforeMarker","titleAfter","titleAfterOptionalWhitespace","codeIndented","tokenizeCodeIndented","furtherStart","tokenizeFurtherStart","headingAtx","tokenizeHeadingAtx","resolveHeadingAtx","sequenceOpen","sequenceFurther","setextUnderline","tokenizeSetextUnderline","resolveToSetextUnderline","heading","paragraph","htmlBlockNames","htmlRawNames","htmlFlow","tokenizeHtmlFlow","resolveToHtmlFlow","blankLineBefore","tokenizeBlankLineBefore","nonLazyContinuationStart","tokenizeNonLazyContinuationStart","closingTag","buffer","markerB","declarationOpen","tagCloseStart","continuationDeclarationInside","tagName","commentOpenInside","cdataOpenInside","slash","basicSelfClosing","completeClosingTagAfter","completeAttributeNameBefore","completeEnd","completeAttributeName","completeAttributeNameAfter","completeAttributeValueBefore","completeAttributeValueQuoted","completeAttributeValueUnquoted","completeAttributeValueQuotedAfter","completeAfter","continuationCommentInside","continuationRawTagOpen","continuationClose","continuationCdataInside","continuationAfter","continuationStart","continuationStartNonLazy","continuationBefore","continuationRawEndTag","nonLazyContinuation","tokenizeNonLazyContinuation","codeFenced","tokenizeCodeFenced","closeStart","tokenizeCloseStart","initialPrefix","sizeOpen","beforeSequenceOpen","infoBefore","atNonLazyBreak","metaBefore","meta","contentBefore","beforeContentChunk","contentChunk","startBefore","beforeSequenceClose","sequenceClose","sequenceCloseAfter","createElement","decodeNamedCharacterReference","characterReference","innerHTML","char","textContent","tokenizeCharacterReference","numeric","characterEscape","tokenizeCharacterEscape","lineEnding","tokenizeLineEnding","labelEnd","tokenizeLabelEnd","resolveToLabelEnd","resolveAllLabelEnd","resourceConstruct","tokenizeResource","referenceFullConstruct","tokenizeReferenceFull","referenceCollapsedConstruct","tokenizeReferenceCollapsed","close","media","_inactive","_balanced","group","label","insideSpan","labelStart","labelEndNok","labelEndOk","referenceNotFull","resourceStart","resourceBefore","resourceOpen","resourceEnd","resourceDestinationAfter","resourceDestinationMissing","resourceBetween","resourceTitleAfter","referenceFull","referenceFullAfter","referenceFullMissing","referenceCollapsedStart","referenceCollapsedOpen","labelStartImage","tokenizeLabelStartImage","classifyCharacter","attention","tokenizeAttention","resolveAllAttention","openingSequence","closingSequence","use","nextEvents","_close","_open","movePoint","attentionMarkers","autolink","tokenizeAutolink","schemeOrEmailAtext","emailAtext","schemeInsideOrEmailAtext","urlInside","emailAtSignOrDot","emailLabel","emailValue","htmlText","tokenizeHtmlText","instruction","tagOpen","declaration","commentEnd","comment","commentClose","lineEndingBefore","cdata","cdataClose","cdataEnd","instructionClose","tagClose","tagCloseBetween","tagOpenBetween","tagOpenAttributeName","tagOpenAttributeNameAfter","tagOpenAttributeValueBefore","tagOpenAttributeValueQuoted","tagOpenAttributeValueUnquoted","tagOpenAttributeValueQuotedAfter","lineEndingAfter","lineEndingAfterPrefix","labelStartLink","tokenizeLabelStartLink","hardBreakEscape","tokenizeHardBreakEscape","codeText","tokenizeCodeText","resolveCodeText","tailExitIndex","headEnterIndex","between","parse","creator","search","preprocess","atCarriageReturn","preprocessor","encoding","match","endPosition","toString","lastIndex","exec","Math","ceil","postprocess","decodeNumericCharacterReference","base","parseInt","characterEscapeOrReference","decodeString","decode","$0","$1","$2","hex","stringifyPosition","position","pos","own","fromMarkdown","compiler","config","transforms","canContainEols","opener","link","autolinkProtocol","onenterdata","autolinkEmail","atxHeading","codeFlow","codeFencedFenceInfo","codeFencedFenceMeta","codeTextData","codeFlowValue","definitionDestinationString","definitionLabelString","definitionTitleString","emphasis","hardBreak","hardBreakTrailing","html","htmlFlowData","htmlTextData","image","listItem","listItemValue","onenterlistitemvalue","listOrdered","onenterlistordered","listUnordered","reference","onenterreference","referenceString","resourceDestinationString","resourceTitleString","setextHeading","strong","closer","atxHeadingSequence","onexitatxheadingsequence","onexitautolinkemail","onexitautolinkprotocol","characterEscapeValue","onexitdata","characterReferenceMarkerHexadecimal","onexitcharacterreferencemarker","characterReferenceMarkerNumeric","characterReferenceValue","onexitcharacterreferencevalue","onexitcodefenced","codeFencedFence","onexitcodefencedfence","onexitcodefencedfenceinfo","onexitcodefencedfencemeta","onexitcodeindented","onexitcodetext","onexitdefinitiondestinationstring","onexitdefinitionlabelstring","onexitdefinitiontitlestring","onexithardbreak","onexithtmlflow","onexithtmltext","onexitimage","onexitlabel","labelText","onexitlabeltext","onexitlineending","onexitlink","onexitreferencestring","onexitresourcedestinationstring","onexitresourcetitlestring","resource","onexitresource","onexitsetextheading","setextHeadingLineSequence","onexitsetextheadinglinesequence","setextHeadingText","onexitsetextheadingtext","configure","mdastExtensions","compile","tree","tokenStack","resume","setData","getData","listStack","prepareList","handler","defaultOnError","containerBalance","listSpread","firstBlankLineIndex","tailIndex","tailEvent","_spread","key","and","errorHandler","parent","onExitError","Error","ancestor","lang","title","url","depth","referenceType","fragment","ordered","spread","checked","d","combined","preprocessMarkdown","markdown","withoutMultipleNewlines","withoutExtraSpaces","markdownToLines","preprocessedMarkdown","lines","currentLine","processNode","parentType","textLines","split","forEach","textLine","word","contentNode","treeNode","markdownToHTML","output","splitTextToChars","Intl","Segmenter","segment","s","splitWordToFitWidth","checkFit","characters","splitWordToFitWidthRecursion","usedChars","remainingChars","nextChar","rest","newWord","splitLineToFitWidth","some","splitLineToFitWidthRecursion","words","newLine","joiner","nextWord","lineWithNextWord","applyStyle","dom","styleFn","attr","addHtmlSpan","element","width","classes","addBackground","fo","append","div","labelClass","isNode","labelStyle","style","bbox","getBoundingClientRect","height","createTspan","textElement","lineHeight","computeWidthOfText","parentNode","testElement","testSpan","updateTextContentAndStyles","textLength","getComputedTextLength","computeDimensionOfText","_a","textDimension","createFormattedText","g","structuredText","labelGroup","bkg","insert","checkWidth","line2","linesUnderWidth","preparedLine","tspan","getBBox","padding","wrappedLine","innerTspan","createText","el","isTitle","useHtmlLabels","addSvgBackground","l","vertexNode","svgLabel"],"sourceRoot":""}